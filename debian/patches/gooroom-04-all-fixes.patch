From 8c4486bed38f0adaac02f9d32156faf8a59f7612 Mon Sep 17 00:00:00 2001
From: JeongHaeRyong <jeong89@gooroom.kr>
Date: Wed, 1 Apr 2020 17:25:22 +0900
Subject: [PATCH 4/4] gooroom all fixes

---
 panels/color/cc-color-panel.ui                     |   4 +-
 panels/datetime/cc-datetime-panel.c                |   6 +-
 panels/datetime/cc-datetime-panel.ui               |   4 +-
 panels/display/cc-display-panel.c                  |   1 +
 panels/display/cc-night-light-page.c               |   8 +-
 panels/display/cc-night-light-page.ui              |   5 +-
 panels/info-overview/cc-info-overview-panel.c      |   9 +-
 panels/info-overview/cc-info-overview-panel.ui     |   8 +-
 panels/keyboard/cc-keyboard-shortcut-editor.c      |  82 ++-
 panels/meson.build                                 |   2 +-
 panels/network/cc-wifi-panel.c                     |   3 +-
 .../network/connection-editor/ce-page-ethernet.c   |   5 +-
 panels/network/connection-editor/ethernet-page.ui  | 129 ++--
 panels/network/net-device-ethernet.c               |  51 +-
 panels/network/net-device-ethernet.h               |   1 +
 panels/power/cc-brightness-scale.c                 |   2 +-
 panels/power/cc-power-panel.c                      | 124 +++-
 panels/power/cc-power-panel.ui                     |   4 +
 panels/printers/cc-printers-panel.c                |  61 +-
 panels/printers/pp-printer-entry.c                 |   6 +
 panels/printers/pp-printer-entry.h                 |   2 +
 panels/region/cc-region-panel.c                    | 763 +--------------------
 panels/region/cc-region-panel.ui                   | 129 ----
 panels/region/meson.build                          |  11 -
 panels/search/cc-search-locations-dialog.c         |  52 +-
 panels/thunderbolt/cc-bolt-panel.ui                |  18 +-
 panels/universal-access/cc-ua-panel.c              | 161 ++---
 panels/universal-access/cc-ua-panel.ui             |  32 +-
 panels/user-accounts/cc-user-panel.c               |  28 +-
 panels/user-accounts/meson.build                   |   3 +-
 panels/user-accounts/pw-utils.c                    |   4 +-
 po/POTFILES.in                                     |   1 +
 po/en.po                                           |  40 ++
 po/en_GB.po                                        |  40 ++
 po/ko.po                                           |  65 +-
 shell/cc-application.c                             |   7 +-
 shell/cc-panel-list.c                              |  44 +-
 shell/cc-panel-loader.c                            |  17 +-
 shell/cc-shell-model.c                             |  31 +
 shell/org.gnome.ControlCenter.gschema.xml          |   2 +-
 40 files changed, 810 insertions(+), 1155 deletions(-)

diff --git a/panels/color/cc-color-panel.ui b/panels/color/cc-color-panel.ui
index 647e598..34f6727 100644
--- a/panels/color/cc-color-panel.ui
+++ b/panels/color/cc-color-panel.ui
@@ -805,7 +805,7 @@
                         <property name="position">1</property>
                       </packing>
                     </child>
-                    <child>
+                    <!--child>
                       <object class="GtkLinkButton" id="linkbutton_help">
                         <property name="label" translatable="yes">Learn more</property>
                         <property name="visible">True</property>
@@ -825,7 +825,7 @@
                         <property name="fill">True</property>
                         <property name="position">2</property>
                       </packing>
-                    </child>
+                    </child-->
                   </object>
                   <packing>
                     <property name="expand">False</property>
diff --git a/panels/datetime/cc-datetime-panel.c b/panels/datetime/cc-datetime-panel.c
index eb7e78b..91222df 100644
--- a/panels/datetime/cc-datetime-panel.c
+++ b/panels/datetime/cc-datetime-panel.c
@@ -630,9 +630,9 @@ on_permission_changed (CcDateTimePanel *self)
 
   /* All the widgets but the lock button and the 24h setting */
   gtk_widget_set_sensitive (self->auto_datetime_row, allowed);
-  gtk_widget_set_sensitive (self->auto_timezone_row, location_allowed && (allowed || tz_allowed));
-  gtk_widget_set_sensitive (self->datetime_button, allowed && !using_ntp);
-  gtk_widget_set_sensitive (self->timezone_button, (allowed || tz_allowed) && (!auto_timezone || !location_allowed));
+  gtk_widget_set_sensitive (self->auto_timezone_row, allowed);
+  gtk_widget_set_sensitive (self->datetime_button, allowed);
+  gtk_widget_set_sensitive (self->timezone_button, allowed);
 
   /* Hide the subdialogs if we no longer have permissions */
   if (!allowed)
diff --git a/panels/datetime/cc-datetime-panel.ui b/panels/datetime/cc-datetime-panel.ui
index dc7519c..97bf98e 100644
--- a/panels/datetime/cc-datetime-panel.ui
+++ b/panels/datetime/cc-datetime-panel.ui
@@ -192,7 +192,7 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="title" translatable="yes">Automatic _Date &amp; Time</property>
-                            <property name="subtitle" translatable="yes">Requires internet access</property>
+                            <property name="subtitle" translatable="yes">Apply network time when connecting to the Internet</property>
                             <property name="use_underline">True</property>
                             <child>
                               <object class="GtkSwitch" id="network_time_switch">
@@ -252,7 +252,7 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="title" translatable="yes">Automatic Time _Zone</property>
-                            <property name="subtitle" translatable="yes">Requires location services enabled and internet access</property>
+                            <property name="subtitle" translatable="yes">Apply network time when connecting to the Internet</property>
                             <property name="use_underline">True</property>
                             <child>
                               <object class="GtkSwitch" id="auto_timezone_switch">
diff --git a/panels/display/cc-display-panel.c b/panels/display/cc-display-panel.c
index f58aaa8..c9c32ff 100644
--- a/panels/display/cc-display-panel.c
+++ b/panels/display/cc-display-panel.c
@@ -1,6 +1,7 @@
 /*
  * Copyright (C) 2007, 2008  Red Hat, Inc.
  * Copyright (C) 2013 Intel, Inc.
+ * Copyright (C) 2019 gooroom, <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
diff --git a/panels/display/cc-night-light-page.c b/panels/display/cc-night-light-page.c
index f51b0ba..91b0f4a 100644
--- a/panels/display/cc-night-light-page.c
+++ b/panels/display/cc-night-light-page.c
@@ -42,7 +42,7 @@ struct _CcNightLightPage {
   GtkListBox          *listbox;
   GtkWidget           *scale_color_temperature;
   GtkWidget           *night_light_toggle_switch;
-  GtkComboBox         *schedule_type_combo;
+//  GtkComboBox         *schedule_type_combo;
   GtkWidget           *spinbutton_from_hours;
   GtkWidget           *spinbutton_from_minutes;
   GtkWidget           *spinbutton_to_hours;
@@ -144,7 +144,7 @@ dialog_update_state (CcNightLightPage *self)
 
   gtk_widget_set_sensitive (self->box_manual, enabled && !automatic);
 
-  gtk_combo_box_set_active_id (self->schedule_type_combo, automatic ? "automatic" : "manual");
+//  gtk_combo_box_set_active_id (self->schedule_type_combo, automatic ? "automatic" : "manual");
 
   /* set from */
   if (automatic && self->proxy_color != NULL)
@@ -220,7 +220,7 @@ build_schedule_combo_row (CcNightLightPage *self)
 
   gtk_widget_set_sensitive (self->box_manual, enabled && !automatic);
 
-  gtk_combo_box_set_active_id (self->schedule_type_combo, automatic ? "automatic" : "manual");
+//  gtk_combo_box_set_active_id (self->schedule_type_combo, automatic ? "automatic" : "manual");
 
   self->ignore_value_changed = FALSE;
 }
@@ -591,7 +591,7 @@ cc_night_light_page_class_init (CcNightLightPageClass *klass)
   gtk_widget_class_bind_template_child (widget_class, CcNightLightPage, infobar_disabled);
   gtk_widget_class_bind_template_child (widget_class, CcNightLightPage, listbox);
   gtk_widget_class_bind_template_child (widget_class, CcNightLightPage, night_light_toggle_switch);
-  gtk_widget_class_bind_template_child (widget_class, CcNightLightPage, schedule_type_combo);
+//  gtk_widget_class_bind_template_child (widget_class, CcNightLightPage, schedule_type_combo);
   gtk_widget_class_bind_template_child (widget_class, CcNightLightPage, scale_color_temperature);
   gtk_widget_class_bind_template_child (widget_class, CcNightLightPage, spinbutton_from_hours);
   gtk_widget_class_bind_template_child (widget_class, CcNightLightPage, spinbutton_from_minutes);
diff --git a/panels/display/cc-night-light-page.ui b/panels/display/cc-night-light-page.ui
index 02b14f7..76de592 100644
--- a/panels/display/cc-night-light-page.ui
+++ b/panels/display/cc-night-light-page.ui
@@ -108,6 +108,7 @@
                     <child>
                       <object class="HdyActionRow">
                         <property name="visible">True</property>
+                        <property name="hexpand">False</property>
                         <property name="title" translatable="yes">Night Light</property>
                         <property name="activatable-widget">night_light_toggle_switch</property>
 
@@ -121,7 +122,7 @@
                     </child>
 
                     <!-- Schedule -->
-                    <child>
+                    <!--child>
                       <object class="HdyActionRow">
                         <property name="visible">True</property>
                         <property name="title" translatable="yes">Schedule</property>
@@ -139,7 +140,7 @@
                           </object>
                         </child>
                       </object>
-                    </child>
+                    </child-->
 
                     <!-- Time -->
                     <child>
diff --git a/panels/info-overview/cc-info-overview-panel.c b/panels/info-overview/cc-info-overview-panel.c
index 98c77e9..01c72a5 100644
--- a/panels/info-overview/cc-info-overview-panel.c
+++ b/panels/info-overview/cc-info-overview-panel.c
@@ -4,6 +4,7 @@
  * Copyright (C) 2017 Mohammed Sadiq <sadiq@sadiqpk.org>
  * Copyright (C) 2010 Red Hat, Inc
  * Copyright (C) 2008 William Jon McCann <jmccann@redhat.com>
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -68,7 +69,7 @@ struct _CcInfoOverviewPanel
   CcListRow       *hostname_row;
   CcListRow       *memory_row;
   GtkListBox      *os_box;
-  CcListRow       *os_name_row;
+//  CcListRow       *os_name_row;
   CcListRow       *os_type_row;
   CcListRow       *processor_row;
   CcListRow       *software_updates_row;
@@ -710,8 +711,8 @@ info_overview_panel_setup_overview (CcInfoOverviewPanel *self)
   os_type_text = get_os_type ();
   cc_list_row_set_secondary_label (self->os_type_row, os_type_text);
 
-  os_name_text = get_os_name ();
-  cc_list_row_set_secondary_label (self->os_name_row, os_name_text);
+//  os_name_text = get_os_name ();
+//  cc_list_row_set_secondary_label (self->os_name_row, os_name_text);
 
   get_primary_disc_info (self);
 
@@ -825,7 +826,7 @@ cc_info_overview_panel_class_init (CcInfoOverviewPanelClass *klass)
   gtk_widget_class_bind_template_child (widget_class, CcInfoOverviewPanel, hostname_row);
   gtk_widget_class_bind_template_child (widget_class, CcInfoOverviewPanel, memory_row);
   gtk_widget_class_bind_template_child (widget_class, CcInfoOverviewPanel, os_box);
-  gtk_widget_class_bind_template_child (widget_class, CcInfoOverviewPanel, os_name_row);
+//  gtk_widget_class_bind_template_child (widget_class, CcInfoOverviewPanel, os_name_row);
   gtk_widget_class_bind_template_child (widget_class, CcInfoOverviewPanel, os_type_row);
   gtk_widget_class_bind_template_child (widget_class, CcInfoOverviewPanel, processor_row);
   gtk_widget_class_bind_template_child (widget_class, CcInfoOverviewPanel, rename_button);
diff --git a/panels/info-overview/cc-info-overview-panel.ui b/panels/info-overview/cc-info-overview-panel.ui
index cac8567..b3153ad 100644
--- a/panels/info-overview/cc-info-overview-panel.ui
+++ b/panels/info-overview/cc-info-overview-panel.ui
@@ -24,7 +24,7 @@
                 <property name="valign">center</property>
                 <property name="spacing">30</property>
                 <property name="orientation">vertical</property>
-                <child>
+                <!--child>
                   <object class="GtkImage">
                     <property name="visible">True</property>
                     <property name="can_focus">False</property>
@@ -35,7 +35,7 @@
                     <property name="expand">False</property>
                     <property name="fill">False</property>
                   </packing>
-                </child>
+                </child-->
 
                 <child>
                   <object class="GtkListBox">
@@ -117,14 +117,14 @@
                     </style>
 
                     <!-- OS Name -->
-                    <child>
+                    <!--child>
                       <object class="CcListRow" id="os_name_row">
                         <property name="visible">True</property>
                         <property name="activatable">False</property>
                         <property name="title" translatable="yes"
                                   comments="translators: this field contains the distro name and version">OS Name</property>
                       </object>
-                    </child>
+                    </child-->
 
                     <!-- OS Type -->
                     <child>
diff --git a/panels/keyboard/cc-keyboard-shortcut-editor.c b/panels/keyboard/cc-keyboard-shortcut-editor.c
index e53bb01..1b8d3bc 100644
--- a/panels/keyboard/cc-keyboard-shortcut-editor.c
+++ b/panels/keyboard/cc-keyboard-shortcut-editor.c
@@ -54,7 +54,6 @@ struct _CcKeyboardShortcutEditor
 
   CcKeyboardManager  *manager;
   CcKeyboardItem     *item;
-  GBinding           *reset_item_binding;
 
   CcKeyboardItem     *collision_item;
 
@@ -287,9 +286,9 @@ set_header_mode (CcKeyboardShortcutEditor *self,
 {
   gtk_header_bar_set_show_close_button (self->headerbar, mode == HEADER_MODE_CUSTOM_EDIT);
 
-  gtk_widget_set_visible (GTK_WIDGET (self->add_button), mode == HEADER_MODE_ADD);
   gtk_widget_set_visible (GTK_WIDGET (self->cancel_button), mode != HEADER_MODE_NONE &&
                                                mode != HEADER_MODE_CUSTOM_EDIT);
+  gtk_widget_set_visible (GTK_WIDGET (self->add_button), mode == HEADER_MODE_ADD);
   gtk_widget_set_visible (GTK_WIDGET (self->replace_button), mode == HEADER_MODE_REPLACE);
   gtk_widget_set_visible (GTK_WIDGET (self->set_button), mode == HEADER_MODE_SET);
   gtk_widget_set_visible (GTK_WIDGET (self->remove_button), mode == HEADER_MODE_CUSTOM_EDIT);
@@ -314,6 +313,39 @@ set_header_mode (CcKeyboardShortcutEditor *self,
     }
 }
 
+static gboolean
+is_value_default (CcKeyboardShortcutEditor *self)
+{
+  GList *list;
+  CcKeyCombo *default_combo;
+  char *default_binding;
+  char *custom_binding;
+  gboolean value_default = FALSE;
+
+  custom_binding = gtk_accelerator_name_with_keycode (NULL,
+                                                      self->custom_combo->keyval,
+                                                      self->custom_combo->keycode,
+                                                      self->custom_combo->mask);
+
+  list = cc_keyboard_item_get_default_combos (self->item);
+  if (list != NULL)
+  {
+    default_combo = list->data;
+    default_binding = gtk_accelerator_name_with_keycode (NULL,
+                                                         default_combo->keyval,
+                                                         default_combo->keycode,
+                                                         default_combo->mask);
+
+    value_default = (g_strcmp0 (default_binding, custom_binding) == 0);
+  }
+  else
+  {
+    value_default = (g_strcmp0 ("0x00", custom_binding) == 0);
+  }
+
+  return !value_default;
+}
+
 static void
 setup_custom_shortcut (CcKeyboardShortcutEditor *self)
 {
@@ -377,12 +409,13 @@ setup_custom_shortcut (CcKeyboardShortcutEditor *self)
 
   accel = gtk_accelerator_name (self->custom_combo->keyval, self->custom_combo->mask);
 
-
   /* Setup the accelerator label */
   gtk_shortcut_label_set_accelerator (shortcut_label, accel);
 
   self->edited = TRUE;
 
+  gtk_widget_set_visible (GTK_WIDGET (self->reset_button), is_value_default (self));
+
   release_grab (self);
 
   /*
@@ -515,23 +548,33 @@ reset_custom_clicked_cb (CcKeyboardShortcutEditor *self)
 static void
 reset_item_clicked_cb (CcKeyboardShortcutEditor *self)
 {
-  CcKeyCombo *combo;
-  gchar *accel;
+  CcKeyCombo *default_combo;
+  GList *list;
 
-  /* Reset first, then update the shortcut */
-  cc_keyboard_manager_reset_shortcut (self->manager, self->item);
+  self->edited = TRUE;
+  self->custom_is_modifier = FALSE;
+  memset (self->custom_combo, 0, sizeof (CcKeyCombo));
 
-  combo = cc_keyboard_item_get_primary_combo (self->item);
-  accel = gtk_accelerator_name (combo->keyval, combo->mask);
-  gtk_shortcut_label_set_accelerator (GTK_SHORTCUT_LABEL (self->shortcut_accel_label), accel);
+  list = cc_keyboard_item_get_default_combos (self->item);
+  if (list != NULL)
+  {
+    default_combo = list->data;
+    self->custom_combo->keycode = default_combo->keycode;
+    self->custom_combo->keyval = default_combo->keyval;
+    self->custom_combo->mask = default_combo->mask;
+  }
+
+  self->edited = FALSE;
+  setup_custom_shortcut (self);
 
-  g_free (accel);
 }
 
 static void
 set_button_clicked_cb (CcKeyboardShortcutEditor *self)
 {
+  release_grab (self);
   update_shortcut (self);
+
   gtk_widget_hide (GTK_WIDGET (self));
 }
 
@@ -579,15 +622,8 @@ setup_keyboard_item (CcKeyboardShortcutEditor *self,
   gtk_label_set_markup (self->top_info_label, text);
 
   /* Accelerator labels */
-  gtk_shortcut_label_set_accelerator (self->shortcut_accel_label, accel);
-  gtk_shortcut_label_set_accelerator (self->custom_shortcut_accel_label, accel);
-
-  g_clear_pointer (&self->reset_item_binding, g_binding_unbind);
-  self->reset_item_binding = g_object_bind_property (item,
-                                                     "is-value-default",
-                                                     self->reset_button,
-                                                     "visible",
-                                                     G_BINDING_DEFAULT | G_BINDING_INVERT_BOOLEAN | G_BINDING_SYNC_CREATE);
+//  gtk_shortcut_label_set_accelerator (self->shortcut_accel_label, accel);
+//  gtk_shortcut_label_set_accelerator (self->custom_shortcut_accel_label, accel);
 
   /* Setup the custom entries */
   if (is_custom)
@@ -632,7 +668,6 @@ cc_keyboard_shortcut_editor_finalize (GObject *object)
   g_clear_object (&self->manager);
 
   g_clear_pointer (&self->custom_combo, g_free);
-  g_clear_pointer (&self->reset_item_binding, g_binding_unbind);
 
   G_OBJECT_CLASS (cc_keyboard_shortcut_editor_parent_class)->finalize (object);
 }
@@ -739,11 +774,6 @@ cc_keyboard_shortcut_editor_key_press_event (GtkWidget   *widget,
       self->custom_is_modifier = FALSE;
       memset (self->custom_combo, 0, sizeof (CcKeyCombo));
 
-      gtk_shortcut_label_set_accelerator (GTK_SHORTCUT_LABEL (self->custom_shortcut_accel_label), "");
-      gtk_shortcut_label_set_accelerator (GTK_SHORTCUT_LABEL (self->shortcut_accel_label), "");
-
-      release_grab (self);
-
       self->edited = FALSE;
 
       setup_custom_shortcut (self);
diff --git a/panels/meson.build b/panels/meson.build
index f6b8e05..bd38a93 100644
--- a/panels/meson.build
+++ b/panels/meson.build
@@ -28,7 +28,7 @@ panels = [
   'usage',
   'user-accounts',
   'font',
-  'themes',
+  'themes'
 ]
 
 if host_is_linux
diff --git a/panels/network/cc-wifi-panel.c b/panels/network/cc-wifi-panel.c
index 8608a7f..eda882e 100644
--- a/panels/network/cc-wifi-panel.c
+++ b/panels/network/cc-wifi-panel.c
@@ -1,6 +1,7 @@
 /* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
  *
  * Copyright (C) 2017 Georges Basile Stavracas Neto <georges.stavracas@gmail.com>
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -118,7 +119,7 @@ update_panel_visibility (NMClient *client)
   application = CC_APPLICATION (g_application_get_default ());
   cc_shell_model_set_panel_visibility (cc_application_get_model (application),
                                        "wifi",
-                                       visible ? CC_PANEL_VISIBLE : CC_PANEL_VISIBLE_IN_SEARCH);
+                                       visible ? CC_PANEL_VISIBLE : CC_PANEL_HIDDEN);
 
   g_debug ("Wi-Fi panel visible: %s", visible ? "yes" : "no");
 }
diff --git a/panels/network/connection-editor/ce-page-ethernet.c b/panels/network/connection-editor/ce-page-ethernet.c
index 98fe460..1906d70 100644
--- a/panels/network/connection-editor/ce-page-ethernet.c
+++ b/panels/network/connection-editor/ce-page-ethernet.c
@@ -1,6 +1,7 @@
 /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
  *
  * Copyright (C) 2012 Red Hat, Inc
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * Licensed under the GNU General Public License Version 2
  *
@@ -104,8 +105,8 @@ connect_ethernet_page (CEPageEthernet *self)
         /* MTU */
         g_signal_connect_object (self->mtu_spin, "output", G_CALLBACK (mtu_output_cb), self, G_CONNECT_SWAPPED);
         gtk_spin_button_set_value (self->mtu_spin, (gdouble) nm_setting_wired_get_mtu (setting));
-        g_signal_connect_object (self->mtu_spin, "value-changed", G_CALLBACK (mtu_changed), self, G_CONNECT_SWAPPED);
-        mtu_changed (self);
+//        g_signal_connect_object (self->mtu_spin, "value-changed", G_CALLBACK (mtu_changed), self, G_CONNECT_SWAPPED);
+//        mtu_changed (self);
 
         g_signal_connect_object (self->name_entry, "changed", G_CALLBACK (ce_page_changed), self, G_CONNECT_SWAPPED);
         g_signal_connect_object (self->mtu_spin, "value-changed", G_CALLBACK (ce_page_changed), self, G_CONNECT_SWAPPED);
diff --git a/panels/network/connection-editor/ethernet-page.ui b/panels/network/connection-editor/ethernet-page.ui
index 4f7331b..df92b33 100644
--- a/panels/network/connection-editor/ethernet-page.ui
+++ b/panels/network/connection-editor/ethernet-page.ui
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <interface>
-  <!-- interface-requires gtk+ 3.0 -->
+  <requires lib="gtk+" version="3.0"/>
   <object class="GtkAdjustment" id="mtu_adjustment">
     <property name="upper">10000</property>
     <property name="step_increment">1</property>
@@ -21,16 +21,14 @@
       <object class="GtkLabel">
         <property name="visible">True</property>
         <property name="can_focus">False</property>
-        <property name="xalign">1</property>
         <property name="label" translatable="yes">_Name</property>
         <property name="use_underline">True</property>
         <property name="mnemonic_widget">name_entry</property>
+        <property name="xalign">1</property>
       </object>
       <packing>
         <property name="left_attach">0</property>
         <property name="top_attach">0</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
       </packing>
     </child>
     <child>
@@ -42,39 +40,20 @@
       <packing>
         <property name="left_attach">1</property>
         <property name="top_attach">0</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
       </packing>
     </child>
     <child>
       <object class="GtkLabel">
         <property name="visible">True</property>
         <property name="can_focus">False</property>
-        <property name="xalign">1</property>
         <property name="label" translatable="yes">_MAC Address</property>
         <property name="use_underline">True</property>
         <property name="mnemonic_widget">mac_combo</property>
+        <property name="xalign">1</property>
       </object>
       <packing>
         <property name="left_attach">0</property>
         <property name="top_attach">1</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
-      </packing>
-    </child>
-    <child>
-      <object class="GtkComboBoxText" id="mac_combo">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="has_entry">True</property>
-        <property name="entry_text_column">0</property>
-        <property name="id_column">1</property>
-      </object>
-      <packing>
-        <property name="left_attach">1</property>
-        <property name="top_attach">1</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
       </packing>
     </child>
     <child>
@@ -93,24 +72,20 @@
       <packing>
         <property name="left_attach">1</property>
         <property name="top_attach">2</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
       </packing>
     </child>
     <child>
       <object class="GtkLabel">
         <property name="visible">True</property>
         <property name="can_focus">False</property>
-        <property name="xalign">1</property>
         <property name="label" translatable="yes">M_TU</property>
         <property name="use_underline">True</property>
         <property name="mnemonic_widget">mtu_spin</property>
+        <property name="xalign">1</property>
       </object>
       <packing>
         <property name="left_attach">0</property>
         <property name="top_attach">3</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
       </packing>
     </child>
     <child>
@@ -118,54 +93,68 @@
         <property name="visible">True</property>
         <property name="can_focus">False</property>
         <property name="valign">center</property>
-        <property name="xalign">1</property>
         <property name="label" translatable="yes">_Cloned Address</property>
         <property name="use_underline">True</property>
         <property name="mnemonic_widget">cloned_mac_combo</property>
+        <property name="xalign">1</property>
       </object>
       <packing>
         <property name="left_attach">0</property>
         <property name="top_attach">2</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
+      </packing>
+    </child>
+    <child>
+      <object class="GtkLabel" id="filler">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+      </object>
+      <packing>
+        <property name="left_attach">2</property>
+        <property name="top_attach">0</property>
       </packing>
     </child>
     <child>
       <object class="GtkLabel" id="mtu_label">
         <property name="visible">True</property>
         <property name="can_focus">False</property>
+        <property name="halign">center</property>
+        <property name="valign">center</property>
         <property name="label" translatable="yes">bytes</property>
       </object>
       <packing>
         <property name="left_attach">2</property>
         <property name="top_attach">3</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
       </packing>
     </child>
     <child>
       <object class="GtkSpinButton" id="mtu_spin">
         <property name="visible">True</property>
         <property name="can_focus">True</property>
+        <property name="hexpand">True</property>
         <property name="invisible_char">●</property>
-        <property name="invisible_char_set">True</property>
         <property name="adjustment">mtu_adjustment</property>
       </object>
       <packing>
         <property name="left_attach">1</property>
         <property name="top_attach">3</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
       </packing>
     </child>
     <child>
-      <placeholder/>
-    </child>
-    <child>
-      <placeholder/>
-    </child>
-    <child>
-      <placeholder/>
+      <object class="GtkComboBoxText" id="mac_combo">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="has_entry">True</property>
+        <child internal-child="entry">
+          <object class="GtkEntry">
+            <property name="visible">True</property>
+            <property name="can_focus">True</property>
+          </object>
+        </child>
+      </object>
+      <packing>
+        <property name="left_attach">1</property>
+        <property name="top_attach">1</property>
+      </packing>
     </child>
     <child>
       <placeholder/>
@@ -174,4 +163,56 @@
       <placeholder/>
     </child>
   </template>
+  <object class="GtkSizeGroup" id="sizegroup1">
+    <widgets>
+      <widget name="mtu_label"/>
+      <widget name="filler"/>
+    </widgets>
+  </object>
+  <object class="GtkListStore" id="model1">
+    <columns>
+      <!-- column-name gchararray1 -->
+      <column type="gchararray"/>
+    </columns>
+    <data>
+      <row>
+        <col id="0" translatable="yes">Automatic</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">Twisted Pair (TP)</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">Attachment Unit Interface (AUI)</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">BNC</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">Media Independent Interface (MII)</col>
+      </row>
+    </data>
+  </object>
+  <object class="GtkListStore" id="model2">
+    <columns>
+      <!-- column-name < -->
+      <column type="gchararray"/>
+    </columns>
+    <data>
+      <row>
+        <col id="0" translatable="yes">Automatic</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">10 Mb/s</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">100 Mb/s</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">1 Gb/s</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">10 Gb/s</col>
+      </row>
+    </data>
+  </object>
 </interface>
diff --git a/panels/network/net-device-ethernet.c b/panels/network/net-device-ethernet.c
index 1925c47..4434460 100644
--- a/panels/network/net-device-ethernet.c
+++ b/panels/network/net-device-ethernet.c
@@ -1,6 +1,7 @@
 /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
  *
  * Copyright (C) 2011-2012 Richard Hughes <richard@hughsie.com>
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * Licensed under the GNU General Public License Version 2
  *
@@ -49,6 +50,7 @@ struct _NetDeviceEthernet
         NMClient          *client;
         NMDevice          *device;
         gboolean           updating_device;
+        gboolean           is_authenticating;
         GHashTable        *connections;
 };
 
@@ -420,24 +422,68 @@ add_profile_button_clicked_cb (NetDeviceEthernet *self)
         net_connection_editor_run (editor);
 }
 
+static void
+ethernet_connected (GObject *source_object,
+                    GAsyncResult *res,
+                    NetDeviceEthernet *self)
+{
+    gboolean success = FALSE;
+    GtkWidget *widget;
+    GError **error;
+    success = g_async_result_legacy_propagate_error (res, error);
+
+    widget = GTK_WIDGET (self->device_off_switch);
+    if (success)
+      gtk_switch_set_state (GTK_SWITCH (widget), FALSE);
+
+    self->is_authenticating = FALSE;
+}
+
+static void
+ethernet_disconnected (GObject *source_object,
+                       GAsyncResult *res,
+                       NetDeviceEthernet *self)
+
+{
+    GError **error;
+    gboolean success = FALSE;
+    GtkWidget *widget;
+
+    success = nm_device_disconnect_finish (self->device, res, error);
+
+    widget = GTK_WIDGET (self->device_off_switch);
+    if (!success)
+        gtk_switch_set_state (GTK_SWITCH (widget), TRUE);
+
+    self->is_authenticating = FALSE;
+}
+
 static void
 device_off_switch_changed_cb (NetDeviceEthernet *self)
 {
         NMConnection *connection;
+        GAsyncResult *result;
+        GError **error;
+        gboolean success;
 
         if (self->updating_device)
                 return;
 
+        if (self->is_authenticating)
+                return;
+
+        self->is_authenticating = TRUE;
+
         if (gtk_switch_get_active (self->device_off_switch)) {
                 connection = net_device_get_find_connection (self->client, self->device);
                 if (connection != NULL) {
                         nm_client_activate_connection_async (self->client,
                                                              connection,
                                                              self->device,
-                                                             NULL, NULL, NULL, NULL);
+                                                             NULL, NULL, ethernet_connected, self);
                 }
         } else {
-                nm_device_disconnect (self->device, NULL, NULL);
+                nm_device_disconnect_async (self->device, NULL, ethernet_disconnected, self);
         }
 }
 
@@ -500,6 +546,7 @@ net_device_ethernet_init (NetDeviceEthernet *self)
         gtk_widget_init_template (GTK_WIDGET (self));
 
         self->connections = g_hash_table_new (NULL, NULL);
+        self->is_authenticating = FALSE;
 
         gtk_list_box_set_header_func (self->connection_list, cc_list_box_update_header_func, NULL, NULL);
 }
diff --git a/panels/network/net-device-ethernet.h b/panels/network/net-device-ethernet.h
index e053588..c90fb3c 100644
--- a/panels/network/net-device-ethernet.h
+++ b/panels/network/net-device-ethernet.h
@@ -1,6 +1,7 @@
 /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
  *
  * Copyright (C) 2012 Red Hat, Inc.
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * Licensed under the GNU General Public License Version 2
  *
diff --git a/panels/power/cc-brightness-scale.c b/panels/power/cc-brightness-scale.c
index 5171777..a34cb32 100644
--- a/panels/power/cc-brightness-scale.c
+++ b/panels/power/cc-brightness-scale.c
@@ -223,7 +223,7 @@ cc_brightness_scale_constructed (GObject *object)
                                        got_proxy_cb,
                                        self);
 
-  gtk_range_set_range (GTK_RANGE (self), 0, 100);
+  gtk_range_set_range (GTK_RANGE (self), 1, 100);
   gtk_range_set_increments (GTK_RANGE (self), 1, 10);
   gtk_range_set_round_digits (GTK_RANGE (self), 0);
   gtk_scale_set_draw_value (GTK_SCALE (self), FALSE);
diff --git a/panels/power/cc-power-panel.c b/panels/power/cc-power-panel.c
index 044f633..cd12b0c 100644
--- a/panels/power/cc-power-panel.c
+++ b/panels/power/cc-power-panel.c
@@ -3,6 +3,7 @@
  * Copyright (C) 2010 Red Hat, Inc
  * Copyright (C) 2008 William Jon McCann <jmccann@redhat.com>
  * Copyright (C) 2010,2015 Richard Hughes <richard@hughsie.com>
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -1481,29 +1482,50 @@ keynav_failed (CcPowerPanel *self, GtkDirectionType direction, GtkWidget *list)
   return FALSE;
 }
 
+//static void
+//combo_idle_delay_changed_cb (CcPowerPanel *self)
+//{
+//  GtkTreeIter iter;
+//  GtkTreeModel *model;
+//  gint value;
+//  gboolean ret;
+//
+//  /* no selection */
+//  ret = gtk_combo_box_get_active_iter (GTK_COMBO_BOX (self->idle_delay_combo), &iter);
+//  if (!ret)
+//    return;
+//
+//  /* get entry */
+//  model = gtk_combo_box_get_model (GTK_COMBO_BOX (self->idle_delay_combo));
+//  gtk_tree_model_get (model, &iter,
+//                      1, &value,
+//                      -1);
+//
+//  /* set both keys */
+//  g_settings_set_uint (self->session_settings, "idle-delay", value);
+//}
+
 static void
-combo_idle_delay_changed_cb (CcPowerPanel *self)
+scale_idle_delay_changed_cb (GtkRange *range, CcPowerPanel *self)
 {
-  GtkTreeIter iter;
-  GtkTreeModel *model;
-  gint value;
+  guint value;
   gboolean ret;
 
-  /* no selection */
-  ret = gtk_combo_box_get_active_iter (GTK_COMBO_BOX (self->idle_delay_combo), &iter);
-  if (!ret)
-    return;
-
-  /* get entry */
-  model = gtk_combo_box_get_model (GTK_COMBO_BOX (self->idle_delay_combo));
-  gtk_tree_model_get (model, &iter,
-                      1, &value,
-                      -1);
+  value = (guint) gtk_range_get_value (range);
+  value *= 60;
 
-  /* set both keys */
   g_settings_set_uint (self->session_settings, "idle-delay", value);
 }
 
+static gchar*
+format_idle_delay_value_cb (GtkScale *scale, gdouble value, gpointer data)
+{
+  if ((gint)value <= 0)
+      return g_strdup (_("Never"));
+
+  return g_strdup_printf (_("%d minute"), (int)value);
+}
+
 static void
 combo_power_button_changed_cb (CcPowerPanel *self)
 {
@@ -1546,15 +1568,17 @@ add_brightness_row (CcPowerPanel       *self,
   gtk_widget_show (box2);
   w = gtk_label_new ("");
   gtk_widget_show (w);
-  gtk_box_pack_start (GTK_BOX (box2), w, FALSE, TRUE, 0);
+  gtk_box_pack_start (GTK_BOX (box2), w, FALSE, FALSE, 0);
   gtk_size_group_add_widget (self->charge_sizegroup, w);
 
   scale = g_object_new (CC_TYPE_BRIGHTNESS_SCALE,
                         "device", device,
                         NULL);
+  gtk_scale_set_value_pos (GTK_SCALE (scale), GTK_POS_BOTTOM);
   gtk_widget_show (scale);
-  gtk_label_set_mnemonic_widget (GTK_LABEL (label), scale);
-  gtk_box_pack_start (GTK_BOX (box2), scale, TRUE, TRUE, 0);
+  //gtk_label_set_mnemonic_widget (GTK_LABEL (label), scale);
+  gtk_widget_set_size_request (scale, 350, -1);
+  gtk_box_pack_end (GTK_BOX (box2), scale, TRUE, TRUE, 0);
   gtk_size_group_add_widget (self->level_sizegroup, scale);
   *brightness_scale = CC_BRIGHTNESS_SCALE (scale);
 
@@ -1828,7 +1852,10 @@ add_power_saving_section (CcPowerPanel *self)
 {
   GtkWidget *widget, *box, *label, *row;
   GtkWidget *title;
+  GtkWidget *scale;
+  GtkWidget *box2;
   GtkWidget *sw;
+  GtkWidget *w;
   int value;
   g_autofree gchar *s = NULL;
   gboolean can_suspend;
@@ -1918,8 +1945,20 @@ add_power_saving_section (CcPowerPanel *self)
   gtk_widget_show (row);
   box = row_box_new ();
   gtk_container_add (GTK_CONTAINER (row), box);
+
+  box2 = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
+  gtk_widget_set_margin_top (box2, 6);
+  gtk_widget_set_margin_bottom (box2, 6);
+  gtk_box_pack_start (GTK_BOX (box), box2, TRUE, TRUE, 0);
+
   title = row_title_new (_("_Dim Screen When Inactive"), NULL, &label);
-  gtk_box_pack_start (GTK_BOX (box), title, TRUE, TRUE, 0);
+  gtk_widget_set_halign (title, GTK_ALIGN_START);
+  gtk_box_pack_start (GTK_BOX (box2), title, TRUE, TRUE, 0);
+
+  w = gtk_label_new (_("Screen dims when the computer operates on battery power."));
+  gtk_widget_set_halign (w, GTK_ALIGN_START);
+  gtk_style_context_add_class (gtk_widget_get_style_context (w), GTK_STYLE_CLASS_DIM_LABEL);
+  gtk_box_pack_start (GTK_BOX (box2), w, TRUE, TRUE, 0);
 
   sw = gtk_switch_new ();
   gtk_widget_show (sw);
@@ -1931,26 +1970,47 @@ add_power_saving_section (CcPowerPanel *self)
   gtk_label_set_mnemonic_widget (GTK_LABEL (label), sw);
   gtk_container_add (GTK_CONTAINER (widget), row);
   gtk_size_group_add_widget (self->row_sizegroup, row);
+  gtk_widget_show_all (row);
+  gtk_widget_set_no_show_all (self->dim_screen_row, TRUE);
 
   row = no_prelight_row_new ();
   gtk_widget_show (row);
   box = row_box_new ();
   gtk_container_add (GTK_CONTAINER (row), box);
-  title = row_title_new (_("_Blank Screen"), NULL, &label);
-  gtk_box_pack_start (GTK_BOX (box), title, TRUE, TRUE, 0);
 
-  self->idle_delay_combo = gtk_combo_box_text_new ();
-  gtk_widget_show (self->idle_delay_combo);
-  gtk_combo_box_set_entry_text_column (GTK_COMBO_BOX (self->idle_delay_combo), 0);
-  gtk_combo_box_set_model (GTK_COMBO_BOX (self->idle_delay_combo),
-                           GTK_TREE_MODEL (self->liststore_idle_time));
+  title = row_title_new (_("_Blank Screen"), NULL, &label);
+  gtk_box_pack_start (GTK_BOX (box), title, FALSE, FALSE, 0);
+//
+//  self->idle_delay_combo = gtk_combo_box_text_new ();
+//  gtk_widget_show (self->idle_delay_combo);
+//  gtk_combo_box_set_entry_text_column (GTK_COMBO_BOX (self->idle_delay_combo), 0);
+//  gtk_combo_box_set_model (GTK_COMBO_BOX (self->idle_delay_combo),
+//                           GTK_TREE_MODEL (self->liststore_idle_time));
+//  value = g_settings_get_uint (self->session_settings, "idle-delay");
+//  set_value_for_combo (GTK_COMBO_BOX (self->idle_delay_combo), value);
+//  g_signal_connect_object (self->idle_delay_combo, "changed",
+//                           G_CALLBACK (combo_idle_delay_changed_cb), self, G_CONNECT_SWAPPED);
+//  gtk_widget_set_valign (self->idle_delay_combo, GTK_ALIGN_CENTER);
+//  gtk_box_pack_start (GTK_BOX (box), self->idle_delay_combo, FALSE, TRUE, 0);
+//  gtk_label_set_mnemonic_widget (GTK_LABEL (label), self->idle_delay_combo);
+//  gtk_container_add (GTK_CONTAINER (widget), row);
+//  gtk_size_group_add_widget (self->row_sizegroup, row);
+
+  scale = gtk_scale_new_with_range (GTK_ORIENTATION_HORIZONTAL, 0, 60, 1);
+  gtk_widget_show (scale);
   value = g_settings_get_uint (self->session_settings, "idle-delay");
-  set_value_for_combo (GTK_COMBO_BOX (self->idle_delay_combo), value);
-  g_signal_connect_object (self->idle_delay_combo, "changed",
-                           G_CALLBACK (combo_idle_delay_changed_cb), self, G_CONNECT_SWAPPED);
-  gtk_widget_set_valign (self->idle_delay_combo, GTK_ALIGN_CENTER);
-  gtk_box_pack_start (GTK_BOX (box), self->idle_delay_combo, FALSE, TRUE, 0);
-  gtk_label_set_mnemonic_widget (GTK_LABEL (label), self->idle_delay_combo);
+  gtk_range_set_value (GTK_RANGE (scale), value / 60);
+  g_signal_connect (G_OBJECT (scale), "format-value",
+                    G_CALLBACK (format_idle_delay_value_cb), NULL);
+  g_signal_connect (scale, "value-changed",
+                    G_CALLBACK (scale_idle_delay_changed_cb), self);
+
+  gtk_scale_set_draw_value (GTK_SCALE (scale), TRUE);
+  gtk_scale_set_value_pos (GTK_SCALE (scale), GTK_POS_BOTTOM);
+  gtk_widget_set_margin_top (scale, 6);
+  gtk_widget_set_margin_bottom (scale, 6);
+  gtk_widget_set_size_request (scale, 414, -1);
+  gtk_box_pack_end (GTK_BOX (box), scale, FALSE, TRUE, 0);
   gtk_container_add (GTK_CONTAINER (widget), row);
   gtk_size_group_add_widget (self->row_sizegroup, row);
 
diff --git a/panels/power/cc-power-panel.ui b/panels/power/cc-power-panel.ui
index 74aed35..b2a5a3c 100644
--- a/panels/power/cc-power-panel.ui
+++ b/panels/power/cc-power-panel.ui
@@ -95,6 +95,10 @@
         <col id="0" translatable="yes" context="blank_screen" comments="Translators: Option for &quot;Blank screen&quot; in &quot;Power&quot; panel.">15 minutes</col>
         <col id="1">900</col>
       </row>
+      <row>
+        <col id="0" translatable="yes" context="blank_screen" comments="Translators: Option for &quot;Blank screen&quot; in &quot;Power&quot; panel.">30 minutes</col>
+        <col id="1">1800</col>
+      </row>
       <row>
         <col id="0" translatable="yes" context="blank_screen" comments="Translators: Option for &quot;Blank screen&quot; in &quot;Power&quot; panel.">Never</col>
         <col id="1">0</col>
diff --git a/panels/printers/cc-printers-panel.c b/panels/printers/cc-printers-panel.c
index 7364575..4ee28c9 100644
--- a/panels/printers/cc-printers-panel.c
+++ b/panels/printers/cc-printers-panel.c
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 Red Hat, Inc
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -75,6 +76,7 @@ struct _CcPrintersPanel
 
   GPermission *permission;
   gboolean is_authorized;
+  gboolean is_authenticating;
 
   GSettings *lockdown_settings;
   CcPermissionInfobar *permission_infobar;
@@ -740,12 +742,18 @@ on_printer_changed (CcPrintersPanel *self)
 
 static void
 add_printer_entry (CcPrintersPanel *self,
-                   cups_dest_t      printer)
+                   cups_dest_t      printer,
+                   gint             index)
 {
   PpPrinterEntry         *printer_entry;
+  PpPrinterEntry         *printer_entry_tmp;
   GtkWidget              *content;
   GSList                 *widgets, *l;
 
+  printer_entry_tmp = PP_PRINTER_ENTRY (g_hash_table_lookup (self->printer_entries, printer.name));
+  if (printer_entry_tmp && pp_printer_entry_is_activate_jobs_dialog (printer_entry_tmp))
+    return;
+
   content = (GtkWidget*) gtk_builder_get_object (self->builder, "content");
 
   printer_entry = pp_printer_entry_new (printer, self->is_authorized);
@@ -771,7 +779,7 @@ add_printer_entry (CcPrintersPanel *self,
                            self,
                            G_CONNECT_SWAPPED);
 
-  gtk_list_box_insert (GTK_LIST_BOX (content), GTK_WIDGET (printer_entry), -1);
+  gtk_list_box_insert (GTK_LIST_BOX (content), GTK_WIDGET (printer_entry), index);
   gtk_widget_show_all (content);
 
   g_hash_table_insert (self->printer_entries, g_strdup (printer.name), printer_entry);
@@ -819,6 +827,11 @@ destroy_nonexisting_entries (PpPrinterEntry *entry,
         }
     }
 
+  if (exists && entry && pp_printer_entry_is_activate_jobs_dialog (entry))
+  {
+    return;
+  }
+
   if (!exists)
     {
       gtk_widget_destroy (GTK_WIDGET (entry));
@@ -883,7 +896,7 @@ actualize_printers_list_cb (GObject      *source_object,
       if (item != NULL)
         pp_printer_entry_update (PP_PRINTER_ENTRY (item), self->dests[i], self->is_authorized);
       else
-        add_printer_entry (self, self->dests[i]);
+        add_printer_entry (self, self->dests[i], i);
     }
 
   if (!self->entries_filled)
@@ -978,6 +991,42 @@ new_printer_dialog_response_cb (CcPrintersPanel *self,
   actualize_printers_list (self);
 }
 
+static void
+acquired_permission (GObject *object,
+                     GAsyncResult *res,
+                     gpointer data)
+{
+  CcPrintersPanel        *self = (CcPrintersPanel*) data;
+
+  g_autoptr(GError) error = NULL;
+  gboolean allowed;
+
+  self->is_authenticating = FALSE;
+  allowed = g_permission_acquire_finish (self->permission, res, &error);
+  if (!allowed)
+    return;
+
+  self->is_authorized = TRUE;
+
+  actualize_printers_list (data);
+  update_sensitivity (data);
+}
+
+static void
+on_clicked_auth (GtkButton *button,
+                 gpointer user_data)
+{
+  CcPrintersPanel         *self = (CcPrintersPanel*) user_data;
+
+  if (!self->is_authenticating)
+  {
+    self->is_authenticating = TRUE;
+    g_permission_acquire_async (self->permission, NULL,
+                                acquired_permission,
+                                self);
+  }
+}
+
 static void
 printer_add_cb (CcPrintersPanel *self)
 {
@@ -1009,6 +1058,7 @@ update_sensitivity (gpointer user_data)
   GtkWidget               *widget;
   gboolean                 local_server = TRUE;
   gboolean                 no_cups = FALSE;
+  const gchar             *test;
 
   self->is_authorized =
     self->permission &&
@@ -1017,6 +1067,7 @@ update_sensitivity (gpointer user_data)
     !g_settings_get_boolean (self->lockdown_settings, "disable-print-setup");
 
   widget = (GtkWidget*) gtk_builder_get_object (self->builder, "main-vbox");
+  test = gtk_stack_get_visible_child_name (GTK_STACK (widget));
   if (g_strcmp0 (gtk_stack_get_visible_child_name (GTK_STACK (widget)), "no-cups-page") == 0)
     no_cups = TRUE;
 
@@ -1259,6 +1310,8 @@ cc_printers_panel_init (CcPrintersPanel *self)
                                                  g_free,
                                                  NULL);
 
+  self->is_authenticating = FALSE;
+
   g_type_ensure (CC_TYPE_PERMISSION_INFOBAR);
 
   g_object_set_data_full (self->reference, "self", self, NULL);
@@ -1274,6 +1327,8 @@ cc_printers_panel_init (CcPrintersPanel *self)
       return;
     }
 
+//  g_signal_connect (GTK_BUTTON (gtk_builder_get_object (self->builder, "lock-button")), "clicked", G_CALLBACK (on_clicked_auth), self)
+
   self->notification = (GtkRevealer*)
     gtk_builder_get_object (self->builder, "notification");
 
diff --git a/panels/printers/pp-printer-entry.c b/panels/printers/pp-printer-entry.c
index f74a440..edb0380 100644
--- a/panels/printers/pp-printer-entry.c
+++ b/panels/printers/pp-printer-entry.c
@@ -637,6 +637,12 @@ jobs_dialog_response_cb (GtkDialog  *dialog,
     }
 }
 
+gboolean
+pp_printer_entry_is_activate_jobs_dialog (PpPrinterEntry *self)
+{
+    return self->pp_jobs_dialog == NULL ? FALSE : TRUE;
+}
+
 void
 pp_printer_entry_show_jobs_dialog (PpPrinterEntry *self)
 {
diff --git a/panels/printers/pp-printer-entry.h b/panels/printers/pp-printer-entry.h
index 5db39d9..a6b23e7 100644
--- a/panels/printers/pp-printer-entry.h
+++ b/panels/printers/pp-printer-entry.h
@@ -36,6 +36,8 @@ void            pp_printer_entry_show_jobs_dialog (PpPrinterEntry *self);
 
 void            pp_printer_entry_authenticate_jobs (PpPrinterEntry *self);
 
+gboolean        pp_printer_entry_is_activate_jobs_dialog (PpPrinterEntry *self);
+
 void            pp_printer_entry_update (PpPrinterEntry *self,
                                          cups_dest_t     printer,
                                          gboolean        is_authorized);
diff --git a/panels/region/cc-region-panel.c b/panels/region/cc-region-panel.c
index 9b59b23..6cc32b3 100644
--- a/panels/region/cc-region-panel.c
+++ b/panels/region/cc-region-panel.c
@@ -32,10 +32,6 @@
 #include "cc-region-resources.h"
 #include "cc-language-chooser.h"
 #include "cc-format-chooser.h"
-#include "cc-input-chooser.h"
-#include "cc-input-row.h"
-#include "cc-input-source-ibus.h"
-#include "cc-input-source-xkb.h"
 
 #include "cc-common-language.h"
 
@@ -43,10 +39,6 @@
 #include <libgnome-desktop/gnome-languages.h>
 #include <libgnome-desktop/gnome-xkb-info.h>
 
-#ifdef HAVE_IBUS
-#include <ibus.h>
-#endif
-
 #include <act/act.h>
 
 #define GNOME_DESKTOP_INPUT_SOURCES_DIR "org.gnome.desktop.input-sources"
@@ -60,29 +52,16 @@
 struct _CcRegionPanel {
         CcPanel          parent_instance;
 
-        GtkListBoxRow   *add_input_row;
-        GtkLabel        *alt_next_source;
         GtkLabel        *formats_label;
         GtkListBoxRow   *formats_row;
-        GtkListBox      *input_list;
-        GtkBox          *input_section_box;
-        GtkSizeGroup    *input_size_group;
         GtkToggleButton *login_button;
         GtkLabel        *login_label;
         GtkLabel        *language_label;
         GtkListBox      *language_list;
         GtkListBoxRow   *language_row;
         GtkFrame        *language_section_frame;
-        GtkLabel        *next_source;
-        GtkLabel        *next_source_label;
-        GtkListBoxRow   *no_inputs_row;
-        GtkButton       *options_button;
-        GtkRadioButton  *per_window_source;
-        GtkLabel        *previous_source;
-        GtkLabel        *previous_source_label;
         GtkButton       *restart_button;
         GtkRevealer     *restart_revealer;
-        GtkRadioButton  *same_source;
 
         gboolean     login;
         gboolean     login_auto_apply;
@@ -99,12 +78,6 @@ struct _CcRegionPanel {
         gchar *system_language;
         gchar *system_region;
 
-        GSettings *input_settings;
-        GnomeXkbInfo *xkb_info;
-#ifdef HAVE_IBUS
-        IBusBus *ibus;
-        GHashTable *ibus_engines;
-#endif
 };
 
 CC_PANEL_REGISTER (CcRegionPanel, cc_region_panel)
@@ -112,31 +85,8 @@ CC_PANEL_REGISTER (CcRegionPanel, cc_region_panel)
 typedef struct
 {
         CcRegionPanel *panel;
-        CcInputRow    *source;
-        CcInputRow    *dest;
 } RowData;
 
-static RowData *
-row_data_new (CcRegionPanel *panel, CcInputRow *source, CcInputRow *dest)
-{
-        RowData *data = g_malloc0 (sizeof (RowData));
-        data->panel = panel;
-        data->source = g_object_ref (source);
-        if (dest != NULL)
-                data->dest = g_object_ref (dest);
-        return data;
-}
-
-static void
-row_data_free (RowData *data)
-{
-        g_clear_object (&data->source);
-        g_clear_object (&data->dest);
-        g_free (data);
-}
-
-G_DEFINE_AUTOPTR_CLEANUP_FUNC (RowData, row_data_free)
-
 static void
 cc_region_panel_finalize (GObject *object)
 {
@@ -157,12 +107,7 @@ cc_region_panel_finalize (GObject *object)
         g_clear_object (&self->localed);
         g_clear_object (&self->session);
         g_clear_object (&self->locale_settings);
-        g_clear_object (&self->input_settings);
-        g_clear_object (&self->xkb_info);
-#ifdef HAVE_IBUS
-        g_clear_object (&self->ibus);
-        g_clear_pointer (&self->ibus_engines, g_hash_table_destroy);
-#endif
+
         g_free (self->language);
         g_free (self->region);
         g_free (self->system_language);
@@ -490,8 +435,6 @@ show_region_chooser (CcRegionPanel *self)
         gtk_window_present (GTK_WINDOW (chooser));
 }
 
-static void show_input_chooser (CcRegionPanel *self);
-
 static gboolean
 permission_acquired (GPermission *permission, GAsyncResult *res, const gchar *action)
 {
@@ -629,398 +572,6 @@ setup_language_section (CcRegionPanel *self)
         update_region_from_setting (self);
 }
 
-#ifdef HAVE_IBUS
-static void
-update_ibus_active_sources (CcRegionPanel *self)
-{
-        g_autoptr(GList) rows = NULL;
-        GList *l;
-
-        rows = gtk_container_get_children (GTK_CONTAINER (self->input_list));
-        for (l = rows; l; l = l->next) {
-                CcInputRow *row;
-                CcInputSourceIBus *source;
-                IBusEngineDesc *engine_desc;
-
-                if (!CC_IS_INPUT_ROW (l->data))
-                        continue;
-                row = CC_INPUT_ROW (l->data);
-
-                if (!CC_IS_INPUT_SOURCE_IBUS (cc_input_row_get_source (row)))
-                        continue;
-                source = CC_INPUT_SOURCE_IBUS (cc_input_row_get_source (row));
-
-                engine_desc = g_hash_table_lookup (self->ibus_engines, cc_input_source_ibus_get_engine_name (source));
-                if (engine_desc != NULL)
-                        cc_input_source_ibus_set_engine_desc (source, engine_desc);
-        }
-}
-
-static void
-fetch_ibus_engines_result (GObject       *object,
-                           GAsyncResult  *result,
-                           CcRegionPanel *self)
-{
-        g_autoptr(GList) list = NULL;
-        GList *l;
-        g_autoptr(GError) error = NULL;
-
-        list = ibus_bus_list_engines_async_finish (IBUS_BUS (object), result, &error);
-        if (!list && error) {
-                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
-                        g_warning ("Couldn't finish IBus request: %s", error->message);
-                return;
-        }
-
-        /* Maps engine ids to engine description objects */
-        self->ibus_engines = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, g_object_unref);
-
-        for (l = list; l; l = l->next) {
-                IBusEngineDesc *engine = l->data;
-                const gchar *engine_id = ibus_engine_desc_get_name (engine);
-
-                if (g_str_has_prefix (engine_id, "xkb:"))
-                        g_object_unref (engine);
-                else
-                        g_hash_table_replace (self->ibus_engines, (gpointer)engine_id, engine);
-        }
-
-        update_ibus_active_sources (self);
-}
-
-static void
-fetch_ibus_engines (CcRegionPanel *self)
-{
-        ibus_bus_list_engines_async (self->ibus,
-                                     -1,
-                                     cc_panel_get_cancellable (CC_PANEL (self)),
-                                     (GAsyncReadyCallback)fetch_ibus_engines_result,
-                                     self);
-
-  /* We've got everything we needed, don't want to be called again. */
-  g_signal_handlers_disconnect_by_func (self->ibus, fetch_ibus_engines, self);
-}
-
-static void
-maybe_start_ibus (void)
-{
-        /* IBus doesn't export API in the session bus. The only thing
-         * we have there is a well known name which we can use as a
-         * sure-fire way to activate it.
-         */
-        g_bus_unwatch_name (g_bus_watch_name (G_BUS_TYPE_SESSION,
-                                              IBUS_SERVICE_IBUS,
-                                              G_BUS_NAME_WATCHER_FLAGS_AUTO_START,
-                                              NULL,
-                                              NULL,
-                                              NULL,
-                                              NULL));
-}
-
-#endif
-
-static void
-row_settings_cb (CcRegionPanel *self,
-                 CcInputRow    *row)
-{
-        CcInputSourceIBus *source;
-        g_autoptr(GdkAppLaunchContext) ctx = NULL;
-        GDesktopAppInfo *app_info;
-        g_autoptr(GError) error = NULL;
-
-        g_return_if_fail (CC_IS_INPUT_SOURCE_IBUS (cc_input_row_get_source (row)));
-        source = CC_INPUT_SOURCE_IBUS (cc_input_row_get_source (row));
-
-        app_info = cc_input_source_ibus_get_app_info (source);
-        if  (app_info == NULL)
-                return;
-
-        ctx = gdk_display_get_app_launch_context (gdk_display_get_default ());
-        gdk_app_launch_context_set_timestamp (ctx, gtk_get_current_event_time ());
-
-        g_app_launch_context_setenv (G_APP_LAUNCH_CONTEXT (ctx),
-                                     "IBUS_ENGINE_NAME", cc_input_source_ibus_get_engine_name (source));
-
-        if (!g_app_info_launch (G_APP_INFO (app_info), NULL, G_APP_LAUNCH_CONTEXT (ctx), &error))
-                g_warning ("Failed to launch input source setup: %s", error->message);
-}
-
-static void
-row_layout_cb (CcRegionPanel *self,
-               CcInputRow    *row)
-{
-        CcInputSource *source;
-        const gchar *layout, *layout_variant;
-        g_autofree gchar *commandline = NULL;
-
-        source = cc_input_row_get_source (row);
-
-        layout = cc_input_source_get_layout (source);
-        layout_variant = cc_input_source_get_layout_variant (source);
-
-        if (layout_variant && layout_variant[0])
-                commandline = g_strdup_printf ("gkbd-keyboard-display -l \"%s\t%s\"",
-                                               layout, layout_variant);
-        else
-                commandline = g_strdup_printf ("gkbd-keyboard-display -l %s",
-                                               layout);
-
-        g_spawn_command_line_async (commandline, NULL);
-}
-
-static void move_input (CcRegionPanel *self, CcInputRow *source, CcInputRow *dest);
-
-static void
-row_moved_cb (CcRegionPanel *self,
-              CcInputRow    *dest_row,
-              CcInputRow    *row)
-{
-        move_input (self, row, dest_row);
-}
-
-static void remove_input (CcRegionPanel *self, CcInputRow *row);
-
-static void
-row_removed_cb (CcRegionPanel *self,
-                CcInputRow    *row)
-{
-        remove_input (self, row);
-}
-
-static void
-update_input_rows (CcRegionPanel *self)
-{
-        g_autoptr(GList) rows = NULL;
-        GList *l;
-        guint n_input_rows = 0;
-
-        rows = gtk_container_get_children (GTK_CONTAINER (self->input_list));
-        for (l = rows; l; l = l->next)
-                if (CC_IS_INPUT_ROW (l->data))
-                       n_input_rows++;
-        for (l = rows; l; l = l->next) {
-                CcInputRow *row;
-
-                if (!CC_IS_INPUT_ROW (l->data))
-                        continue;
-                row = CC_INPUT_ROW (l->data);
-
-                cc_input_row_set_removable (row, n_input_rows > 1);
-                cc_input_row_set_draggable (row, n_input_rows > 1);
-        }
-}
-
-static void
-add_input_row (CcRegionPanel *self, CcInputSource *source)
-{
-        CcInputRow *row;
-
-        gtk_widget_set_visible (GTK_WIDGET (self->no_inputs_row), FALSE);
-
-        row = cc_input_row_new (source);
-        gtk_widget_show (GTK_WIDGET (row));
-        gtk_size_group_add_widget (self->input_size_group, GTK_WIDGET (row));
-        g_signal_connect_object (row, "show-settings", G_CALLBACK (row_settings_cb), self, G_CONNECT_SWAPPED);
-        g_signal_connect_object (row, "show-layout", G_CALLBACK (row_layout_cb), self, G_CONNECT_SWAPPED);
-        g_signal_connect_object (row, "move-row", G_CALLBACK (row_moved_cb), self, G_CONNECT_SWAPPED);
-        g_signal_connect_object (row, "remove-row", G_CALLBACK (row_removed_cb), self, G_CONNECT_SWAPPED);
-        gtk_list_box_insert (GTK_LIST_BOX (self->input_list), GTK_WIDGET (row), gtk_list_box_row_get_index (self->add_input_row));
-        update_input_rows (self);
-}
-
-static void
-add_input_sources (CcRegionPanel *self,
-                   GVariant      *sources)
-{
-        GVariantIter iter;
-        const gchar *type, *id;
-
-        if (g_variant_n_children (sources) < 1) {
-                gtk_widget_set_visible (GTK_WIDGET (self->no_inputs_row), TRUE);
-                return;
-        }
-
-        g_variant_iter_init (&iter, sources);
-        while (g_variant_iter_next (&iter, "(&s&s)", &type, &id)) {
-                g_autoptr(CcInputSource) source = NULL;
-
-                if (g_str_equal (type, "xkb")) {
-                        source = CC_INPUT_SOURCE (cc_input_source_xkb_new_from_id (self->xkb_info, id));
-                } else if (g_str_equal (type, "ibus")) {
-                        source = CC_INPUT_SOURCE (cc_input_source_ibus_new (id));
-#ifdef HAVE_IBUS
-                        if (self->ibus_engines) {
-                                IBusEngineDesc *engine_desc = g_hash_table_lookup (self->ibus_engines, id);
-                                if (engine_desc != NULL)
-                                        cc_input_source_ibus_set_engine_desc (CC_INPUT_SOURCE_IBUS (source), engine_desc);
-                        }
-#endif
-                } else {
-                        g_warning ("Unhandled input source type '%s'", type);
-                        continue;
-                }
-
-                add_input_row (self, source);
-        }
-}
-
-static void
-add_input_sources_from_settings (CcRegionPanel *self)
-{
-        g_autoptr(GVariant) sources = NULL;
-        sources = g_settings_get_value (self->input_settings, "sources");
-        add_input_sources (self, sources);
-}
-
-static void
-clear_input_sources (CcRegionPanel *self)
-{
-        g_autoptr(GList) list = NULL;
-        GList *l;
-
-        list = gtk_container_get_children (GTK_CONTAINER (self->input_list));
-        for (l = list; l; l = l->next) {
-                if (CC_IS_INPUT_ROW (l->data))
-                        gtk_container_remove (GTK_CONTAINER (self->input_list), GTK_WIDGET (l->data));
-        }
-
-        cc_list_box_adjust_scrolling (self->input_list);
-}
-
-static CcInputRow *
-get_row_by_source (CcRegionPanel *self, CcInputSource *source)
-{
-        g_autoptr(GList) list = NULL;
-        GList *l;
-
-        list = gtk_container_get_children (GTK_CONTAINER (self->input_list));
-        for (l = list; l; l = l->next) {
-                CcInputRow *row;
-
-                if (!CC_IS_INPUT_ROW (l->data))
-                        continue;
-                row = CC_INPUT_ROW (l->data);
-
-                if (cc_input_source_matches (source, cc_input_row_get_source (row)))
-                        return row;
-        }
-
-        return NULL;
-}
-
-static void
-input_sources_changed (CcRegionPanel *self,
-                       const gchar   *key)
-{
-        CcInputRow *selected;
-        g_autoptr(CcInputSource) source = NULL;
-
-        selected = CC_INPUT_ROW (gtk_list_box_get_selected_row (self->input_list));
-        if (selected)
-                source = g_object_ref (cc_input_row_get_source (selected));
-        clear_input_sources (self);
-        add_input_sources_from_settings (self);
-        if (source != NULL) {
-                CcInputRow *row = get_row_by_source (self, source);
-                if (row != NULL)
-                        gtk_list_box_select_row (GTK_LIST_BOX (self->input_list), GTK_LIST_BOX_ROW (row));
-        }
-}
-
-static void
-set_input_settings (CcRegionPanel *self)
-{
-        GVariantBuilder builder;
-        g_autoptr(GList) list = NULL;
-        GList *l;
-
-        g_variant_builder_init (&builder, G_VARIANT_TYPE ("a(ss)"));
-        list = gtk_container_get_children (GTK_CONTAINER (self->input_list));
-        for (l = list; l; l = l->next) {
-                CcInputRow *row;
-                CcInputSource *source;
-
-                if (!CC_IS_INPUT_ROW (l->data))
-                        continue;
-                row = CC_INPUT_ROW (l->data);
-                source = cc_input_row_get_source (row);
-
-                if (CC_IS_INPUT_SOURCE_XKB (source)) {
-                        g_autofree gchar *id = cc_input_source_xkb_get_id (CC_INPUT_SOURCE_XKB (source));
-                        g_variant_builder_add (&builder, "(ss)", "xkb", id);
-                } else if (CC_IS_INPUT_SOURCE_IBUS (source)) {
-                        g_variant_builder_add (&builder, "(ss)", "ibus",
-                                               cc_input_source_ibus_get_engine_name (CC_INPUT_SOURCE_IBUS (source)));
-                }
-        }
-
-        g_settings_set_value (self->input_settings, KEY_INPUT_SOURCES, g_variant_builder_end (&builder));
-}
-
-static void set_localed_input (CcRegionPanel *self);
-
-static void
-update_input (CcRegionPanel *self)
-{
-        if (self->login) {
-                set_localed_input (self);
-        } else {
-                set_input_settings (self);
-                if (self->login_auto_apply)
-                        set_localed_input (self);
-        }
-}
-
-static void
-show_input_chooser (CcRegionPanel *self)
-{
-        CcInputChooser *chooser;
-
-        chooser = cc_input_chooser_new (self->login,
-                                        self->xkb_info,
-#ifdef HAVE_IBUS
-                                        self->ibus_engines
-#else
-                                        NULL
-#endif
-                                        );
-        gtk_window_set_transient_for (GTK_WINDOW (chooser), GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (self))));
-
-        if (gtk_dialog_run (GTK_DIALOG (chooser)) == GTK_RESPONSE_OK) {
-                CcInputSource *source;
-
-                source = cc_input_chooser_get_source (chooser);
-                if (source != NULL && get_row_by_source (self, source) == NULL) {
-                        add_input_row (self, source);
-                        update_input (self);
-                }
-        }
-        gtk_widget_destroy (GTK_WIDGET (chooser));
-}
-
-static void
-add_input_permission_cb (GObject *source, GAsyncResult *res, gpointer user_data)
-{
-        CcRegionPanel *self = user_data;
-        if (permission_acquired (G_PERMISSION (source), res, "add input"))
-                show_input_chooser (self);
-}
-
-static void
-add_input (CcRegionPanel *self)
-{
-        if (!self->login) {
-                show_input_chooser (self);
-        } else if (g_permission_get_allowed (self->permission)) {
-                show_input_chooser (self);
-        } else if (g_permission_get_can_acquire (self->permission)) {
-                g_permission_acquire_async (self->permission,
-                                            cc_panel_get_cancellable (CC_PANEL (self)),
-                                            add_input_permission_cb,
-                                            self);
-        }
-}
-
 static GtkWidget *
 find_sibling (GtkContainer *container, GtkWidget *child)
 {
@@ -1046,211 +597,6 @@ find_sibling (GtkContainer *container, GtkWidget *child)
         return NULL;
 }
 
-static void
-do_remove_input (CcRegionPanel *self, CcInputRow *row)
-{
-        GtkWidget *sibling;
-
-        sibling = find_sibling (GTK_CONTAINER (self->input_list), GTK_WIDGET (row));
-        gtk_container_remove (GTK_CONTAINER (self->input_list), GTK_WIDGET (row));
-        gtk_list_box_select_row (self->input_list, GTK_LIST_BOX_ROW (sibling));
-
-        cc_list_box_adjust_scrolling (self->input_list);
-
-        update_input (self);
-        update_input_rows (self);
-}
-
-static void
-remove_input_permission_cb (GObject *source, GAsyncResult *res, gpointer user_data)
-{
-        RowData *data = user_data;
-        if (permission_acquired (G_PERMISSION (source), res, "remove input"))
-                do_remove_input (data->panel, data->source);
-}
-
-static void
-remove_input (CcRegionPanel *self, CcInputRow *row)
-{
-        if (!self->login) {
-                do_remove_input (self, row);
-        } else if (g_permission_get_allowed (self->permission)) {
-                do_remove_input (self, row);
-        } else if (g_permission_get_can_acquire (self->permission)) {
-                g_permission_acquire_async (self->permission,
-                                            cc_panel_get_cancellable (CC_PANEL (self)),
-                                            remove_input_permission_cb,
-                                            row_data_new (self, row, NULL));
-        }
-}
-
-static void
-do_move_input (CcRegionPanel *self, CcInputRow *source, CcInputRow *dest)
-{
-        gint dest_index;
-
-        dest_index = gtk_list_box_row_get_index (GTK_LIST_BOX_ROW (dest));
-
-        g_object_ref (source);
-        gtk_container_remove (GTK_CONTAINER (self->input_list), GTK_WIDGET (source));
-        gtk_list_box_insert (self->input_list, GTK_WIDGET (source), dest_index);
-        g_object_unref (source);
-
-        cc_list_box_adjust_scrolling (self->input_list);
-
-        update_input (self);
-}
-
-static void
-move_input_permission_cb (GObject *source, GAsyncResult *res, gpointer user_data)
-{
-        RowData *data = user_data;
-        if (permission_acquired (G_PERMISSION (source), res, "move input"))
-                do_move_input (data->panel, data->source, data->dest);
-}
-
-static void
-move_input (CcRegionPanel *self,
-            CcInputRow    *source,
-            CcInputRow    *dest)
-{
-        if (!self->login) {
-                do_move_input (self, source, dest);
-        } else if (g_permission_get_allowed (self->permission)) {
-                do_move_input (self, source, dest);
-        } else if (g_permission_get_can_acquire (self->permission)) {
-                g_permission_acquire_async (self->permission,
-                                            cc_panel_get_cancellable (CC_PANEL (self)),
-                                            move_input_permission_cb,
-                                            row_data_new (self, source, dest));
-        }
-}
-
-static void
-input_row_activated_cb (CcRegionPanel *self, GtkListBoxRow *row)
-{
-        if (row == self->add_input_row) {
-                add_input (self);
-        }
-}
-
-static void
-update_shortcut_label (GtkLabel    *label,
-                       const gchar *value)
-{
-        g_autofree gchar *text = NULL;
-        guint accel_key;
-        g_autofree guint *keycode = NULL;
-        GdkModifierType mods;
-
-        if (value == NULL || *value == '\0') {
-                gtk_widget_hide (GTK_WIDGET (label));
-                return;
-        }
-
-        gtk_accelerator_parse_with_keycode (value, &accel_key, &keycode, &mods);
-        if (accel_key == 0 && keycode == NULL && mods == 0) {
-                g_warning ("Failed to parse keyboard shortcut: '%s'", value);
-                gtk_widget_hide (GTK_WIDGET (label));
-                return;
-        }
-
-        text = gtk_accelerator_get_label_with_keycode (gtk_widget_get_display (GTK_WIDGET (label)), accel_key, *keycode, mods);
-        gtk_label_set_text (label, text);
-}
-
-static void
-update_shortcuts (CcRegionPanel *self)
-{
-        g_auto(GStrv) previous = NULL;
-        g_auto(GStrv) next = NULL;
-        g_autofree gchar *previous_shortcut = NULL;
-        g_autoptr(GSettings) settings = NULL;
-
-        settings = g_settings_new ("org.gnome.desktop.wm.keybindings");
-
-        previous = g_settings_get_strv (settings, "switch-input-source-backward");
-        next = g_settings_get_strv (settings, "switch-input-source");
-
-        previous_shortcut = g_strdup (previous[0]);
-
-        update_shortcut_label (self->previous_source, previous_shortcut);
-        update_shortcut_label (self->next_source, next[0]);
-}
-
-static void
-update_modifiers_shortcut (CcRegionPanel *self)
-{
-        g_auto(GStrv) options = NULL;
-        gchar **p;
-        g_autoptr(GSettings) settings = NULL;
-        g_autoptr(GnomeXkbInfo) xkb_info = NULL;
-        const gchar *text;
-
-        xkb_info = gnome_xkb_info_new ();
-        settings = g_settings_new ("org.gnome.desktop.input-sources");
-        options = g_settings_get_strv (settings, "xkb-options");
-
-        for (p = options; p && *p; ++p)
-                if (g_str_has_prefix (*p, "grp:"))
-                        break;
-
-        if (p && *p) {
-                text = gnome_xkb_info_description_for_option (xkb_info, "grp", *p);
-                gtk_label_set_text (self->alt_next_source, text);
-        } else {
-                gtk_widget_hide (GTK_WIDGET (self->alt_next_source));
-        }
-}
-
-static void
-setup_input_section (CcRegionPanel *self)
-{
-        self->input_settings = g_settings_new (GNOME_DESKTOP_INPUT_SOURCES_DIR);
-
-        self->xkb_info = gnome_xkb_info_new ();
-
-#ifdef HAVE_IBUS
-        ibus_init ();
-        if (!self->ibus) {
-                self->ibus = ibus_bus_new_async ();
-                if (ibus_bus_is_connected (self->ibus))
-                        fetch_ibus_engines (self);
-                else
-                        g_signal_connect_object (self->ibus, "connected",
-                                                 G_CALLBACK (fetch_ibus_engines), self,
-                                                 G_CONNECT_SWAPPED);
-        }
-        maybe_start_ibus ();
-#endif
-
-        gtk_list_box_set_header_func (self->input_list,
-                                      cc_list_box_update_header_func,
-                                      NULL, NULL);
-
-        g_signal_connect_object (self->input_settings, "changed::" KEY_INPUT_SOURCES,
-                                 G_CALLBACK (input_sources_changed), self, G_CONNECT_SWAPPED);
-
-        add_input_sources_from_settings (self);
-
-        g_object_bind_property (self->previous_source, "visible",
-                                self->previous_source_label, "visible",
-                                G_BINDING_DEFAULT);
-        g_object_bind_property (self->next_source, "visible",
-                                self->next_source_label, "visible",
-                                G_BINDING_DEFAULT);
-
-        g_settings_bind (self->input_settings, "per-window",
-                         self->per_window_source, "active",
-                         G_SETTINGS_BIND_DEFAULT);
-        g_settings_bind (self->input_settings, "per-window",
-                         self->same_source, "active",
-                         G_SETTINGS_BIND_DEFAULT | G_SETTINGS_BIND_INVERT_BOOLEAN);
-
-        update_shortcuts (self);
-        update_modifiers_shortcut (self);
-}
-
 static void
 on_localed_properties_changed (CcRegionPanel  *self,
                                GVariant       *changed_properties,
@@ -1292,47 +638,6 @@ on_localed_properties_changed (CcRegionPanel  *self,
         }
 }
 
-static void
-add_input_sources_from_localed (CcRegionPanel *self)
-{
-        g_autoptr(GVariant) layout_property = NULL;
-        g_autoptr(GVariant) variant_property = NULL;
-        const gchar *s;
-        g_auto(GStrv) layouts = NULL;
-        g_auto(GStrv) variants = NULL;
-        gint i, n;
-
-        if (!self->localed)
-                return;
-
-        layout_property = g_dbus_proxy_get_cached_property (self->localed, "X11Layout");
-        if (layout_property) {
-                s = g_variant_get_string (layout_property, NULL);
-                layouts = g_strsplit (s, ",", -1);
-        }
-
-        variant_property = g_dbus_proxy_get_cached_property (self->localed, "X11Variant");
-        if (variant_property) {
-                s = g_variant_get_string (variant_property, NULL);
-                if (s && *s)
-                        variants = g_strsplit (s, ",", -1);
-        }
-
-        if (variants && variants[0])
-                n = MIN (g_strv_length (layouts), g_strv_length (variants));
-        else if (layouts && layouts[0])
-                n = g_strv_length (layouts);
-        else
-                n = 0;
-
-        for (i = 0; i < n && layouts[i][0]; i++) {
-                const char *variant = variants ? variants[i] : NULL;
-                g_autoptr(CcInputSourceXkb) source = cc_input_source_xkb_new (self->xkb_info, layouts[i], variant);
-                add_input_row (self, CC_INPUT_SOURCE (source));
-        }
-        gtk_widget_set_visible (GTK_WIDGET (self->no_inputs_row), n == 0);
-}
-
 static void
 set_localed_locale (CcRegionPanel *self)
 {
@@ -1367,50 +672,6 @@ set_localed_locale (CcRegionPanel *self)
                            -1, NULL, NULL, NULL);
 }
 
-static void
-set_localed_input (CcRegionPanel *self)
-{
-        g_autoptr(GString) layouts = NULL;
-        g_autoptr(GString) variants = NULL;
-        g_autoptr(GList) list = NULL;
-        GList *li;
-
-        layouts = g_string_new ("");
-        variants = g_string_new ("");
-
-        list = gtk_container_get_children (GTK_CONTAINER (self->input_list));
-        for (li = list; li; li = li->next) {
-                CcInputRow *row;
-                CcInputSourceXkb *source;
-                g_autofree gchar *id = NULL;
-                const gchar *l, *v;
-
-                if (!CC_IS_INPUT_ROW (li->data))
-                        continue;
-                row = CC_INPUT_ROW (li->data);
-
-                if (!CC_IS_INPUT_SOURCE_XKB (cc_input_row_get_source (row)))
-                        continue;
-                source = CC_INPUT_SOURCE_XKB (cc_input_row_get_source (row));
-
-                id = cc_input_source_xkb_get_id (source);
-                if (gnome_xkb_info_get_layout_info (self->xkb_info, id, NULL, NULL, &l, &v)) {
-                        if (layouts->str[0]) {
-                                g_string_append_c (layouts, ',');
-                                g_string_append_c (variants, ',');
-                        }
-                        g_string_append (layouts, l);
-                        g_string_append (variants, v);
-                }
-        }
-
-        g_dbus_proxy_call (self->localed,
-                           "SetX11Keyboard",
-                           g_variant_new ("(ssssbb)", layouts->str, "", variants->str, "", TRUE, TRUE),
-                           G_DBUS_CALL_FLAGS_NONE,
-                           -1, NULL, NULL, NULL);
-}
-
 static void
 localed_proxy_ready (GObject      *source,
                      GAsyncResult *res,
@@ -1450,13 +711,6 @@ login_changed (CcRegionPanel *self)
                  g_permission_get_can_acquire (self->permission));
         /* FIXME: insensitive doesn't look quite right for this */
         gtk_widget_set_sensitive (GTK_WIDGET (self->language_section_frame), !self->login || can_acquire);
-        gtk_widget_set_sensitive (GTK_WIDGET (self->input_section_box), !self->login || can_acquire);
-
-        clear_input_sources (self);
-        if (self->login)
-                add_input_sources_from_localed (self);
-        else
-                add_input_sources_from_settings (self);
 
         update_language_label (self);
 }
@@ -1555,30 +809,16 @@ cc_region_panel_class_init (CcRegionPanelClass * klass)
 
         gtk_widget_class_set_template_from_resource (widget_class, "/org/gnome/control-center/region/cc-region-panel.ui");
 
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, add_input_row);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, alt_next_source);
         gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, formats_label);
         gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, formats_row);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, input_list);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, input_section_box);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, input_size_group);
         gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, login_label);
         gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, language_label);
         gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, language_list);
         gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, language_row);
         gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, language_section_frame);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, next_source);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, next_source_label);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, no_inputs_row);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, options_button);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, per_window_source);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, previous_source);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, previous_source_label);
         gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, restart_button);
         gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, restart_revealer);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, same_source);
 
-        gtk_widget_class_bind_template_callback (widget_class, input_row_activated_cb);
         gtk_widget_class_bind_template_callback (widget_class, restart_now);
 }
 
@@ -1605,7 +845,6 @@ cc_region_panel_init (CcRegionPanel *self)
 
         setup_login_button (self);
         setup_language_section (self);
-        setup_input_section (self);
 
         needs_restart_file = get_needs_restart_file ();
         if (g_file_query_exists (needs_restart_file, NULL))
diff --git a/panels/region/cc-region-panel.ui b/panels/region/cc-region-panel.ui
index b779142..e021071 100644
--- a/panels/region/cc-region-panel.ui
+++ b/panels/region/cc-region-panel.ui
@@ -167,129 +167,6 @@
                     </child>
                   </object>
                 </child>
-                <child>
-                  <object class="GtkBox" id="input_section_box">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="orientation">vertical</property>
-                    <property name="hexpand">True</property>
-                    <child>
-                      <object class="GtkBox">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="spacing">6</property>
-                        <property name="margin_bottom">12</property>
-                        <child>
-                          <object class="GtkBox">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="orientation">vertical</property>
-                            <property name="spacing">6</property>
-                            <child>
-                              <object class="GtkLabel" id="input_heading_label">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="halign">start</property>
-                                <property name="label" translatable="yes">Input Sources</property>
-                                <attributes>
-                                  <attribute name="weight" value="bold"/>
-                                </attributes>
-                                <accessibility>
-                                  <relation target="input_list" type="label-for"/>
-                                </accessibility>
-                              </object>
-                            </child>
-                            <child>
-                              <object class="GtkLabel">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">0</property>
-                                <property name="label" translatable="yes">Choose keyboard layouts or input methods.</property>
-                                <property name="wrap">True</property>
-                                <style>
-                                  <class name="dim-label"/>
-                                </style>
-                              </object>
-                            </child>
-                          </object>
-                        </child>
-                        <child>
-                          <object class="GtkMenuButton" id="options_button">
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="receives_default">True</property>
-                            <property name="popover">options_popover</property>
-                            <property name="hexpand">True</property>
-                            <property name="halign">end</property>
-                            <property name="valign">start</property>
-                            <child>
-                              <object class="GtkImage">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="icon_name">emblem-system-symbolic</property>
-                              </object>
-                            </child>
-                            <style>
-                              <class name="image-button"/>
-                            </style>
-                          </object>
-                        </child>
-                      </object>
-                    </child>
-                    <child>
-                      <object class="GtkFrame">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="label_xalign">0</property>
-                        <property name="shadow_type">in</property>
-                        <child>
-                          <object class="GtkListBox" id="input_list">
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="selection-mode">none</property>
-                            <signal name="row_activated" handler="input_row_activated_cb" object="CcRegionPanel" swapped="yes"/>
-                            <accessibility>
-                              <relation target="input_heading_label" type="labelled-by"/>
-                            </accessibility>
-                            <child>
-                              <object class="GtkListBoxRow" id="no_inputs_row">
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="selectable">False</property>
-                                <property name="activatable">False</property>
-                                <child>
-                                  <object class="GtkLabel">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="label" translatable="yes">No input source selected</property>
-                                  </object>
-                                </child>
-                              </object>
-                            </child>
-                            <child>
-                              <object class="GtkListBoxRow" id="add_input_row">
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="selectable">False</property>
-                                <child>
-                                  <object class="GtkImage">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="hexpand">True</property>
-                                    <property name="height_request">50</property>
-                                    <property name="margin_start">12</property>
-                                    <property name="margin_end">12</property>
-                                    <property name="icon-name">list-add-symbolic</property>
-                                  </object>
-                                </child>
-                              </object>
-                            </child>
-                          </object>
-                        </child>
-                      </object>
-                    </child>
-                  </object>
-                </child>
                 <child>
                   <object class="GtkLabel" id="login_label">
                    <property name="valign">end</property>
@@ -506,10 +383,4 @@
       </object>
     </child>
   </object>
-  <object class="GtkSizeGroup" id="input_size_group">
-    <property name="mode">vertical</property>
-    <widgets>
-      <widget name="no_inputs_row"/>
-    </widgets>
-  </object>
 </interface>
diff --git a/panels/region/meson.build b/panels/region/meson.build
index e709eb6..cc078c5 100644
--- a/panels/region/meson.build
+++ b/panels/region/meson.build
@@ -20,17 +20,10 @@ i18n.merge_file(
 sources = files(
   'cc-region-panel.c',
   'cc-format-chooser.c',
-  'cc-ibus-utils.c',
-  'cc-input-chooser.c',
-  'cc-input-row.c',
-  'cc-input-source.c',
-  'cc-input-source-ibus.c',
-  'cc-input-source-xkb.c',
 )
 
 resource_data = files(
   'cc-format-chooser.ui',
-  'cc-input-chooser.ui',
   'cc-region-panel.ui',
   'view-layout-symbolic.svg',
 )
@@ -50,10 +43,6 @@ deps = common_deps + [
   polkit_gobject_dep
 ]
 
-if enable_ibus
-  deps += ibus_dep
-endif
-
 panels_libs += static_library(
   cappletname,
   sources: sources,
diff --git a/panels/search/cc-search-locations-dialog.c b/panels/search/cc-search-locations-dialog.c
index 48749da..1512584 100644
--- a/panels/search/cc-search-locations-dialog.c
+++ b/panels/search/cc-search-locations-dialog.c
@@ -26,6 +26,7 @@
 #define TRACKER_SCHEMA "org.freedesktop.Tracker.Miner.Files"
 #define TRACKER_KEY_RECURSIVE_DIRECTORIES "index-recursive-directories"
 #define TRACKER_KEY_SINGLE_DIRECTORIES "index-single-directories"
+#define TRACKER_KEY_RECURSIVE_CACHE_DIRECTORIES "index-recursive-cache-directories"
 
 typedef enum {
   PLACE_XDG,
@@ -300,6 +301,42 @@ place_get_new_settings_values (CcSearchLocationsDialog *self,
   return new_values;
 }
 
+static void
+update_cache_settings_values (CcSearchLocationsDialog *self,
+                              Place *place,
+                              gboolean remove)
+{
+  g_auto(GStrv) values = NULL;
+  g_autofree gchar *path = NULL;
+  GPtrArray *new_values;
+  gboolean found;
+  gint idx;
+
+  new_values = g_ptr_array_new_with_free_func (g_free);
+  values = g_settings_get_strv (self->tracker_preferences, TRACKER_KEY_RECURSIVE_CACHE_DIRECTORIES);
+  path = g_file_get_path (place->location);
+
+  found = FALSE;
+
+  for (idx = 0; values[idx] != NULL; idx++)
+    {
+      if (g_strcmp0 (values[idx], path) == 0)
+        {
+          found = TRUE;
+          if (remove)
+            continue;
+        }
+
+      g_ptr_array_add (new_values, g_strdup (values[idx]));
+    }
+
+  if (!found && !remove)
+    g_ptr_array_add (new_values, g_strdup (path));
+
+  g_ptr_array_add (new_values, NULL);
+
+  g_settings_set_strv (self->tracker_preferences, TRACKER_KEY_RECURSIVE_CACHE_DIRECTORIES, (const gchar **)new_values->pdata);
+}
 
 static GList *
 get_tracker_locations (CcSearchLocationsDialog *self)
@@ -311,7 +348,7 @@ get_tracker_locations (CcSearchLocationsDialog *self)
   Place *location;
   const gchar *path;
 
-  locations = g_settings_get_strv (self->tracker_preferences, TRACKER_KEY_RECURSIVE_DIRECTORIES);
+  locations = g_settings_get_strv (self->tracker_preferences, TRACKER_KEY_RECURSIVE_CACHE_DIRECTORIES);
   list = NULL;
 
   for (idx = 0; locations[idx] != NULL; idx++)
@@ -448,6 +485,11 @@ switch_tracker_set_mapping (const GValue *value,
 
   remove = !g_value_get_boolean (value);
   new_values = place_get_new_settings_values (place->dialog, place, remove);
+
+  // 무조건 remove로만 들어와서 값을 지워버림..
+  // jeong89
+  update_cache_settings_values (place->dialog, place, FALSE);
+
   return g_variant_new_strv ((const gchar **) new_values->pdata, -1);
 }
 
@@ -497,6 +539,11 @@ remove_button_clicked (CcSearchLocationsDialog *self,
 
   place = g_object_get_data (G_OBJECT (button), "place");
   new_values = place_get_new_settings_values (self, place, TRUE);
+
+  // 검색위치 대화상자의 '기타'탭의 switching시 값을 지워버림
+  // jeong89
+  update_cache_settings_values (self, place, TRUE);
+
   g_settings_set_strv (self->tracker_preferences, place->settings_key, (const gchar **) new_values->pdata);
 }
 
@@ -622,6 +669,9 @@ add_file_chooser_response (CcSearchLocationsDialog *self,
   place->settings_key = TRACKER_KEY_RECURSIVE_DIRECTORIES;
 
   new_values = place_get_new_settings_values (self, place, FALSE);
+
+  update_cache_settings_values (self, place, FALSE);
+
   g_settings_set_strv (self->tracker_preferences, place->settings_key, (const gchar **) new_values->pdata);
 
   gtk_widget_destroy (GTK_WIDGET (widget));
diff --git a/panels/thunderbolt/cc-bolt-panel.ui b/panels/thunderbolt/cc-bolt-panel.ui
index 226353c..afacac3 100644
--- a/panels/thunderbolt/cc-bolt-panel.ui
+++ b/panels/thunderbolt/cc-bolt-panel.ui
@@ -138,7 +138,7 @@
                       <object class="GtkLabel" id="notb_caption">
                         <property name="visible">True</property>
                         <property name="can_focus">False</property>
-                        <property name="wrap">True</property>
+                        <property name="wrap">False</property>
                         <property name="xalign">0</property>
                         <property name="label" translatable="yes">No Thunderbolt support</property>
                         <attributes>
@@ -171,6 +171,22 @@
                         <property name="top_attach">1</property>
                       </packing>
                     </child>
+                    <child>
+                      <object class="GtkBox" id="details-supporter">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="expand">False</property>
+                        <property name="halign">center</property>
+                        <property name="valign">end</property>
+                        <property name="orientation">vertical</property>
+                        <property name="margin">25</property>
+                      </object>
+                      <packing>
+                        <property name="left_attach">1</property>
+                        <property name="top_attach">2</property>
+                      </packing>
+                    </child>
+
 
                   </object>
                 </child>
diff --git a/panels/universal-access/cc-ua-panel.c b/panels/universal-access/cc-ua-panel.c
index bf098fb..d2063a4 100644
--- a/panels/universal-access/cc-ua-panel.c
+++ b/panels/universal-access/cc-ua-panel.c
@@ -2,6 +2,7 @@
  *
  * Copyright (C) 2010 Intel, Inc
  * Copyright (C) 2008 William Jon McCann <jmccann@redhat.com>
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -31,7 +32,7 @@
 #include "cc-ua-panel.h"
 #include "cc-ua-resources.h"
 
-#include "zoom-options.h"
+//#include "zoom-options.h"
 
 #define DPI_FACTOR_LARGE 1.25
 #define DPI_FACTOR_NORMAL 1.0
@@ -130,15 +131,15 @@ struct _CcUaPanel
   GtkWidget *repeat_keys_switch;
   GtkWidget *row_accessx;
   GtkWidget *row_click_assist;
-  GtkWidget *row_cursor_blinking;
+  //GtkWidget *row_cursor_blinking;
   GtkWidget *row_cursor_size;
   GtkWidget *row_repeat_keys;
   GtkWidget *row_screen_reader;
   GtkWidget *row_sound_keys;
   GtkWidget *row_visual_alerts;
-  GtkWidget *row_zoom;
+  //GtkWidget *row_zoom;
   GtkWidget *scale_double_click_delay;
-  GtkWidget *screen_keyboard_switch;
+  //GtkWidget *screen_keyboard_switch;
   GtkWidget *screen_reader_dialog;
   GtkWidget *screen_reader_switch;
   GtkWidget *section_status;
@@ -168,11 +169,11 @@ struct _CcUaPanel
   GtkWidget *value_highcontrast;
   GtkWidget *value_large_text;
   GtkWidget *value_repeat_keys;
-  GtkWidget *value_row_cursor_blinking;
-  GtkWidget *value_screen_reader;
+  //GtkWidget *value_row_cursor_blinking;
+  //GtkWidget *value_screen_reader;
   GtkWidget *value_sound_keys;
   GtkWidget *value_visual_alerts;
-  GtkWidget *value_zoom;
+  //GtkWidget *value_zoom;
   GtkWidget *visual_alerts_dialog;
   GtkWidget *visual_alerts_screen_radio;
   GtkWidget *visual_alerts_switch;
@@ -188,7 +189,7 @@ struct _CcUaPanel
   GSettings *application_settings;
   GSettings *gsd_mouse_settings;
 
-  ZoomOptions *zoom_options;
+  //ZoomOptions *zoom_options;
 
   GtkAdjustment *focus_adjustment;
 
@@ -205,7 +206,7 @@ cc_ua_panel_dispose (GObject *object)
 {
   CcUaPanel *self = CC_UA_PANEL (object);
 
-  g_clear_pointer ((GtkWidget **)&self->zoom_options, gtk_widget_destroy);
+  //g_clear_pointer ((GtkWidget **)&self->zoom_options, gtk_widget_destroy);
   g_slist_free_full (self->toplevels, (GDestroyNotify)gtk_widget_destroy);
   self->toplevels = NULL;
 
@@ -248,7 +249,7 @@ cc_ua_panel_class_init (CcUaPanelClass *klass)
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, cursor_blinking_switch);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, cursor_size_dialog);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, cursor_size_grid);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, list_hearing);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, list_hearing);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, list_pointing);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, list_seeing);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, list_typing);
@@ -271,17 +272,17 @@ cc_ua_panel_class_init (CcUaPanelClass *klass)
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, repeat_keys_switch);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_accessx);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_click_assist);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_cursor_blinking);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_cursor_blinking);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_cursor_size);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_repeat_keys);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_screen_reader);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_screen_reader);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_sound_keys);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_visual_alerts);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_zoom);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_visual_alerts);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_zoom);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, scale_double_click_delay);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, screen_keyboard_switch);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, screen_keyboard_switch);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, screen_reader_dialog);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, screen_reader_switch);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, screen_reader_switch);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, section_status);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, sound_keys_dialog);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, sound_keys_switch);
@@ -309,30 +310,30 @@ cc_ua_panel_class_init (CcUaPanelClass *klass)
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_highcontrast);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_large_text);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_repeat_keys);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_row_cursor_blinking);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_screen_reader);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_row_cursor_blinking);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_screen_reader);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_sound_keys);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_visual_alerts);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_zoom);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_visual_alerts);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_zoom);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, visual_alerts_dialog);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, visual_alerts_screen_radio);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, visual_alerts_switch);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, visual_alerts_test_button);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, visual_alerts_test_button);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, visual_alerts_window_radio);
 }
 
 /* zoom options dialog */
-static void
-zoom_options_launch (CcUaPanel *self)
-{
-  if (self->zoom_options == NULL)
-    {
-      GtkWindow *window = GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (self)));
-      self->zoom_options = zoom_options_new (window);
-    }
-
-  gtk_window_present_with_time (GTK_WINDOW (self->zoom_options), GDK_CURRENT_TIME);
-}
+//static void
+//zoom_options_launch (CcUaPanel *self)
+//{
+//  if (self->zoom_options == NULL)
+//    {
+//      GtkWindow *window = GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (self)));
+//      self->zoom_options = zoom_options_new (window);
+//    }
+//
+//  gtk_window_present_with_time (GTK_WINDOW (self->zoom_options), GDK_CURRENT_TIME);
+//}
 
 /* cursor size dialog */
 static void
@@ -622,11 +623,11 @@ activate_row (CcUaPanel *self, GtkListBoxRow *row)
           toggle_switch (self->value_large_text);
           return;
         }
-      if (!g_strcmp0 (widget_name, "row_screen_keyboard"))
-        {
-          toggle_switch (self->screen_keyboard_switch);
-          return;
-        }
+//      if (!g_strcmp0 (widget_name, "row_screen_keyboard"))
+//        {
+//          toggle_switch (self->screen_keyboard_switch);
+//          return;
+//        }
       if (!g_strcmp0 (widget_name, "row_mouse_keys"))
         {
           toggle_switch (self->mouse_keys_switch);
@@ -635,12 +636,12 @@ activate_row (CcUaPanel *self, GtkListBoxRow *row)
     }
 
   /* Check dialog to open */
-  dialog_id = (const gchar *)g_object_get_data (G_OBJECT (row), "dialog-id");
-  if (g_strcmp0 (dialog_id, "zoom") == 0)
-    {
-      zoom_options_launch (self);
-      return;
-    }
+//  dialog_id = (const gchar *)g_object_get_data (G_OBJECT (row), "dialog-id");
+//  if (g_strcmp0 (dialog_id, "zoom") == 0)
+//    {
+//      zoom_options_launch (self);
+//      return;
+//    }
 
   dialog = (GtkWidget *)g_object_get_data (G_OBJECT (row), "dialog");
   if (dialog == NULL)
@@ -697,29 +698,29 @@ cc_ua_panel_init_seeing (CcUaPanel *self)
 
   /* zoom */
 
-  g_settings_bind_with_mapping (self->application_settings, "screen-magnifier-enabled",
-                                self->value_zoom,
-                                "label", G_SETTINGS_BIND_GET,
-                                on_off_label_mapping_get,
-                                NULL, NULL, NULL);
+//  g_settings_bind_with_mapping (self->application_settings, "screen-magnifier-enabled",
+//                                self->value_zoom,
+//                                "label", G_SETTINGS_BIND_GET,
+//                                on_off_label_mapping_get,
+//                                NULL, NULL, NULL);
 
-  g_object_set_data (G_OBJECT (self->row_zoom), "dialog-id", "zoom");
+//  g_object_set_data (G_OBJECT (self->row_zoom), "dialog-id", "zoom");
 
   /* screen reader */
 
-  g_settings_bind_with_mapping (self->application_settings, "screen-reader-enabled",
-                                self->value_screen_reader, "label",
-                                G_SETTINGS_BIND_GET,
-                                on_off_label_mapping_get,
-                                NULL, NULL, NULL);
+//  g_settings_bind_with_mapping (self->application_settings, "screen-reader-enabled",
+//                                self->value_screen_reader, "label",
+//                                G_SETTINGS_BIND_GET,
+//                                on_off_label_mapping_get,
+//                                NULL, NULL, NULL);
 
-  g_settings_bind (self->application_settings, "screen-reader-enabled",
-                   self->screen_reader_switch, "active",
-                   G_SETTINGS_BIND_DEFAULT);
+//  g_settings_bind (self->application_settings, "screen-reader-enabled",
+//                   self->screen_reader_switch, "active",
+//                   G_SETTINGS_BIND_DEFAULT);
 
   self->toplevels = g_slist_prepend (self->toplevels, self->screen_reader_dialog);
 
-  g_object_set_data (G_OBJECT (self->row_screen_reader), "dialog", self->screen_reader_dialog);
+//  g_object_set_data (G_OBJECT (self->row_screen_reader), "dialog", self->screen_reader_dialog);
   g_signal_connect (self->screen_reader_dialog, "delete-event",
                     G_CALLBACK (gtk_widget_hide_on_delete), NULL);
 
@@ -800,11 +801,11 @@ cc_ua_panel_init_hearing (CcUaPanel *self)
                    self->visual_alerts_switch, "active",
                    G_SETTINGS_BIND_DEFAULT);
 
-  g_settings_bind_with_mapping (self->wm_settings, KEY_VISUAL_BELL_ENABLED,
-                                self->value_visual_alerts,
-                                "label", G_SETTINGS_BIND_GET,
-                                on_off_label_mapping_get,
-                                NULL, NULL, NULL);
+//  g_settings_bind_with_mapping (self->wm_settings, KEY_VISUAL_BELL_ENABLED,
+//                                self->value_visual_alerts,
+//                                "label", G_SETTINGS_BIND_GET,
+//                                on_off_label_mapping_get,
+//                                NULL, NULL, NULL);
 
   g_object_bind_property (self->visual_alerts_switch, "active",
                           self->visual_alerts_window_radio, "sensitive",
@@ -843,15 +844,15 @@ on_repeat_keys_toggled (CcUaPanel *self)
   gtk_widget_set_sensitive (self->repeat_keys_speed_grid, on);
 }
 
-static void
-on_cursor_blinking_toggled (CcUaPanel *self)
-{
-  gboolean on;
-
-  on = g_settings_get_boolean (self->interface_settings, KEY_CURSOR_BLINKING);
-
-  gtk_label_set_text (GTK_LABEL (self->value_row_cursor_blinking), on ? _("On") : _("Off"));
-}
+//static void
+//on_cursor_blinking_toggled (CcUaPanel *self)
+//{
+//  gboolean on;
+//
+//  on = g_settings_get_boolean (self->interface_settings, KEY_CURSOR_BLINKING);
+//
+//  gtk_label_set_text (GTK_LABEL (self->value_row_cursor_blinking), on ? _("On") : _("Off"));
+//}
 
 static void
 update_accessx_label (CcUaPanel *self)
@@ -881,9 +882,9 @@ cc_ua_panel_init_keyboard (CcUaPanel *self)
                            G_CALLBACK (activate_row), self, G_CONNECT_SWAPPED);
 
   /* on-screen keyboard */
-  g_settings_bind (self->application_settings, KEY_SCREEN_KEYBOARD_ENABLED,
-                   self->screen_keyboard_switch, "active",
-                   G_SETTINGS_BIND_DEFAULT);
+//  g_settings_bind (self->application_settings, KEY_SCREEN_KEYBOARD_ENABLED,
+//                   self->screen_keyboard_switch, "active",
+//                   G_SETTINGS_BIND_DEFAULT);
 
   /* Repeat keys */
   g_signal_connect_object (self->kb_desktop_settings, "changed",
@@ -910,12 +911,12 @@ cc_ua_panel_init_keyboard (CcUaPanel *self)
                    G_SETTINGS_BIND_DEFAULT);
 
   /* Cursor Blinking */
-  g_signal_connect_object (self->interface_settings, "changed",
-                           G_CALLBACK (on_cursor_blinking_toggled), self, G_CONNECT_SWAPPED);
+//  g_signal_connect_object (self->interface_settings, "changed",
+//                           G_CALLBACK (on_cursor_blinking_toggled), self, G_CONNECT_SWAPPED);
 
   self->toplevels = g_slist_prepend (self->toplevels, self->cursor_blinking_dialog);
 
-  g_object_set_data (G_OBJECT (self->row_cursor_blinking), "dialog", self->cursor_blinking_dialog);
+//  g_object_set_data (G_OBJECT (self->row_cursor_blinking), "dialog", self->cursor_blinking_dialog);
 
   g_signal_connect (self->cursor_blinking_dialog, "delete-event",
                     G_CALLBACK (gtk_widget_hide_on_delete), NULL);
@@ -924,7 +925,7 @@ cc_ua_panel_init_keyboard (CcUaPanel *self)
   g_settings_bind (self->interface_settings, KEY_CURSOR_BLINKING,
                    sw, "active",
                    G_SETTINGS_BIND_DEFAULT);
-  on_cursor_blinking_toggled (self);
+//  on_cursor_blinking_toggled (self);
 
   g_settings_bind (self->interface_settings, KEY_CURSOR_BLINKING_TIME,
                    gtk_range_get_adjustment (GTK_RANGE (self->cursor_blinking_scale)), "value",
@@ -1123,7 +1124,7 @@ cc_ua_panel_init (CcUaPanel *self)
 
   cc_ua_panel_init_status (self);
   cc_ua_panel_init_seeing (self);
-  cc_ua_panel_init_hearing (self);
+//  cc_ua_panel_init_hearing (self);
   cc_ua_panel_init_keyboard (self);
   cc_ua_panel_init_mouse (self);
 
diff --git a/panels/universal-access/cc-ua-panel.ui b/panels/universal-access/cc-ua-panel.ui
index 5dc561f..0e0bcdc 100644
--- a/panels/universal-access/cc-ua-panel.ui
+++ b/panels/universal-access/cc-ua-panel.ui
@@ -284,7 +284,7 @@
                                         </child>
                                       </object>
                                     </child>
-                                    <child>
+                                    <!--child>
                                       <object class="GtkListBoxRow" id="row_zoom">
                                         <property name="visible">True</property>
                                         <property name="can_focus">True</property>
@@ -329,8 +329,8 @@
                                           </object>
                                         </child>
                                       </object>
-                                    </child>
-                                    <child>
+                                    </child-->
+                                    <!--child>
                                       <object class="GtkListBoxRow" id="row_screen_reader">
                                         <property name="visible">True</property>
                                         <property name="can_focus">True</property>
@@ -375,7 +375,7 @@
                                           </object>
                                         </child>
                                       </object>
-                                    </child>
+                                    </child-->
                                     <child>
                                       <object class="GtkListBoxRow" id="row_sound_keys">
                                         <property name="visible">True</property>
@@ -441,7 +441,7 @@
                             <property name="position">1</property>
                           </packing>
                         </child>
-                        <child>
+                        <!--child>
                           <object class="GtkBox" id="section_hearing">
                             <property name="visible">True</property>
                             <property name="can_focus">False</property>
@@ -546,7 +546,7 @@
                             <property name="fill">True</property>
                             <property name="position">2</property>
                           </packing>
-                        </child>
+                        </child-->
                         <child>
                           <object class="GtkBox" id="section_typing">
                             <property name="visible">True</property>
@@ -588,7 +588,7 @@
                                     <accessibility>
                                       <relation target="heading_typing" type="labelled-by"/>
                                     </accessibility>
-                                    <child>
+                                    <!--child>
                                       <object class="GtkListBoxRow" id="row_screen_keyboard">
                                         <property name="visible">True</property>
                                         <property name="can_focus">True</property>
@@ -634,7 +634,7 @@
                                           </object>
                                         </child>
                                       </object>
-                                    </child>
+                                    </child-->
                                     <child>
                                       <object class="GtkListBoxRow" id="row_repeat_keys">
                                         <property name="visible">True</property>
@@ -681,7 +681,7 @@
                                         </child>
                                       </object>
                                     </child>
-                                    <child>
+                                    <!--child>
                                       <object class="GtkListBoxRow" id="row_cursor_blinking">
                                         <property name="visible">True</property>
                                         <property name="can_focus">True</property>
@@ -726,7 +726,7 @@
                                           </object>
                                         </child>
                                       </object>
-                                    </child>
+                                    </child-->
                                     <child>
                                       <object class="GtkListBoxRow" id="row_accessx">
                                         <property name="visible">True</property>
@@ -1050,11 +1050,11 @@
       <widget name="row_highcontrast"/>
       <widget name="row_large_text"/>
       <widget name="row_cursor_size"/>
-      <widget name="row_zoom"/>
-      <widget name="row_screen_reader"/>
+      <!--widget name="row_zoom"/-->
+      <!--widget name="row_screen_reader"/-->
       <widget name="row_sound_keys"/>
-      <widget name="row_visual_alerts"/>
-      <widget name="row_screen_keyboard"/>
+      <!--widget name="row_visual_alerts"/-->
+      <!--widget name="row_screen_keyboard"/-->
       <widget name="row_accessx"/>
       <widget name="row_mouse_keys"/>
       <widget name="row_click_assist"/>
@@ -1431,9 +1431,9 @@
         </child>
       </object>
     </child>
-    <action-widgets>
+    <!--action-widgets>
       <action-widget response="0">visual_alerts_test_button</action-widget>
-    </action-widgets>
+    </action-widgets-->
   </object>
   <object class="GtkAdjustment" id="typing_bouncekeys_delay_adjustment">
     <property name="upper">900</property>
diff --git a/panels/user-accounts/cc-user-panel.c b/panels/user-accounts/cc-user-panel.c
index 5a9b5c2..8cedb15 100644
--- a/panels/user-accounts/cc-user-panel.c
+++ b/panels/user-accounts/cc-user-panel.c
@@ -1,6 +1,7 @@
 /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
  *
  * Copyright 2009-2010  Red Hat, Inc,
+ * Copyright (C) 2019  gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -1075,6 +1076,19 @@ restart_now (CcUserPanel *self)
         g_object_unref (bus);
 }
 
+static void
+response_restart_dialog (GtkDialog* dialog,
+                         gint id,
+                         gpointer user_data)
+{
+    CcUserPanel *self = user_data;
+
+    if (id == -8)
+        restart_now (self);
+    
+    gtk_widget_destroy (dialog);
+}
+
 static void
 show_restart_notification (CcUserPanel *self, const gchar *locale)
 {
@@ -1089,7 +1103,19 @@ show_restart_notification (CcUserPanel *self, const gchar *locale)
                         current_locale = uselocale (new_locale);
         }
 
-        gtk_revealer_set_reveal_child (self->notification_revealer, TRUE);
+        //gtk_revealer_set_reveal_child (self->notification_revealer, TRUE);
+        GtkWidget* restart_dialog = gtk_message_dialog_new (NULL,
+                                                            0,
+                                                            GTK_MESSAGE_INFO,
+                                                            GTK_BUTTONS_YES_NO,
+                                                            _("User infomations has changed.\nChanges take effect after your session needs to be restarted.\nDo you want restart?"));
+
+        g_signal_connect (restart_dialog,
+                          "response",
+                          G_CALLBACK (response_restart_dialog),
+                          self);
+
+        gtk_widget_show (restart_dialog);
 
         if (locale && new_locale != (locale_t) 0) {
                 uselocale (current_locale);
diff --git a/panels/user-accounts/meson.build b/panels/user-accounts/meson.build
index b8ee9d9..fc91f73 100644
--- a/panels/user-accounts/meson.build
+++ b/panels/user-accounts/meson.build
@@ -195,7 +195,8 @@ endif
 cflags += [
   '-DGNOMELOCALEDIR="@0@"'.format(control_center_localedir),
   '-DHAVE_LIBPWQUALITY',
-  '-DUM_PIXMAP_DIR="@0@"'.format(join_paths(control_center_pkgdatadir, 'pixmaps'))
+  '-DUM_PIXMAP_DIR="@0@"'.format(join_paths(control_center_pkgdatadir, 'pixmaps')),
+  '-DECRYPTFS_DIR="/home/.ecryptfs"'
 ]
 
 panels_libs += static_library(
diff --git a/panels/user-accounts/pw-utils.c b/panels/user-accounts/pw-utils.c
index 0f4dfd8..15eed2a 100644
--- a/panels/user-accounts/pw-utils.c
+++ b/panels/user-accounts/pw-utils.c
@@ -1,6 +1,7 @@
 /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
  *
  * Copyright 2012  Red Hat, Inc,
+ * Copyright (C) 2019  gooroom <gooroom@gooroom.kr>,
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -107,7 +108,8 @@ pw_error_hint (gint error)
         case PWQ_ERROR_CRACKLIB_CHECK:
                 return C_("Password hint", "Try to avoid common words.");
         case PWQ_ERROR_PALINDROME:
-                return C_("Password hint", "Try to avoid reordering existing words.");
+                return C_("Password hint", "Do not enter the same words consecutively.");
+                //return C_("Password hint", "Try to avoid reordering existing words.");
         case PWQ_ERROR_MIN_DIGITS:
                 return C_("Password hint", "Try to use more numbers.");
         case PWQ_ERROR_MIN_UPPERS:
diff --git a/po/POTFILES.in b/po/POTFILES.in
index ddcc1af..af3151f 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -259,6 +259,7 @@ shell/cc-window.ui
 shell/gnome-control-center.desktop.in.in
 shell/help-overlay.ui
 shell/org.gnome.ControlCenter.gschema.xml
+panels/font/gnome-font-panel.desktop.in/in
 panels/font/cc-font-panel.c
 panels/font/font.ui
 panels/themes/gnome-themes-panel.desktop.in.in
diff --git a/po/en.po b/po/en.po
index 4fee8b4..3ecd651 100644
--- a/po/en.po
+++ b/po/en.po
@@ -3299,3 +3299,43 @@ msgstr ""
 #: ../shell/org.gnome.ControlCenter.gschema.xml:21
 msgid "Show side panel list that matches the User settings values."
 msgstr ""
+
+#: ../panels/user-accounts/um-user-panel.c:998
+msgid ""
+"Your session needs to be restarted for changes to take effect.\n"
+"Do you want restart?"
+msgstr ""
+""
+""
+
+#: ../panels/datetime/datetime.ui:333
+#: ../panels/datetime/datetime.ui:441
+msgid "Apply network time when connecting to the Internet"
+msgstr ""
+
+#: panels/user-accounts/pw-utils.c:97
+msgctxt "Password hint"
+msgid "Do not enter the same words consecutively."
+msgstr ""
+
+#: ../panels/power/cc-power-panel.c:1842
+msgid "Screen dims when the computer operates on battery power."
+msgstr ""
+
+#: ../panels/printers/cc-printer-panel.c:1136
+msgid ""
+"Media control access not permission.\n"
+"To use, change access permission to \"allow\""
+msgstr ""
+""
+""
+
+#: ../panels/user-accounts/um-user-panel.c:997
+msgid ""
+"User infomations has changed.\n"
+"Changes take effect after your session needs to be restarted.\n"
+"Do you want restart?"
+msgstr ""
+""
+""
+""
diff --git a/po/en_GB.po b/po/en_GB.po
index 1845e82..b3d96f4 100644
--- a/po/en_GB.po
+++ b/po/en_GB.po
@@ -14508,3 +14508,43 @@ msgstr "Show settings list"
 #: ../shell/org.gnome.ControlCenter.gschema.xml:21
 msgid "Show side panel list that matches the User settings values."
 msgstr "Show side panel list that matches the User settings values."
+
+#: ../panels/user-accounts/um-user-panel.c:998
+msgid ""
+"Your session needs to be restarted for changes to take effect.\n"
+"Do you want restart?"
+msgstr ""
+"Your session needs to be restarted for changes to take effect.\n"
+"Do you want restart?"
+
+#: ../panels/datetime/datetime.ui:333
+#: ../panels/datetime/datetime.ui:441
+msgid "Apply network time when connecting to the Internet"
+msgstr "Apply network time when connecting to the Internet"
+
+#: panels/user-accounts/pw-utils.c:97
+msgctxt "Password hint"
+msgid "Do not enter the same words consecutively."
+msgstr "Do not enter the same words consecutively."
+
+#: ../panels/power/cc-power-panel.c:1842
+msgid "Screen dims when the computer operates on battery power."
+msgstr "Screen dims when the computer operates on battery power."
+
+#: ../panels/printers/cc-printer-panel.c:1136
+msgid ""
+"Media control access not permission.\n"
+"To use, change access permission to \"allow\""
+msgstr ""
+"Media control access not permission.\n"
+"To use, change access permission to \"allow\""
+
+#: ../panels/user-accounts/um-user-panel.c:997
+msgid ""
+"User infomations has changed.\n"
+"Changes take effect after your session needs to be restarted.\n"
+"Do you want restart?"
+msgstr ""
+"User infomations has changed.\n"
+"Changes take effect after your session needs to be restarted.\n"
+"Do you want restart?"
diff --git a/po/ko.po b/po/ko.po
index 322bdfc..f2b35f2 100644
--- a/po/ko.po
+++ b/po/ko.po
@@ -3170,7 +3170,7 @@ msgstr "수동"
 #: panels/network/connection-editor/ip4-page.ui:83
 #: panels/network/connection-editor/ip6-page.ui:97
 msgid "Disable"
-msgstr "사용 않기"
+msgstr "사용안함"
 
 #: panels/network/connection-editor/ip4-page.ui:97
 #: panels/network/connection-editor/ip6-page.ui:111
@@ -6503,11 +6503,11 @@ msgstr "누르기 도움"
 
 #: panels/universal-access/cc-ua-panel.ui:2514
 msgid "_Simulated Secondary Click"
-msgstr "두 번째 누르기 흉내 내기(_S)"
+msgstr "오른쪽 누르기 흉내 내기(_S)"
 
 #: panels/universal-access/cc-ua-panel.ui:2532
 msgid "Trigger a secondary click by holding down the primary button"
-msgstr "단추를 누르고 있으면 두 번째 누르기로 취급"
+msgstr "단추를 누르고 있으면 오른쪽 누르기로 취급"
 
 #: panels/universal-access/cc-ua-panel.ui:2586
 msgctxt "secondary click"
@@ -6516,7 +6516,7 @@ msgstr "짧게"
 
 #: panels/universal-access/cc-ua-panel.ui:2605
 msgid "Secondary click delay"
-msgstr "두 번째 누르기 지연 시간"
+msgstr "오른쪽 누르기 지연 시간"
 
 #: panels/universal-access/cc-ua-panel.ui:2620
 msgctxt "secondary click delay"
@@ -8249,6 +8249,63 @@ msgstr "패널 목록 보여줌"
 msgid "Show side panel list that matches the User settings values."
 msgstr "사용자 설정 값과 일치하는 사이드 목록을 보여줍니다."
 
+#: ../panels/user-accounts/um-lockbutton.c:365
+msgid "Locked"
+msgstr "잠김"
+
+#: ../panels/network/network.ui.h:23
+#: ../panels/user-accounts/um-lockbutton.c:356
+msgid "Unlock"
+msgstr "잠금 해제"
+
+#: ../panels/user-accounts/um-lockbutton.c:383
+msgid ""
+"Dialog is locked.\n"
+"Click to make changes"
+msgstr ""
+"대화창이 잠겼습니다.\n"
+"바꾸려면 누르십시오"
+
+#: ../panels/user-accounts/um-user-panel.c:998
+msgid ""
+"Your session needs to be restarted for changes to take effect.\n"
+"Do you want restart?"
+msgstr ""
+"바뀐 사항을 적용하려면 세션을 다시 시작해야 합니다.\n"
+"다시 시작하시겠습니까?"
+
+#: ../panels/datetime/datetime.ui:333
+#: ../panels/datetime/datetime.ui:441
+msgid "Apply network time when connecting to the Internet"
+msgstr "인터넷 연결 시 네트워크 시간 적용"
+
+#: panels/user-accounts/pw-utils.c:97
+msgctxt "Password hint"
+msgid "Do not enter the same words consecutively."
+msgstr "같은 단어를 연속해서 입력하지 마십시오."
+
+#: ../panels/power/cc-power-panel.c:1842
+msgid "Screen dims when the computer operates on battery power."
+msgstr "컴퓨터가 배터리 전원으로 동작하면 화면이 어두워 집니다."
+
+#: ../panels/printers/cc-printer-panel.c:1136
+msgid ""
+"Media control access not permission.\n"
+"To use, change access permission to \"allow\""
+msgstr ""
+"매체제어 접근 권한이 없습니다.\n"
+"사용하시려면 접근 권한을 \"allow\"로 변경하십시오."
+
+#: ../panels/user-accounts/um-user-panel.c:997
+msgid ""
+"User infomations has changed.\n"
+"Changes take effect after your session needs to be restarted.\n"
+"Do you want restart?"
+msgstr ""
+"사용자 정보가 변경되었습니다.\n"
+"세션을 다시 시작해야 변경 사항이 적용됩니다.\n"
+"다시 시작하시겠습니까?"
+
 # 권한 이름
 #~ msgid "Add user accounts and change passwords"
 #~ msgstr "사용자 계정 추가 및 암호 바꾸기"
diff --git a/shell/cc-application.c b/shell/cc-application.c
index 4a90157..74e1277 100644
--- a/shell/cc-application.c
+++ b/shell/cc-application.c
@@ -1,5 +1,6 @@
 /*
  * Copyright © 2013 Red Hat, Inc.
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License
@@ -216,7 +217,7 @@ static void
 cc_application_startup (GApplication *application)
 {
   CcApplication *self = CC_APPLICATION (application);
-  const gchar *help_accels[] = { "F1", NULL };
+//  const gchar *help_accels[] = { "F1", NULL };
 
   g_action_map_add_action_entries (G_ACTION_MAP (self),
                                    cc_app_actions,
@@ -227,8 +228,8 @@ cc_application_startup (GApplication *application)
 
   hdy_init ();
 
-  gtk_application_set_accels_for_action (GTK_APPLICATION (application),
-                                         "app.help", help_accels);
+//  gtk_application_set_accels_for_action (GTK_APPLICATION (application),
+//                                         "app.help", help_accels);
 
   self->model = cc_shell_model_new ();
   self->window = cc_window_new (GTK_APPLICATION (application), self->model);
diff --git a/shell/cc-panel-list.c b/shell/cc-panel-list.c
index 0b358ef..fc7f264 100644
--- a/shell/cc-panel-list.c
+++ b/shell/cc-panel-list.c
@@ -1,6 +1,7 @@
 /* cc-panel-list.c
  *
  * Copyright (C) 2016 Endless, Inc
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -541,6 +542,25 @@ header_func (GtkListBoxRow *row,
     }
 }
 
+// set visible details_row & devices_row
+static void 
+show_panel_list_row_box (GtkWidget *listbox, GtkWidget *row)
+{
+  GList   *child_list, *l;
+
+  gtk_widget_hide ((GtkWidget*)row);
+  child_list = gtk_container_get_children (GTK_CONTAINER (listbox));
+  for (l = child_list; l != NULL; l = l->next)
+  {
+    RowData *rd = g_object_get_data (l->data, "data");
+    if (gtk_widget_get_visible (rd->row))
+    {
+      gtk_widget_show ((GtkWidget*)row);
+      break;
+    }
+  }
+}
+
 /*
  * Callbacks
  */
@@ -550,6 +570,7 @@ row_activated_cb (GtkWidget     *listbox,
                   CcPanelList   *self)
 {
   RowData *data;
+  GList   *child_list, *l;
 
   if (row == self->privacy_row)
     {
@@ -570,6 +591,10 @@ row_activated_cb (GtkWidget     *listbox,
         gtk_list_box_unselect_all (GTK_LIST_BOX (self->privacy_listbox));
     }
 
+  // visible details & devices list row box
+  //show_panel_list_row_box (self->details_listbox, self->details_row);
+  //show_panel_list_row_box (self->devices_listbox, self->devices_row);
+
   /*
    * Since we're not sure that the activated row is in the
    * current view, set the view here.
@@ -849,10 +874,21 @@ cc_panel_list_activate (CcPanelList *self)
   if (!GTK_IS_LIST_BOX (listbox))
     CC_RETURN (FALSE);
 
-  /* Select the first visible row */
-  do
-    row = gtk_list_box_get_row_at_index (GTK_LIST_BOX (listbox), i++);
-  while (row && !gtk_widget_get_visible (GTK_WIDGET (row)));
+  /* 패널 검색에서 텍스트를 입력 후 Enter 또는 뒤로 가기를 한 경우
+     무조건 privacy패널을 선택하는 오류가 있어서 주석처리함... */
+//  /* Select the first visible row */
+//  do
+//    row = gtk_list_box_get_row_at_index (GTK_LIST_BOX (listbox), i++);
+//  while (row && !gtk_widget_get_visible (GTK_WIDGET (row)));
+
+  if (self->view == CC_PANEL_LIST_SEARCH)
+    row = gtk_list_box_get_row_at_y (GTK_LIST_BOX (listbox), 0);
+  else   
+    {  
+      row = gtk_list_box_get_selected_row (GTK_LIST_BOX (listbox));
+      if (!row)
+        row = gtk_list_box_get_row_at_index (GTK_LIST_BOX (listbox), 0);
+    }
 
   /* If the row is valid, activate it */
   if (row)
diff --git a/shell/cc-panel-loader.c b/shell/cc-panel-loader.c
index f4e15b8..e1d1946 100644
--- a/shell/cc-panel-loader.c
+++ b/shell/cc-panel-loader.c
@@ -1,6 +1,7 @@
 /* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
 /*
  * Copyright (c) 2012 Giovanni Campagna <scampa.giovanni@gmail.com>
+ * Copyright (c) 2019 gooroom <gooroom@gooroom.kr>
  *
  * The Control Center is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by the
@@ -47,7 +48,7 @@ extern GType cc_mouse_panel_get_type (void);
 extern GType cc_network_panel_get_type (void);
 extern GType cc_wifi_panel_get_type (void);
 #endif /* BUILD_NETWORK */
-extern GType cc_notifications_panel_get_type (void);
+//extern GType cc_notifications_panel_get_type (void);
 extern GType cc_goa_panel_get_type (void);
 extern GType cc_power_panel_get_type (void);
 extern GType cc_printers_panel_get_type (void);
@@ -56,6 +57,8 @@ extern GType cc_removable_media_panel_get_type (void);
 extern GType cc_search_panel_get_type (void);
 extern GType cc_sharing_panel_get_type (void);
 extern GType cc_sound_panel_get_type (void);
+extern GType cc_font_panel_get_type (void);
+extern GType cc_themes_panel_get_type (void);
 #ifdef BUILD_THUNDERBOLT
 extern GType cc_bolt_panel_get_type (void);
 #endif /* BUILD_THUNDERBOLT */
@@ -70,8 +73,6 @@ extern GType cc_microphone_panel_get_type (void);
 extern GType cc_usage_panel_get_type (void);
 extern GType cc_lock_panel_get_type (void);
 extern GType cc_diagnostics_panel_get_type (void);
-extern GType cc_font_panel_get_type (void);
-extern GType cc_themes_panel_get_type (void);
 
 /* Static init functions */
 extern void cc_diagnostics_panel_static_init_func (void);
@@ -97,6 +98,8 @@ static CcPanelLoaderVtable default_panels[] =
 #ifdef BUILD_BLUETOOTH
   PANEL_TYPE("bluetooth",        cc_bluetooth_panel_get_type,            NULL),
 #endif
+  PANEL_TYPE("font",             cc_font_panel_get_type,                 NULL),
+  PANEL_TYPE("themes",           cc_themes_panel_get_type,               NULL),
   PANEL_TYPE("camera",           cc_camera_panel_get_type,               NULL),
   PANEL_TYPE("color",            cc_color_panel_get_type,                NULL),
   PANEL_TYPE("datetime",         cc_date_time_panel_get_type,            NULL),
@@ -111,9 +114,10 @@ static CcPanelLoaderVtable default_panels[] =
   PANEL_TYPE("mouse",            cc_mouse_panel_get_type,                NULL),
 #ifdef BUILD_NETWORK
   PANEL_TYPE("network",          cc_network_panel_get_type,              NULL),
-  PANEL_TYPE("wifi",             cc_wifi_panel_get_type,                 cc_wifi_panel_static_init_func),
+  //PANEL_TYPE("wifi",             cc_wifi_panel_get_type,                 cc_wifi_panel_static_init_func),
+  PANEL_TYPE("wifi",             cc_wifi_panel_get_type,                 NULL),
 #endif
-  PANEL_TYPE("notifications",    cc_notifications_panel_get_type,        NULL),
+  //PANEL_TYPE("notifications",    cc_notifications_panel_get_type,        NULL),
   PANEL_TYPE("online-accounts",  cc_goa_panel_get_type,                  NULL),
   PANEL_TYPE("power",            cc_power_panel_get_type,                NULL),
   PANEL_TYPE("printers",         cc_printers_panel_get_type,             NULL),
@@ -131,8 +135,6 @@ static CcPanelLoaderVtable default_panels[] =
 #ifdef BUILD_WACOM
   PANEL_TYPE("wacom",            cc_wacom_panel_get_type,                cc_wacom_panel_static_init_func),
 #endif
-  PANEL_TYPE("font",             cc_font_panel_get_type,                 NULL),
-  PANEL_TYPE("themes",           cc_themes_panel_get_type,               NULL),
 };
 
 /* Override for the panel vtable. When NULL, the default_panels will
@@ -267,6 +269,7 @@ cc_panel_loader_fill_model (CcShellModel *model)
       g_autoptr(GDesktopAppInfo) app = NULL;
       g_autofree gchar *desktop_name = NULL;
       gint category;
+      gboolean isVisible = TRUE;
 
       desktop_name = g_strconcat ("gnome-", panels_vtable[i].name, "-panel.desktop", NULL);
       app = g_desktop_app_info_new (desktop_name);
diff --git a/shell/cc-shell-model.c b/shell/cc-shell-model.c
index 1077c6a..d3b1555 100644
--- a/shell/cc-shell-model.c
+++ b/shell/cc-shell-model.c
@@ -1,6 +1,7 @@
 /*
  * Copyright (c) 2009, 2010 Intel, Inc.
  * Copyright (c) 2010 Red Hat, Inc.
+ * Copyright (c) 2019 gooroom <gooroom@gooroom.kr>
  *
  * The Control Center is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by the
@@ -381,6 +382,36 @@ cc_shell_model_set_sort_terms (CcShellModel  *self,
                                            NULL);
 }
 
+gboolean
+cc_shell_model_get_panel_visibility (CcShellModel *self,
+                                          const gchar  *id)
+{
+  GtkTreeModel *model;
+  GtkTreeIter iter;
+  gboolean valid;
+  gboolean visibility = FALSE;
+
+  g_return_if_fail (CC_IS_SHELL_MODEL (self));
+  
+  model = GTK_TREE_MODEL (self);
+  valid = gtk_tree_model_get_iter_first (model, &iter);
+  while (valid)
+  {
+    g_autofree gchar *item_id = NULL;
+
+    gtk_tree_model_get (model, &iter, COL_ID, &item_id, -1);
+    if (g_str_equal (id, item_id))
+      break;
+
+    valid = gtk_tree_model_iter_next (model, &iter);
+  }
+  g_assert (valid);
+
+  gtk_tree_model_get (GTK_LIST_STORE (self), &iter, COL_VISIBILITY, visibility, -1);
+
+  return visibility;
+}
+
 void
 cc_shell_model_set_panel_visibility (CcShellModel      *self,
                                      const gchar       *id,
diff --git a/shell/org.gnome.ControlCenter.gschema.xml b/shell/org.gnome.ControlCenter.gschema.xml
index 8651b38..25e167e 100644
--- a/shell/org.gnome.ControlCenter.gschema.xml
+++ b/shell/org.gnome.ControlCenter.gschema.xml
@@ -16,7 +16,7 @@
       </description>
     </key>
     <key name="whitelist-panels" type="as">
-      <default>['bluetooth', 'background', 'search', 'region', 'universal-access', 'font', 'online-accounts', 'privacy', 'sharing', 'sound', 'power', 'network', 'wifi', 'wacom', 'display', 'keyboard', 'printers', 'mouse', 'removable-media', 'thunderbolt', 'color', 'info-overview', 'datetime', 'user-accounts', 'default-apps', 'themes']</default>
+      <default>['bluetooth', 'background', 'search', 'region', 'universal-access', 'font', 'online-accounts', 'privacy', 'location', 'camera', 'microphone', 'usage', 'lock', 'sharing', 'sound', 'power', 'network', 'wifi', 'wacom', 'display', 'keyboard', 'printers', 'mouse', 'removable-media', 'thunderbolt', 'color', 'info-overview', 'datetime', 'user-accounts', 'default-apps', 'themes']</default>
       <summary>Show settings list</summary>
       <description>Show side panel list that matches the User settings values.</description>
     </key>
-- 
2.20.1
