From 0039657f40bb130a7dfb002f685615a57f177e45 Mon Sep 17 00:00:00 2001
From: JeongHaeRyong <jeong89@gooroom.kr>
Date: Wed, 1 Apr 2020 18:33:14 +0900
Subject: [PATCH] gooroom cutomize font chooser from gtk

Change-Id: Ie607b73bc95a102313cc1f1ae6e988d3f09896d5
---
 panels/font/cc-font-button.c          | 1449 +++++++++++++++
 panels/font/cc-font-button.h          |  102 +
 panels/font/cc-font-chooser-dialog.c  |  268 +++
 panels/font/cc-font-chooser-dialog.h  |   53 +
 panels/font/cc-font-chooser-private.h |   36 +
 panels/font/cc-font-chooser-utils.c   |  200 ++
 panels/font/cc-font-chooser-utils.h   |   43 +
 panels/font/cc-font-chooser-widget.c  | 2475 +++++++++++++++++++++++++
 panels/font/cc-font-chooser-widget.h  |   49 +
 panels/font/cc-font-chooser.c         |  590 ++++++
 panels/font/cc-font-chooser.h         |  144 ++
 panels/font/cc-font-define.h          |   61 +
 panels/font/cc-font-panel.c           |   71 +-
 panels/font/cc-font-panel.h           |    2 +
 panels/font/font-button.ui            |   52 +
 panels/font/font-chooser-dialog.ui    |   50 +
 panels/font/font-chooser-widget.ui    |  338 ++++
 panels/font/font.gresource.xml        |    3 +
 panels/font/font.ui                   |  125 +-
 panels/font/meson.build               |   10 +-
 po/POTFILES.in                        |    2 +
 po/en.po                              |   28 +
 po/en_GB.po                           |   22 +
 po/ko.po                              |   28 +
 24 files changed, 6051 insertions(+), 150 deletions(-)
 create mode 100644 panels/font/cc-font-button.c
 create mode 100644 panels/font/cc-font-button.h
 create mode 100644 panels/font/cc-font-chooser-dialog.c
 create mode 100644 panels/font/cc-font-chooser-dialog.h
 create mode 100644 panels/font/cc-font-chooser-private.h
 create mode 100644 panels/font/cc-font-chooser-utils.c
 create mode 100644 panels/font/cc-font-chooser-utils.h
 create mode 100644 panels/font/cc-font-chooser-widget.c
 create mode 100644 panels/font/cc-font-chooser-widget.h
 create mode 100644 panels/font/cc-font-chooser.c
 create mode 100644 panels/font/cc-font-chooser.h
 create mode 100644 panels/font/cc-font-define.h
 create mode 100644 panels/font/font-button.ui
 create mode 100644 panels/font/font-chooser-dialog.ui
 create mode 100644 panels/font/font-chooser-widget.ui

diff --git a/panels/font/cc-font-button.c b/panels/font/cc-font-button.c
new file mode 100644
index 0000000..674197c
--- /dev/null
+++ b/panels/font/cc-font-button.c
@@ -0,0 +1,1449 @@
+/* 
+ * GTK - The GIMP Toolkit
+ * Copyright (C) 1998 David Abilleira Freijeiro <odaf@nexo.es>
+ * All rights reserved.
+ * Copyright (C) 2020 gooroom <gooroom@gooroom.kr>
+ *
+ * Based on gnome-color-picker by Federico Mena <federico@nuclecu.unam.mx>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library. If not, see <http://www.gnu.org/licenses/>.
+ */
+ /*
+ * Modified by the GTK+ Team and others 2003.  See the AUTHORS
+ * file for a list of people on the GTK+ Team.  See the ChangeLog
+ * files for a list of changes.  These files are distributed with
+ * GTK+ at ftp://ftp.gtk.org/pub/gtk/.
+ */
+
+#include "config.h"
+
+#include <gtk/gtk.h>
+#include <glib.h>
+#include <glib/gi18n.h>
+
+#include "cc-font-button.h"
+#include "cc-font-chooser.h"
+#include "cc-font-define.h"
+#include "cc-font-chooser-dialog.h"
+
+/**
+ * SECTION:gtkfontbutton
+ * @Short_description: A button to launch a font chooser dialog
+ * @Title: CcFontButton
+ * @See_also: #CcFontChooserDialog, #GtkColorButton.
+ *
+ * The #CcFontButton is a button which displays the currently selected
+ * font an allows to open a font chooser dialog to change the font.
+ * It is suitable widget for selecting a font in a preference dialog.
+ *
+ * # CSS nodes
+ *
+ * CcFontButton has a single CSS node with name button and style class .font.
+ */
+
+
+struct _CcFontButtonPrivate
+{
+  gchar         *title;
+
+  gchar         *fontname;
+
+  guint         use_font : 1;
+  guint         use_size : 1;
+  guint         show_style : 1;
+  guint         show_size : 1;
+  guint         show_preview_entry : 1;
+
+  GtkWidget     *font_dialog;
+  GtkWidget     *font_label;
+  GtkWidget     *size_label;
+  GtkWidget     *font_size_box;
+
+  PangoFontDescription *font_desc;
+  PangoFontFamily      *font_family;
+  PangoFontFace        *font_face;
+  PangoFontMap         *font_map;
+  gint                  font_size;
+  char                 *font_features;
+  PangoLanguage        *language;
+  gchar                *preview_text;
+  CcFontFilterFunc     font_filter;
+  gpointer              font_filter_data;
+  GDestroyNotify        font_filter_data_destroy;
+  GtkCssProvider       *provider;
+
+  CcFontChooserLevel   level;
+};
+
+/* Signals */
+enum
+{
+  FONT_SET,
+  LAST_SIGNAL
+};
+
+enum 
+{
+  PROP_0,
+  PROP_TITLE,
+  PROP_FONT_NAME,
+  PROP_USE_FONT,
+  PROP_USE_SIZE,
+  PROP_SHOW_STYLE,
+  PROP_SHOW_SIZE
+};
+
+/* Prototypes */
+static void cc_font_button_finalize               (GObject            *object);
+static void cc_font_button_get_property           (GObject            *object,
+                                                    guint               param_id,
+                                                    GValue             *value,
+                                                    GParamSpec         *pspec);
+static void cc_font_button_set_property           (GObject            *object,
+                                                    guint               param_id,
+                                                    const GValue       *value,
+                                                    GParamSpec         *pspec);
+
+static void cc_font_button_clicked                 (GtkButton         *button);
+
+/* Dialog response functions */
+static void response_cb                             (GtkDialog         *dialog,
+                                                     gint               response_id,
+                                                     gpointer           data);
+static void dialog_destroy                          (GtkWidget         *widget,
+                                                     gpointer           data);
+
+/* Auxiliary functions */
+static void cc_font_button_label_use_font          (CcFontButton     *gfs);
+static void cc_font_button_update_font_info        (CcFontButton     *gfs);
+
+static void        font_button_set_font_name (CcFontButton *button,
+                                              const char    *fontname);
+static void        cc_font_button_set_level     (CcFontButton       *font_button,
+                                                  CcFontChooserLevel  level);
+static void        cc_font_button_set_language  (CcFontButton *button,
+                                                  const char    *language);
+
+static guint font_button_signals[LAST_SIGNAL] = { 0 };
+
+static void
+clear_font_data (CcFontButton *font_button)
+{
+  CcFontButtonPrivate *priv = font_button->priv;
+
+  if (priv->font_family)
+    g_object_unref (priv->font_family);
+  priv->font_family = NULL;
+
+  if (priv->font_face)
+    g_object_unref (priv->font_face);
+  priv->font_face = NULL;
+
+  if (priv->font_desc)
+    pango_font_description_free (priv->font_desc);
+  priv->font_desc = NULL;
+
+  g_free (priv->fontname);
+  priv->fontname = NULL;
+
+  g_free (priv->font_features);
+  priv->font_features = NULL;
+}
+
+static void
+clear_font_filter_data (CcFontButton *font_button)
+{
+  CcFontButtonPrivate *priv = font_button->priv;
+
+  if (priv->font_filter_data_destroy)
+    priv->font_filter_data_destroy (priv->font_filter_data);
+  priv->font_filter = NULL;
+  priv->font_filter_data = NULL;
+  priv->font_filter_data_destroy = NULL;
+}
+
+static gboolean
+font_description_style_equal (const PangoFontDescription *a,
+                              const PangoFontDescription *b)
+{
+  return (pango_font_description_get_weight (a) == pango_font_description_get_weight (b) &&
+          pango_font_description_get_style (a) == pango_font_description_get_style (b) &&
+          pango_font_description_get_stretch (a) == pango_font_description_get_stretch (b) &&
+          pango_font_description_get_variant (a) == pango_font_description_get_variant (b));
+}
+
+static void
+cc_font_button_update_font_data (CcFontButton *font_button)
+{
+  CcFontButtonPrivate *priv = font_button->priv;
+  PangoFontFamily **families;
+  PangoFontFace **faces;
+  gint n_families, n_faces, i;
+  const gchar *family;
+
+  g_assert (priv->font_desc != NULL);
+
+  priv->fontname = pango_font_description_to_string (priv->font_desc);
+
+  family = pango_font_description_get_family (priv->font_desc);
+  if (family == NULL)
+    return;
+
+  n_families = 0;
+  families = NULL;
+  pango_context_list_families (gtk_widget_get_pango_context (GTK_WIDGET (font_button)),
+                               &families, &n_families);
+  n_faces = 0;
+  faces = NULL;
+  for (i = 0; i < n_families; i++)
+    {
+      const gchar *name = pango_font_family_get_name (families[i]);
+
+      if (!g_ascii_strcasecmp (name, family))
+        {
+          priv->font_family = g_object_ref (families[i]);
+
+          pango_font_family_list_faces (families[i], &faces, &n_faces);
+          break;
+        }
+    }
+  g_free (families);
+
+  for (i = 0; i < n_faces; i++)
+    {
+      PangoFontDescription *tmp_desc = pango_font_face_describe (faces[i]);
+
+      if (font_description_style_equal (tmp_desc, priv->font_desc))
+        {
+          priv->font_face = g_object_ref (faces[i]);
+
+          pango_font_description_free (tmp_desc);
+          break;
+        }
+      else
+        pango_font_description_free (tmp_desc);
+    }
+
+  g_free (faces);
+}
+
+static gchar *
+cc_font_button_get_preview_text (CcFontButton *font_button)
+{
+  CcFontButtonPrivate *priv = font_button->priv;
+
+  if (priv->font_dialog)
+    return cc_font_chooser_get_preview_text (CC_FONT_CHOOSER (priv->font_dialog));
+
+  return g_strdup (priv->preview_text);
+}
+
+static void
+cc_font_button_set_preview_text (CcFontButton *font_button,
+                                  const gchar   *preview_text)
+{
+  CcFontButtonPrivate *priv = font_button->priv;
+
+  if (priv->font_dialog)
+    {
+      cc_font_chooser_set_preview_text (CC_FONT_CHOOSER (priv->font_dialog),
+                                         preview_text);
+      return;
+    }
+
+  g_free (priv->preview_text);
+  priv->preview_text = g_strdup (preview_text);
+}
+
+
+static gboolean
+cc_font_button_get_show_preview_entry (CcFontButton *font_button)
+{
+  CcFontButtonPrivate *priv = font_button->priv;
+
+  if (priv->font_dialog)
+    return cc_font_chooser_get_show_preview_entry (CC_FONT_CHOOSER (priv->font_dialog));
+
+  return priv->show_preview_entry;
+}
+
+static void
+cc_font_button_set_show_preview_entry (CcFontButton *font_button,
+                                        gboolean       show)
+{
+  CcFontButtonPrivate *priv = font_button->priv;
+
+  show = show != FALSE;
+
+  if (priv->show_preview_entry != show)
+    {
+      priv->show_preview_entry = show;
+      if (priv->font_dialog)
+        cc_font_chooser_set_show_preview_entry (CC_FONT_CHOOSER (priv->font_dialog), show);
+      g_object_notify (G_OBJECT (font_button), "show-preview-entry");
+    }
+}
+
+static PangoFontFamily *
+cc_font_button_font_chooser_get_font_family (CcFontChooser *chooser)
+{
+  CcFontButton *font_button = CC_FONT_BUTTON (chooser);
+  CcFontButtonPrivate *priv = font_button->priv;
+
+  return priv->font_family;
+}
+
+static PangoFontFace *
+cc_font_button_font_chooser_get_font_face (CcFontChooser *chooser)
+{
+  CcFontButton *font_button = CC_FONT_BUTTON (chooser);
+  CcFontButtonPrivate *priv = font_button->priv;
+
+  return priv->font_face;
+}
+
+static int
+cc_font_button_font_chooser_get_font_size (CcFontChooser *chooser)
+{
+  CcFontButton *font_button = CC_FONT_BUTTON (chooser);
+  CcFontButtonPrivate *priv = font_button->priv;
+
+  return priv->font_size;
+}
+
+static void
+cc_font_button_font_chooser_set_filter_func (CcFontChooser    *chooser,
+                                              CcFontFilterFunc  filter_func,
+                                              gpointer           filter_data,
+                                              GDestroyNotify     data_destroy)
+{
+  CcFontButton *font_button = CC_FONT_BUTTON (chooser);
+  CcFontButtonPrivate *priv = font_button->priv;
+
+  if (priv->font_dialog)
+    {
+      cc_font_chooser_set_filter_func (CC_FONT_CHOOSER (priv->font_dialog),
+                                        filter_func,
+                                        filter_data,
+                                        data_destroy);
+      return;
+    }
+
+  clear_font_filter_data (font_button);
+  priv->font_filter = filter_func;
+  priv->font_filter_data = filter_data;
+  priv->font_filter_data_destroy = data_destroy;
+}
+
+static void
+cc_font_button_take_font_desc (CcFontButton        *font_button,
+                                PangoFontDescription *font_desc)
+{
+  CcFontButtonPrivate *priv = font_button->priv;
+  GObject *object = G_OBJECT (font_button);
+
+  if (priv->font_desc && font_desc &&
+      pango_font_description_equal (priv->font_desc, font_desc))
+    {
+      pango_font_description_free (font_desc);
+      return;
+    }
+
+  g_object_freeze_notify (object);
+
+  clear_font_data (font_button);
+
+  if (font_desc)
+    priv->font_desc = font_desc; /* adopted */
+  else
+    priv->font_desc = pango_font_description_from_string (_("Sans 12"));
+
+  if (pango_font_description_get_size_is_absolute (priv->font_desc))
+    priv->font_size = pango_font_description_get_size (priv->font_desc);
+  else
+    priv->font_size = pango_font_description_get_size (priv->font_desc) / PANGO_SCALE;
+
+  cc_font_button_update_font_data (font_button);
+  cc_font_button_update_font_info (font_button);
+
+  if (priv->font_dialog)
+    cc_font_chooser_set_font_desc (CC_FONT_CHOOSER (priv->font_dialog),
+                                    priv->font_desc);
+
+  g_object_notify (G_OBJECT (font_button), "font");
+  g_object_notify (G_OBJECT (font_button), "font-desc");
+  g_object_notify (G_OBJECT (font_button), "font-name");
+
+  g_object_thaw_notify (object);
+}
+
+static const PangoFontDescription *
+cc_font_button_get_font_desc (CcFontButton *font_button)
+{
+  return font_button->priv->font_desc;
+}
+
+static void
+cc_font_button_font_chooser_set_font_map (CcFontChooser *chooser,
+                                           PangoFontMap   *font_map)
+{
+  CcFontButton *font_button = CC_FONT_BUTTON (chooser);
+
+  if (g_set_object (&font_button->priv->font_map, font_map))
+    {
+      PangoContext *context;
+
+      if (!font_map)
+        font_map = pango_cairo_font_map_get_default ();
+
+      context = gtk_widget_get_pango_context (font_button->priv->font_label);
+      pango_context_set_font_map (context, font_map);
+    }
+}
+
+static PangoFontMap *
+cc_font_button_font_chooser_get_font_map (CcFontChooser *chooser)
+{
+  CcFontButton *font_button = CC_FONT_BUTTON (chooser);
+
+  return font_button->priv->font_map;
+}
+
+static void
+cc_font_button_font_chooser_notify (GObject    *object,
+                                     GParamSpec *pspec,
+                                     gpointer    user_data)
+{
+  /* We do not forward the notification of the "font" property to the dialog! */
+  if (pspec->name == "preview-text" ||
+      pspec->name == "show-preview-entry")
+    g_object_notify_by_pspec (user_data, pspec);
+}
+
+static void
+cc_font_button_font_chooser_iface_init (CcFontChooserIface *iface)
+{
+  iface->get_font_family = cc_font_button_font_chooser_get_font_family;
+  iface->get_font_face = cc_font_button_font_chooser_get_font_face;
+  iface->get_font_size = cc_font_button_font_chooser_get_font_size;
+  iface->set_filter_func = cc_font_button_font_chooser_set_filter_func;
+  iface->set_font_map = cc_font_button_font_chooser_set_font_map;
+  iface->get_font_map = cc_font_button_font_chooser_get_font_map;
+}
+
+G_DEFINE_TYPE_WITH_CODE (CcFontButton, cc_font_button, GTK_TYPE_BUTTON,
+                         G_ADD_PRIVATE (CcFontButton)
+                         G_IMPLEMENT_INTERFACE (CC_TYPE_FONT_CHOOSER,
+                                                cc_font_button_font_chooser_iface_init))
+
+static void
+cc_font_button_class_init (CcFontButtonClass *klass)
+{
+  GObjectClass *gobject_class;
+  GtkWidgetClass *widget_class;
+  GtkButtonClass *button_class;
+  
+  gobject_class = (GObjectClass *) klass;
+  widget_class = (GtkWidgetClass *) klass;
+  button_class = (GtkButtonClass *) klass;
+
+  gobject_class->finalize = cc_font_button_finalize;
+  gobject_class->set_property = cc_font_button_set_property;
+  gobject_class->get_property = cc_font_button_get_property;
+  
+  button_class->clicked = cc_font_button_clicked;
+  
+  klass->font_set = NULL;
+
+  _cc_font_chooser_install_properties (gobject_class);
+
+  /**
+   * CcFontButton:title:
+   * 
+   * The title of the font chooser dialog.
+   *
+   * Since: 2.4
+   */
+  g_object_class_install_property (gobject_class,
+                                   PROP_TITLE,
+                                   g_param_spec_string ("title",
+                                                        "Title",
+                                                        "The title of the font chooser dialog",
+                                                        _("Pick a Font"),
+                                                        CC_PARAM_READWRITE));
+
+  /**
+   * CcFontButton:font-name:
+   * 
+   * The name of the currently selected font.
+   *
+   * Since: 2.4
+   *
+   * Deprecated: 3.22: Use the #CcFontChooser::font property instead
+   */
+  g_object_class_install_property (gobject_class,
+                                   PROP_FONT_NAME,
+                                   g_param_spec_string ("font-name",
+                                                        "Font name",
+                                                        "The name of the selected font",
+                                                        _("Sans 12"),
+                                                        CC_PARAM_READWRITE | G_PARAM_DEPRECATED));
+
+  /**
+   * CcFontButton:use-font:
+   * 
+   * If this property is set to %TRUE, the label will be drawn 
+   * in the selected font.
+   *
+   * Since: 2.4
+   */
+  g_object_class_install_property (gobject_class,
+                                   PROP_USE_FONT,
+                                   g_param_spec_boolean ("use-font",
+                                                         "Use font in label",
+                                                         "Whether the label is drawn in the selected font",
+                                                         FALSE,
+                                                         CC_PARAM_READWRITE|G_PARAM_EXPLICIT_NOTIFY));
+
+  /**
+   * CcFontButton:use-size:
+   * 
+   * If this property is set to %TRUE, the label will be drawn 
+   * with the selected font size.
+   *
+   * Since: 2.4
+   */
+  g_object_class_install_property (gobject_class,
+                                   PROP_USE_SIZE,
+                                   g_param_spec_boolean ("use-size",
+                                                         "Use size in label",
+                                                         "Whether the label is drawn with the selected font size",
+                                                         FALSE,
+                                                         CC_PARAM_READWRITE|G_PARAM_EXPLICIT_NOTIFY));
+
+  /**
+   * CcFontButton:show-style:
+   * 
+   * If this property is set to %TRUE, the name of the selected font style 
+   * will be shown in the label. For a more WYSIWYG way to show the selected 
+   * style, see the ::use-font property. 
+   *
+   * Since: 2.4
+   */
+  g_object_class_install_property (gobject_class,
+                                   PROP_SHOW_STYLE,
+                                   g_param_spec_boolean ("show-style",
+                                                         "Show style",
+                                                         "Whether the selected font style is shown in the label",
+                                                         TRUE,
+                                                         CC_PARAM_READWRITE|G_PARAM_EXPLICIT_NOTIFY));
+  /**
+   * CcFontButton:show-size:
+   * 
+   * If this property is set to %TRUE, the selected font size will be shown 
+   * in the label. For a more WYSIWYG way to show the selected size, see the 
+   * ::use-size property. 
+   *
+   * Since: 2.4
+   */
+  g_object_class_install_property (gobject_class,
+                                   PROP_SHOW_SIZE,
+                                   g_param_spec_boolean ("show-size",
+                                                         "Show size",
+                                                         "Whether selected font size is shown in the label",
+                                                         TRUE,
+                                                         CC_PARAM_READWRITE|G_PARAM_EXPLICIT_NOTIFY));
+
+  /**
+   * CcFontButton::font-set:
+   * @widget: the object which received the signal.
+   * 
+   * The ::font-set signal is emitted when the user selects a font. 
+   * When handling this signal, use cc_font_chooser_get_font()
+   * to find out which font was just selected.
+   *
+   * Note that this signal is only emitted when the user
+   * changes the font. If you need to react to programmatic font changes
+   * as well, use the notify::font signal.
+   *
+   * Since: 2.4
+   */
+  font_button_signals[FONT_SET] = g_signal_new ("font-set",
+                                                G_TYPE_FROM_CLASS (gobject_class),
+                                                G_SIGNAL_RUN_FIRST,
+                                                G_STRUCT_OFFSET (CcFontButtonClass, font_set),
+                                                NULL, NULL,
+                                                g_cclosure_marshal_VOID__VOID,
+                                                G_TYPE_NONE, 0);
+
+  /* Bind class to template
+   */
+  gtk_widget_class_set_template_from_resource (widget_class, "/org/gnome/control-center/font/font-button.ui");
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontButton, font_label);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontButton, size_label);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontButton, font_size_box);
+
+  gtk_widget_class_set_css_name (widget_class, "button");
+}
+
+static void
+cc_font_button_init (CcFontButton *font_button)
+{
+  GtkStyleContext *context;
+
+  font_button->priv = cc_font_button_get_instance_private (font_button);
+
+  /* Initialize fields */
+  font_button->priv->use_font = FALSE;
+  font_button->priv->use_size = FALSE;
+  font_button->priv->show_style = TRUE;
+  font_button->priv->show_size = TRUE;
+  font_button->priv->show_preview_entry = TRUE;
+  font_button->priv->font_dialog = NULL;
+  font_button->priv->font_family = NULL;
+  font_button->priv->font_face = NULL;
+  font_button->priv->font_size = -1;
+  font_button->priv->title = g_strdup (_("Pick a Font"));
+  font_button->priv->level = CC_FONT_CHOOSER_LEVEL_FAMILY |
+                             CC_FONT_CHOOSER_LEVEL_STYLE |
+                             CC_FONT_CHOOSER_LEVEL_SIZE;
+  font_button->priv->language = pango_language_get_default ();
+
+  gtk_widget_init_template (GTK_WIDGET (font_button));
+
+  cc_font_button_take_font_desc (font_button, NULL);
+
+  context = gtk_widget_get_style_context (GTK_WIDGET (font_button));
+  gtk_style_context_add_class (context, "font");
+}
+
+static void
+cc_font_button_finalize (GObject *object)
+{
+  CcFontButton *font_button = CC_FONT_BUTTON (object);
+  CcFontButtonPrivate *priv = font_button->priv;
+
+  if (priv->font_dialog != NULL) 
+    gtk_widget_destroy (priv->font_dialog);
+
+  g_free (priv->title);
+
+  clear_font_data (font_button);
+  clear_font_filter_data (font_button);
+
+  g_free (priv->preview_text);
+
+  g_clear_object (&priv->provider);
+
+  G_OBJECT_CLASS (cc_font_button_parent_class)->finalize (object);
+}
+
+static void
+cc_font_button_set_property (GObject      *object,
+                              guint         param_id,
+                              const GValue *value,
+                              GParamSpec   *pspec)
+{
+  CcFontButton *font_button = CC_FONT_BUTTON (object);
+
+  switch (param_id) 
+    {
+    case CC_FONT_CHOOSER_PROP_PREVIEW_TEXT:
+      cc_font_button_set_preview_text (font_button, g_value_get_string (value));
+      break;
+    case CC_FONT_CHOOSER_PROP_SHOW_PREVIEW_ENTRY:
+      cc_font_button_set_show_preview_entry (font_button, g_value_get_boolean (value));
+      break;
+    case PROP_TITLE:
+      cc_font_button_set_title (font_button, g_value_get_string (value));
+      break;
+    case CC_FONT_CHOOSER_PROP_FONT_DESC:
+      cc_font_button_take_font_desc (font_button, g_value_dup_boxed (value));
+      break;
+    case CC_FONT_CHOOSER_PROP_LANGUAGE:
+      cc_font_button_set_language (font_button, g_value_get_string (value));
+      break;
+    case CC_FONT_CHOOSER_PROP_LEVEL:
+      cc_font_button_set_level (font_button, g_value_get_flags (value));
+      break;
+    case CC_FONT_CHOOSER_PROP_FONT:
+    case PROP_FONT_NAME:
+      font_button_set_font_name (font_button, g_value_get_string (value));
+      break;
+    case PROP_USE_FONT:
+      cc_font_button_set_use_font (font_button, g_value_get_boolean (value));
+      break;
+    case PROP_USE_SIZE:
+      cc_font_button_set_use_size (font_button, g_value_get_boolean (value));
+      break;
+    case PROP_SHOW_STYLE:
+      cc_font_button_set_show_style (font_button, g_value_get_boolean (value));
+      break;
+    case PROP_SHOW_SIZE:
+      cc_font_button_set_show_size (font_button, g_value_get_boolean (value));
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, param_id, pspec);
+      break;
+  }
+}
+
+static void
+cc_font_button_get_property (GObject    *object,
+                              guint       param_id,
+                              GValue     *value,
+                              GParamSpec *pspec)
+{
+  CcFontButton *font_button = CC_FONT_BUTTON (object);
+  CcFontButtonPrivate *priv = font_button->priv;
+  
+  switch (param_id) 
+    {
+    case CC_FONT_CHOOSER_PROP_PREVIEW_TEXT:
+      g_value_set_string (value, cc_font_button_get_preview_text (font_button));
+      break;
+    case CC_FONT_CHOOSER_PROP_SHOW_PREVIEW_ENTRY:
+      g_value_set_boolean (value, cc_font_button_get_show_preview_entry (font_button));
+      break;
+    case PROP_TITLE:
+      g_value_set_string (value, cc_font_button_get_title (font_button));
+      break;
+    case CC_FONT_CHOOSER_PROP_FONT_DESC:
+      g_value_set_boxed (value, cc_font_button_get_font_desc (font_button));
+      break;
+    case CC_FONT_CHOOSER_PROP_FONT_FEATURES:
+      g_value_set_string (value, priv->font_features);
+      break;
+    case CC_FONT_CHOOSER_PROP_LANGUAGE:
+      g_value_set_string (value, pango_language_to_string (priv->language));
+      break;
+    case CC_FONT_CHOOSER_PROP_LEVEL:
+      g_value_set_flags (value, priv->level);
+      break;
+    case CC_FONT_CHOOSER_PROP_FONT:
+    case PROP_FONT_NAME:
+      g_value_set_string (value, font_button->priv->fontname);
+      break;
+    case PROP_USE_FONT:
+      g_value_set_boolean (value, cc_font_button_get_use_font (font_button));
+      break;
+    case PROP_USE_SIZE:
+      g_value_set_boolean (value, cc_font_button_get_use_size (font_button));
+      break;
+    case PROP_SHOW_STYLE:
+      g_value_set_boolean (value, cc_font_button_get_show_style (font_button));
+      break;
+    case PROP_SHOW_SIZE:
+      g_value_set_boolean (value, cc_font_button_get_show_size (font_button));
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, param_id, pspec);
+      break;
+    }
+}
+
+
+/**
+ * cc_font_button_new:
+ *
+ * Creates a new font picker widget.
+ *
+ * Returns: a new font picker widget.
+ *
+ * Since: 2.4
+ */
+GtkWidget *
+cc_font_button_new (void)
+{
+  return g_object_new (CC_TYPE_FONT_BUTTON, NULL);
+}
+
+/**
+ * cc_font_button_new_with_font:
+ * @fontname: Name of font to display in font chooser dialog
+ *
+ * Creates a new font picker widget.
+ *
+ * Returns: a new font picker widget.
+ *
+ * Since: 2.4
+ */
+GtkWidget *
+cc_font_button_new_with_font (const gchar *fontname)
+{
+  return g_object_new (CC_TYPE_FONT_BUTTON, "font", fontname, NULL);
+} 
+
+/**
+ * cc_font_button_set_title:
+ * @font_button: a #CcFontButton
+ * @title: a string containing the font chooser dialog title
+ *
+ * Sets the title for the font chooser dialog.  
+ *
+ * Since: 2.4
+ */
+void
+cc_font_button_set_title (CcFontButton *font_button, 
+                           const gchar   *title)
+{
+  gchar *old_title;
+  g_return_if_fail (CC_IS_FONT_BUTTON (font_button));
+  
+  old_title = font_button->priv->title;
+  font_button->priv->title = g_strdup (title);
+  g_free (old_title);
+  
+  if (font_button->priv->font_dialog)
+    gtk_window_set_title (GTK_WINDOW (font_button->priv->font_dialog),
+                          font_button->priv->title);
+
+  g_object_notify (G_OBJECT (font_button), "title");
+} 
+
+/**
+ * cc_font_button_get_title:
+ * @font_button: a #CcFontButton
+ *
+ * Retrieves the title of the font chooser dialog.
+ *
+ * Returns: an internal copy of the title string which must not be freed.
+ *
+ * Since: 2.4
+ */
+const gchar*
+cc_font_button_get_title (CcFontButton *font_button)
+{
+  g_return_val_if_fail (CC_IS_FONT_BUTTON (font_button), NULL);
+
+  return font_button->priv->title;
+} 
+
+/**
+ * cc_font_button_get_use_font:
+ * @font_button: a #CcFontButton
+ *
+ * Returns whether the selected font is used in the label.
+ *
+ * Returns: whether the selected font is used in the label.
+ *
+ * Since: 2.4
+ */
+gboolean
+cc_font_button_get_use_font (CcFontButton *font_button)
+{
+  g_return_val_if_fail (CC_IS_FONT_BUTTON (font_button), FALSE);
+
+  return font_button->priv->use_font;
+} 
+
+/**
+ * cc_font_button_set_use_font:
+ * @font_button: a #CcFontButton
+ * @use_font: If %TRUE, font name will be written using font chosen.
+ *
+ * If @use_font is %TRUE, the font name will be written using the selected font.  
+ *
+ * Since: 2.4
+ */
+void  
+cc_font_button_set_use_font (CcFontButton *font_button,
+			      gboolean       use_font)
+{
+  g_return_if_fail (CC_IS_FONT_BUTTON (font_button));
+  
+  use_font = (use_font != FALSE);
+  
+  if (font_button->priv->use_font != use_font) 
+    {
+      font_button->priv->use_font = use_font;
+
+      cc_font_button_label_use_font (font_button);
+ 
+      g_object_notify (G_OBJECT (font_button), "use-font");
+    }
+} 
+
+
+/**
+ * cc_font_button_get_use_size:
+ * @font_button: a #CcFontButton
+ *
+ * Returns whether the selected size is used in the label.
+ *
+ * Returns: whether the selected size is used in the label.
+ *
+ * Since: 2.4
+ */
+gboolean
+cc_font_button_get_use_size (CcFontButton *font_button)
+{
+  g_return_val_if_fail (CC_IS_FONT_BUTTON (font_button), FALSE);
+
+  return font_button->priv->use_size;
+} 
+
+/**
+ * cc_font_button_set_use_size:
+ * @font_button: a #CcFontButton
+ * @use_size: If %TRUE, font name will be written using the selected size.
+ *
+ * If @use_size is %TRUE, the font name will be written using the selected size.
+ *
+ * Since: 2.4
+ */
+void  
+cc_font_button_set_use_size (CcFontButton *font_button,
+                              gboolean       use_size)
+{
+  g_return_if_fail (CC_IS_FONT_BUTTON (font_button));
+  
+  use_size = (use_size != FALSE);
+  if (font_button->priv->use_size != use_size) 
+    {
+      font_button->priv->use_size = use_size;
+
+      cc_font_button_label_use_font (font_button);
+
+      g_object_notify (G_OBJECT (font_button), "use-size");
+    }
+} 
+
+/**
+ * cc_font_button_get_show_style:
+ * @font_button: a #CcFontButton
+ * 
+ * Returns whether the name of the font style will be shown in the label.
+ * 
+ * Returns: whether the font style will be shown in the label.
+ *
+ * Since: 2.4
+ **/
+gboolean 
+cc_font_button_get_show_style (CcFontButton *font_button)
+{
+  g_return_val_if_fail (CC_IS_FONT_BUTTON (font_button), FALSE);
+
+  return font_button->priv->show_style;
+}
+
+/**
+ * cc_font_button_set_show_style:
+ * @font_button: a #CcFontButton
+ * @show_style: %TRUE if font style should be displayed in label.
+ *
+ * If @show_style is %TRUE, the font style will be displayed along with name of the selected font.
+ *
+ * Since: 2.4
+ */
+void
+cc_font_button_set_show_style (CcFontButton *font_button,
+                                gboolean       show_style)
+{
+  g_return_if_fail (CC_IS_FONT_BUTTON (font_button));
+  
+  show_style = (show_style != FALSE);
+  if (font_button->priv->show_style != show_style) 
+    {
+      font_button->priv->show_style = show_style;
+      
+      cc_font_button_update_font_info (font_button);
+  
+      g_object_notify (G_OBJECT (font_button), "show-style");
+    }
+} 
+
+
+/**
+ * cc_font_button_get_show_size:
+ * @font_button: a #CcFontButton
+ * 
+ * Returns whether the font size will be shown in the label.
+ * 
+ * Returns: whether the font size will be shown in the label.
+ *
+ * Since: 2.4
+ **/
+gboolean 
+cc_font_button_get_show_size (CcFontButton *font_button)
+{
+  g_return_val_if_fail (CC_IS_FONT_BUTTON (font_button), FALSE);
+
+  return font_button->priv->show_size;
+}
+
+/**
+ * cc_font_button_set_show_size:
+ * @font_button: a #CcFontButton
+ * @show_size: %TRUE if font size should be displayed in dialog.
+ *
+ * If @show_size is %TRUE, the font size will be displayed along with the name of the selected font.
+ *
+ * Since: 2.4
+ */
+void
+cc_font_button_set_show_size (CcFontButton *font_button,
+                               gboolean       show_size)
+{
+  g_return_if_fail (CC_IS_FONT_BUTTON (font_button));
+  
+  show_size = (show_size != FALSE);
+
+  if (font_button->priv->show_size != show_size) 
+    {
+      font_button->priv->show_size = show_size;
+
+      if (font_button->priv->show_size)
+	gtk_widget_show (font_button->priv->font_size_box);
+      else
+	gtk_widget_hide (font_button->priv->font_size_box);
+      
+      cc_font_button_update_font_info (font_button);
+
+      g_object_notify (G_OBJECT (font_button), "show-size");
+    }
+} 
+
+
+/**
+ * cc_font_button_get_font_name:
+ * @font_button: a #CcFontButton
+ *
+ * Retrieves the name of the currently selected font. This name includes
+ * style and size information as well. If you want to render something
+ * with the font, use this string with pango_font_description_from_string() .
+ * If you’re interested in peeking certain values (family name,
+ * style, size, weight) just query these properties from the
+ * #PangoFontDescription object.
+ *
+ * Returns: an internal copy of the font name which must not be freed.
+ *
+ * Since: 2.4
+ * Deprecated: 3.22: Use cc_font_chooser_get_font() instead
+ */
+const gchar *
+cc_font_button_get_font_name (CcFontButton *font_button)
+{
+  g_return_val_if_fail (CC_IS_FONT_BUTTON (font_button), NULL);
+
+  return font_button->priv->fontname;
+}
+
+static void
+font_button_set_font_name (CcFontButton *font_button,
+                           const char    *fontname)
+{
+  PangoFontDescription *font_desc;
+
+  font_desc = pango_font_description_from_string (fontname);
+  cc_font_button_take_font_desc (font_button, font_desc);
+}
+
+/**
+ * cc_font_button_set_font_name:
+ * @font_button: a #CcFontButton
+ * @fontname: Name of font to display in font chooser dialog
+ *
+ * Sets or updates the currently-displayed font in font picker dialog.
+ *
+ * Returns: %TRUE
+ *
+ * Since: 2.4
+ * Deprecated: 3.22: Use cc_font_chooser_set_font() instead
+ */
+gboolean 
+cc_font_button_set_font_name (CcFontButton *font_button,
+                               const gchar    *fontname)
+{
+  g_return_val_if_fail (CC_IS_FONT_BUTTON (font_button), FALSE);
+  g_return_val_if_fail (fontname != NULL, FALSE);
+
+  font_button_set_font_name (font_button, fontname);
+
+  return TRUE;
+}
+
+static void
+cc_font_button_clicked (GtkButton *button)
+{
+  CcFontChooser *font_dialog;
+  CcFontButton  *font_button = CC_FONT_BUTTON (button);
+  CcFontButtonPrivate *priv = font_button->priv;
+  gboolean test;
+  
+  if (!font_button->priv->font_dialog) 
+    {
+      GtkWidget *parent;
+      
+      parent = gtk_widget_get_toplevel (GTK_WIDGET (font_button));
+
+      priv->font_dialog = cc_font_chooser_dialog_new (priv->title, NULL);
+      font_dialog = CC_FONT_CHOOSER (font_button->priv->font_dialog);
+
+      if (priv->font_map)
+        cc_font_chooser_set_font_map (font_dialog, priv->font_map);
+      cc_font_chooser_set_show_preview_entry (font_dialog, priv->show_preview_entry);
+      cc_font_chooser_set_level (CC_FONT_CHOOSER (font_dialog), priv->level);
+      cc_font_chooser_set_language (CC_FONT_CHOOSER (font_dialog), pango_language_to_string 
+(priv->language));
+
+      if (priv->preview_text)
+        {
+          cc_font_chooser_set_preview_text (font_dialog, priv->preview_text);
+          g_free (priv->preview_text);
+          priv->preview_text = NULL;
+        }
+
+      if (priv->font_filter)
+        {
+          cc_font_chooser_set_filter_func (font_dialog,
+                                            priv->font_filter,
+                                            priv->font_filter_data,
+                                            priv->font_filter_data_destroy);
+          priv->font_filter = NULL;
+          priv->font_filter_data = NULL;
+          priv->font_filter_data_destroy = NULL;
+        }
+
+      if (gtk_widget_is_toplevel (parent) && GTK_IS_WINDOW (parent))
+        {
+          if (GTK_WINDOW (parent) != gtk_window_get_transient_for (GTK_WINDOW (font_dialog)))
+            gtk_window_set_transient_for (GTK_WINDOW (font_dialog), GTK_WINDOW (parent));
+
+          gtk_window_set_modal (GTK_WINDOW (font_dialog),
+                                gtk_window_get_modal (GTK_WINDOW (parent)));
+        }
+
+      g_signal_connect (font_dialog, "notify",
+                        G_CALLBACK (cc_font_button_font_chooser_notify), button);
+
+      g_signal_connect (font_dialog, "response",
+                        G_CALLBACK (response_cb), font_button);
+
+      g_signal_connect (font_dialog, "destroy",
+                        G_CALLBACK (dialog_destroy), font_button);
+
+      g_signal_connect (font_dialog, "delete-event",
+                        G_CALLBACK (gtk_widget_hide_on_delete), NULL);
+    }
+  
+  test = gtk_widget_get_visible (font_button->priv->font_dialog);
+  if (!gtk_widget_get_visible (font_button->priv->font_dialog))
+    {
+      font_dialog = CC_FONT_CHOOSER (font_button->priv->font_dialog);
+      cc_font_chooser_set_font_desc (font_dialog, font_button->priv->font_desc);
+    } 
+
+  gtk_window_present (GTK_WINDOW (font_button->priv->font_dialog));
+}
+
+
+static void
+response_cb (GtkDialog *dialog,
+             gint       response_id,
+             gpointer   data)
+{
+  CcFontButton *font_button = CC_FONT_BUTTON (data);
+  CcFontButtonPrivate *priv = font_button->priv;
+  CcFontChooser *font_chooser;
+  GObject *object;
+
+  gtk_widget_hide (font_button->priv->font_dialog);
+
+  if (response_id != GTK_RESPONSE_OK)
+    return;
+
+  font_chooser = CC_FONT_CHOOSER (priv->font_dialog);
+  object = G_OBJECT (font_chooser);
+
+  g_object_freeze_notify (object);
+
+  clear_font_data (font_button);
+
+  priv->font_desc = cc_font_chooser_get_font_desc (font_chooser);
+  if (priv->font_desc)
+    priv->fontname = pango_font_description_to_string (priv->font_desc);
+  priv->font_family = cc_font_chooser_get_font_family (font_chooser);
+  if (priv->font_family)
+    g_object_ref (priv->font_family);
+  priv->font_face = cc_font_chooser_get_font_face (font_chooser);
+  if (priv->font_face)
+    g_object_ref (priv->font_face);
+  priv->font_size = cc_font_chooser_get_font_size (font_chooser);
+  g_free (priv->font_features);
+  priv->font_features = cc_font_chooser_get_font_features (font_chooser);
+  priv->language = pango_language_from_string (cc_font_chooser_get_language (font_chooser));
+
+  /* Set label font */
+  cc_font_button_update_font_info (font_button);
+
+  g_object_notify (G_OBJECT (font_button), "font");
+  g_object_notify (G_OBJECT (font_button), "font-desc");
+  g_object_notify (G_OBJECT (font_button), "font-name");
+  g_object_notify (G_OBJECT (font_button), "font-features");
+
+  g_object_thaw_notify (object);
+
+  /* Emit font_set signal */
+  g_signal_emit (font_button, font_button_signals[FONT_SET], 0);
+}
+
+static void
+dialog_destroy (GtkWidget *widget,
+                gpointer   data)
+{
+  CcFontButton *font_button = CC_FONT_BUTTON (data);
+    
+  /* Dialog will get destroyed so reference is not valid now */
+  font_button->priv->font_dialog = NULL;
+} 
+
+static gchar *
+pango_font_description_to_css (PangoFontDescription *desc)
+{
+  GString *s;
+  PangoFontMask set;
+
+  s = g_string_new ("* { ");
+
+  set = pango_font_description_get_set_fields (desc);
+  if (set & PANGO_FONT_MASK_FAMILY)
+    {
+      g_string_append (s, "font-family: ");
+      g_string_append (s, pango_font_description_get_family (desc));
+      g_string_append (s, "; ");
+    }
+  if (set & PANGO_FONT_MASK_STYLE)
+    {
+      switch (pango_font_description_get_style (desc))
+        {
+        case PANGO_STYLE_NORMAL:
+          g_string_append (s, "font-style: normal; ");
+          break;
+        case PANGO_STYLE_OBLIQUE:
+          g_string_append (s, "font-style: oblique; ");
+          break;
+        case PANGO_STYLE_ITALIC:
+          g_string_append (s, "font-style: italic; ");
+          break;
+        }
+    }
+  if (set & PANGO_FONT_MASK_VARIANT)
+    {
+      switch (pango_font_description_get_variant (desc))
+        {
+        case PANGO_VARIANT_NORMAL:
+          g_string_append (s, "font-variant: normal; ");
+          break;
+        case PANGO_VARIANT_SMALL_CAPS:
+          g_string_append (s, "font-variant: small-caps; ");
+          break;
+        }
+    }
+  if (set & PANGO_FONT_MASK_WEIGHT)
+    {
+      switch (pango_font_description_get_weight (desc))
+        {
+        case PANGO_WEIGHT_THIN:
+          g_string_append (s, "font-weight: 100; ");
+          break;
+        case PANGO_WEIGHT_ULTRALIGHT:
+          g_string_append (s, "font-weight: 200; ");
+          break;
+        case PANGO_WEIGHT_LIGHT:
+        case PANGO_WEIGHT_SEMILIGHT:
+          g_string_append (s, "font-weight: 300; ");
+          break;
+        case PANGO_WEIGHT_BOOK:
+        case PANGO_WEIGHT_NORMAL:
+          g_string_append (s, "font-weight: 400; ");
+          break;
+        case PANGO_WEIGHT_MEDIUM:
+          g_string_append (s, "font-weight: 500; ");
+          break;
+        case PANGO_WEIGHT_SEMIBOLD:
+          g_string_append (s, "font-weight: 600; ");
+          break;
+        case PANGO_WEIGHT_BOLD:
+          g_string_append (s, "font-weight: 700; ");
+          break;
+        case PANGO_WEIGHT_ULTRABOLD:
+          g_string_append (s, "font-weight: 800; ");
+          break;
+        case PANGO_WEIGHT_HEAVY:
+        case PANGO_WEIGHT_ULTRAHEAVY:
+          g_string_append (s, "font-weight: 900; ");
+          break;
+        }
+    }
+  if (set & PANGO_FONT_MASK_STRETCH)
+    {
+      switch (pango_font_description_get_stretch (desc))
+        {
+        case PANGO_STRETCH_ULTRA_CONDENSED:
+          g_string_append (s, "font-stretch: ultra-condensed; ");
+          break;
+        case PANGO_STRETCH_EXTRA_CONDENSED:
+          g_string_append (s, "font-stretch: extra-condensed; ");
+          break;
+        case PANGO_STRETCH_CONDENSED:
+          g_string_append (s, "font-stretch: condensed; ");
+          break;
+        case PANGO_STRETCH_SEMI_CONDENSED:
+          g_string_append (s, "font-stretch: semi-condensed; ");
+          break;
+        case PANGO_STRETCH_NORMAL:
+          g_string_append (s, "font-stretch: normal; ");
+          break;
+        case PANGO_STRETCH_SEMI_EXPANDED:
+          g_string_append (s, "font-stretch: semi-expanded; ");
+          break;
+        case PANGO_STRETCH_EXPANDED:
+          g_string_append (s, "font-stretch: expanded; ");
+          break;
+        case PANGO_STRETCH_EXTRA_EXPANDED:
+          g_string_append (s, "font-stretch: extra-expanded; ");
+          break;
+        case PANGO_STRETCH_ULTRA_EXPANDED:
+          g_string_append (s, "font-stretch: ultra-expanded; ");
+          break;
+        }
+    }
+  if (set & PANGO_FONT_MASK_SIZE)
+    {
+      g_string_append_printf (s, "font-size: %dpt", pango_font_description_get_size (desc) / PANGO_SCALE);
+    }
+
+  g_string_append (s, "}");
+
+  return g_string_free (s, FALSE);
+}
+
+static void
+cc_font_button_label_use_font (CcFontButton *font_button)
+{
+  CcFontButtonPrivate *priv = font_button->priv;
+  GtkStyleContext *context;
+
+  context = gtk_widget_get_style_context (priv->font_label);
+
+  if (!priv->use_font)
+    {
+      if (priv->provider)
+        {
+          gtk_style_context_remove_provider (context, GTK_STYLE_PROVIDER (priv->provider));
+          g_clear_object (&priv->provider);
+        }
+    }
+  else
+    {
+      PangoFontDescription *desc;
+      gchar *data;
+
+      if (!priv->provider)
+        {
+          priv->provider = gtk_css_provider_new ();
+          gtk_style_context_add_provider (context,
+                                          GTK_STYLE_PROVIDER (priv->provider),
+                                          GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
+        }
+
+      desc = pango_font_description_copy (priv->font_desc);
+
+      if (!priv->use_size)
+        pango_font_description_unset_fields (desc, PANGO_FONT_MASK_SIZE);
+
+      data = pango_font_description_to_css (desc);
+      gtk_css_provider_load_from_data (priv->provider, data, -1, NULL);
+
+      g_free (data);
+      pango_font_description_free (desc);
+    }
+}
+
+static void
+cc_font_button_update_font_info (CcFontButton *font_button)
+{
+  CcFontButtonPrivate *priv = font_button->priv;
+  const gchar *fam_name;
+  const gchar *face_name;
+  gchar *family_style;
+
+  if (priv->font_family)
+    fam_name = pango_font_family_get_name (priv->font_family);
+  else
+    fam_name = C_("font", "None");
+  if (priv->font_face)
+    face_name = pango_font_face_get_face_name (priv->font_face);
+  else
+    face_name = "";
+
+  if (priv->show_style)
+    family_style = g_strconcat (fam_name, " ", face_name, NULL);
+  else
+    family_style = g_strdup (fam_name);
+
+  gtk_label_set_text (GTK_LABEL (font_button->priv->font_label), family_style);
+  g_free (family_style);
+
+  if (font_button->priv->show_size) 
+    {
+      /* mirror Pango, which doesn't translate this either */
+      gchar *size = g_strdup_printf ("%2.4g%s",
+                                     pango_font_description_get_size (priv->font_desc) / (double)PANGO_SCALE,
+                                     pango_font_description_get_size_is_absolute (priv->font_desc) ? "px" : "");
+      
+      gtk_label_set_text (GTK_LABEL (font_button->priv->size_label), size);
+      
+      g_free (size);
+    }
+
+  cc_font_button_label_use_font (font_button);
+} 
+
+static void
+cc_font_button_set_level (CcFontButton       *button,
+                           CcFontChooserLevel  level)
+{
+  CcFontButtonPrivate *priv = button->priv;
+
+  if (priv->level == level)
+    return;
+
+  priv->level = level;
+
+  if (priv->font_dialog)
+    g_object_set (priv->font_dialog, "level", level, NULL);
+
+  g_object_set (button,
+                "show-size", (level & CC_FONT_CHOOSER_LEVEL_SIZE) != 0,
+                "show-style", (level & CC_FONT_CHOOSER_LEVEL_STYLE) != 0,
+                NULL);
+
+  g_object_notify (G_OBJECT (button), "level");
+}
+
+static void
+cc_font_button_set_language (CcFontButton *button,
+                              const char    *language)
+{
+  CcFontButtonPrivate *priv = button->priv;
+
+  priv->language = pango_language_from_string (language);
+
+  if (priv->font_dialog)
+    cc_font_chooser_set_language (CC_FONT_CHOOSER (priv->font_dialog), language);
+
+  g_object_notify (G_OBJECT (button), "language");
+}
diff --git a/panels/font/cc-font-button.h b/panels/font/cc-font-button.h
new file mode 100644
index 0000000..e6e5bc4
--- /dev/null
+++ b/panels/font/cc-font-button.h
@@ -0,0 +1,102 @@
+/* GTK - The GIMP Toolkit
+ * Copyright (C) 1998 David Abilleira Freijeiro <odaf@nexo.es>
+ * All rights reserved
+ * Based on gnome-color-picker by Federico Mena <federico@nuclecu.unam.mx>
+ * Copyright (C) 2020 gooroom <gooroom@gooroom.kr>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library. If not, see <http://www.gnu.org/licenses/>.
+ */
+ /*
+ * Modified by the GTK+ Team and others 2003.  See the AUTHORS
+ * file for a list of people on the GTK+ Team.  See the ChangeLog
+ * files for a list of changes.  These files are distributed with
+ * GTK+ at ftp://ftp.gtk.org/pub/gtk/.
+ */
+
+ #pragma
+
+ #include <gtk/gtk.h>
+
+ G_BEGIN_DECLS
+
+#define CC_TYPE_FONT_BUTTON             (cc_font_button_get_type ())
+#define CC_FONT_BUTTON(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), CC_TYPE_FONT_BUTTON, CcFontButton))
+#define CC_FONT_BUTTON_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), CC_TYPE_FONT_BUTTON, CcFontButtonClass))
+#define CC_IS_FONT_BUTTON(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CC_TYPE_FONT_BUTTON))
+#define CC_IS_FONT_BUTTON_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), CC_TYPE_FONT_BUTTON))
+#define CC_FONT_BUTTON_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), CC_TYPE_FONT_BUTTON, CcFontButtonClass))
+
+typedef struct _CcFontButton        CcFontButton;
+typedef struct _CcFontButtonClass   CcFontButtonClass;
+typedef struct _CcFontButtonPrivate CcFontButtonPrivate;
+
+struct _CcFontButton {
+  GtkButton button;
+
+  /*< private >*/
+  CcFontButtonPrivate *priv;
+};
+
+struct _CcFontButtonClass {
+  GtkButtonClass parent_class;
+
+  /* font_set signal is emitted when font is chosen */
+  void (* font_set) (CcFontButton *gfp);
+
+  /* Padding for future expansion */
+  //void (*_gtk_reserved1) (void);
+  //void (*_gtk_reserved2) (void);
+  //void (*_gtk_reserved3) (void);
+  //void (*_gtk_reserved4) (void);
+};
+
+GDK_AVAILABLE_IN_ALL
+GType                 cc_font_button_get_type       (void) G_GNUC_CONST;
+GDK_AVAILABLE_IN_ALL
+GtkWidget            *cc_font_button_new            (void);
+GDK_AVAILABLE_IN_ALL
+GtkWidget            *cc_font_button_new_with_font  (const gchar   *fontname);
+
+GDK_AVAILABLE_IN_ALL
+const gchar *         cc_font_button_get_title      (CcFontButton *font_button);
+GDK_AVAILABLE_IN_ALL
+void                  cc_font_button_set_title      (CcFontButton *font_button,
+                                                      const gchar   *title);
+GDK_AVAILABLE_IN_ALL
+gboolean              cc_font_button_get_use_font   (CcFontButton *font_button);
+GDK_AVAILABLE_IN_ALL
+void                  cc_font_button_set_use_font   (CcFontButton *font_button,
+                                                      gboolean       use_font);
+GDK_AVAILABLE_IN_ALL
+gboolean              cc_font_button_get_use_size   (CcFontButton *font_button);
+GDK_AVAILABLE_IN_ALL
+void                  cc_font_button_set_use_size   (CcFontButton *font_button,
+                                                      gboolean       use_size);
+
+GDK_DEPRECATED_IN_3_22
+const gchar *         cc_font_button_get_font_name  (CcFontButton *font_button);
+GDK_DEPRECATED_IN_3_22
+gboolean              cc_font_button_set_font_name  (CcFontButton *font_button,
+                                                      const gchar   *fontname);
+GDK_AVAILABLE_IN_ALL
+gboolean              cc_font_button_get_show_style (CcFontButton *font_button);
+GDK_AVAILABLE_IN_ALL
+void                  cc_font_button_set_show_style (CcFontButton *font_button,
+                                                      gboolean       show_style);
+GDK_AVAILABLE_IN_ALL
+gboolean              cc_font_button_get_show_size  (CcFontButton *font_button);
+GDK_AVAILABLE_IN_ALL
+void                  cc_font_button_set_show_size  (CcFontButton *font_button,
+                                                      gboolean       show_size);
+ G_END_DECLS
diff --git a/panels/font/cc-font-chooser-dialog.c b/panels/font/cc-font-chooser-dialog.c
new file mode 100644
index 0000000..61106e5
--- /dev/null
+++ b/panels/font/cc-font-chooser-dialog.c
@@ -0,0 +1,268 @@
+/* GTK - The GIMP Toolkit
+ * Copyright (C) 2011 Alberto Ruiz <aruiz@gnome.org>
+ * Copyright (C) 2020 gooroom <gooroom@gooroom.kr>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library. If not, see <http://www.gnu.org/licenses/>
+ *
+ */
+
+#include <gtk/gtk.h>
+
+#include "cc-font-chooser-dialog.h"
+#include "cc-font-chooser-widget.h"
+#include "cc-font-chooser-utils.h"
+
+struct _CcFontChooserDialogPrivate
+{
+  GtkWidget     *dialogbox;
+  GtkWidget     *fontchooser;
+
+  GtkWidget     *select_button;
+  GtkWidget     *cancel_button;
+  GtkWidget     *tweak_button;
+};
+
+static void cc_font_chooser_dialog_buildable_interface_init           (GtkBuildableIface *iface);
+static GObject *cc_font_chooser_dialog_buildable_get_internal_child (GtkBuildable *buildable,
+                                                                      GtkBuilder   *builder,
+                                                                      const gchar  *childname);
+
+G_DEFINE_TYPE_WITH_CODE (CcFontChooserDialog, cc_font_chooser_dialog, GTK_TYPE_DIALOG,
+                         G_ADD_PRIVATE (CcFontChooserDialog)
+                         G_IMPLEMENT_INTERFACE (CC_TYPE_FONT_CHOOSER,
+                                                _cc_font_chooser_delegate_iface_init)
+                         G_IMPLEMENT_INTERFACE (GTK_TYPE_BUILDABLE,
+                                                cc_font_chooser_dialog_buildable_interface_init))
+
+static GtkBuildableIface *parent_buildable_iface;
+
+static void
+update_button (CcFontChooserDialog *dialog)
+{
+  CcFontChooserDialogPrivate *priv = dialog->priv;
+  PangoFontDescription *desc;
+
+  desc = cc_font_chooser_get_font_desc (CC_FONT_CHOOSER (priv->fontchooser));
+
+  gtk_widget_set_sensitive (priv->select_button, desc != NULL);
+
+  if (desc)
+    pango_font_description_free (desc);
+}
+
+static void
+update_tweak_button (CcFontChooserDialog *dialog)
+{
+  CcFontChooserLevel level;
+
+  if (!dialog->priv->tweak_button)
+    return;
+
+  g_object_get (dialog->priv->fontchooser, "level", &level, NULL);
+  if ((level & (CC_FONT_CHOOSER_LEVEL_VARIATIONS | CC_FONT_CHOOSER_LEVEL_FEATURES)) != 0)
+    gtk_widget_show (dialog->priv->tweak_button);
+  else
+    gtk_widget_hide (dialog->priv->tweak_button);
+}
+
+static void
+setup_tweak_button (CcFontChooserDialog *dialog)
+{
+  gboolean use_header;
+
+  if (dialog->priv->tweak_button)
+    return;
+
+  g_object_get (dialog, "use-header-bar", &use_header, NULL);
+  if (use_header)
+    {
+      GtkWidget *button;
+      GtkWidget *image;
+      GtkWidget *header;
+      GActionGroup *actions;
+
+      actions = G_ACTION_GROUP (g_simple_action_group_new ());
+      g_action_map_add_action (G_ACTION_MAP (actions),
+                               cc_font_chooser_widget_get_tweak_action (dialog->priv->fontchooser));
+      gtk_widget_insert_action_group (GTK_WIDGET (dialog), "font", actions);
+      g_object_unref (actions);
+
+      button = gtk_toggle_button_new ();
+      gtk_actionable_set_action_name (GTK_ACTIONABLE (button), "font.tweak");
+      gtk_widget_set_focus_on_click (button, FALSE);
+      gtk_widget_set_valign (button, GTK_ALIGN_CENTER);
+
+      image = gtk_image_new_from_icon_name ("emblem-system-symbolic", GTK_ICON_SIZE_BUTTON);
+      gtk_widget_show (image);
+      gtk_container_add (GTK_CONTAINER (button), image);
+
+      header = gtk_dialog_get_header_bar (GTK_DIALOG (dialog));
+      gtk_header_bar_pack_end (GTK_HEADER_BAR (header), button);
+
+      dialog->priv->tweak_button = button;
+      update_tweak_button (dialog);
+    }
+}
+
+static void
+font_activated_cb (CcFontChooser *fontchooser,
+                   const gchar    *fontname,
+                   gpointer        user_data)
+{
+  GtkDialog *dialog = user_data;
+
+  gtk_dialog_response (dialog, GTK_RESPONSE_OK);
+}
+
+static gboolean
+cc_font_chooser_dialog_key_press_event (GtkWidget *dialog,
+                                        GdkEventKey *event)
+{
+  CcFontChooserDialog *font_dialog = CC_FONT_CHOOSER_DIALOG (dialog);
+  gboolean handled = FALSE;
+
+  handled = GTK_WIDGET_CLASS (cc_font_chooser_dialog_parent_class)->key_press_event (dialog, event);
+  if (!handled)
+    handled = cc_font_chooser_widget_handle_event (font_dialog->priv->fontchooser, event);
+
+  return handled;
+}
+
+static void
+cc_font_chooser_dialog_map (GtkWidget *widget)
+{
+  CcFontChooserDialog *dialog = CC_FONT_CHOOSER_DIALOG (widget);
+
+  setup_tweak_button (dialog);
+
+  GTK_WIDGET_CLASS (cc_font_chooser_dialog_parent_class)->map (widget);
+}
+
+static void
+cc_font_chooser_dialog_set_property (GObject      *object,
+                                      guint         prop_id,
+                                      const GValue *value,
+                                      GParamSpec   *pspec)
+{
+  CcFontChooserDialog *dialog = CC_FONT_CHOOSER_DIALOG (object);
+  CcFontChooserDialogPrivate *priv = dialog->priv;
+
+  switch (prop_id)
+    {
+    default:
+      g_object_set_property (G_OBJECT (priv->fontchooser), pspec->name, value);
+      break;
+    }
+}
+
+static void
+cc_font_chooser_dialog_get_property (GObject      *object,
+                                      guint         prop_id,
+                                      GValue       *value,
+                                      GParamSpec   *pspec)
+{
+  CcFontChooserDialog *dialog = CC_FONT_CHOOSER_DIALOG (object);
+  CcFontChooserDialogPrivate *priv = dialog->priv;
+
+  switch (prop_id)
+    {
+    default:
+      g_object_get_property (G_OBJECT (priv->fontchooser), pspec->name, value);
+      break;
+    }
+}
+
+static void
+cc_font_chooser_dialog_init (CcFontChooserDialog *fontchooserdialog)
+{
+  CcFontChooserDialogPrivate *priv;
+
+  priv = fontchooserdialog->priv = cc_font_chooser_dialog_get_instance_private (fontchooserdialog);
+
+  gtk_widget_init_template (GTK_WIDGET (fontchooserdialog));
+
+G_GNUC_BEGIN_IGNORE_DEPRECATIONS
+  gtk_dialog_set_alternative_button_order (GTK_DIALOG (fontchooserdialog),
+                                           GTK_RESPONSE_OK,
+                                           GTK_RESPONSE_CANCEL,
+                                           -1);
+G_GNUC_END_IGNORE_DEPRECATIONS
+  _cc_font_chooser_set_delegate (CC_FONT_CHOOSER (fontchooserdialog),
+                                 CC_FONT_CHOOSER (priv->fontchooser));
+
+  g_signal_connect_swapped (priv->fontchooser, "notify::font-desc",
+                            G_CALLBACK (update_button), fontchooserdialog);
+  update_button (fontchooserdialog);
+
+  g_signal_connect_swapped (priv->fontchooser, "notify::level",
+                            G_CALLBACK (update_tweak_button), fontchooserdialog);
+}
+
+static void
+cc_font_chooser_dialog_class_init (CcFontChooserDialogClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  GtkWidgetClass *widget_class = G_OBJECT_CLASS (klass);
+
+  object_class->get_property = cc_font_chooser_dialog_get_property;
+  object_class->set_property = cc_font_chooser_dialog_set_property;
+
+  widget_class->key_press_event = cc_font_chooser_dialog_key_press_event;
+  widget_class->map = cc_font_chooser_dialog_map;
+
+  _cc_font_chooser_install_properties (object_class);
+
+  gtk_widget_class_set_template_from_resource (widget_class,
+                                               "/org/gnome/control-center/font/font-chooser-dialog.ui");
+
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserDialog, fontchooser);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserDialog, dialogbox);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserDialog, select_button);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserDialog, cancel_button);
+  gtk_widget_class_bind_template_callback (widget_class, font_activated_cb);
+}
+
+GtkWidget *
+cc_font_chooser_dialog_new (gchar *title, GtkWindow *parent)
+{
+  return GTK_WIDGET (g_object_new (CC_TYPE_FONT_CHOOSER_DIALOG,
+                                  "title", title,
+                                   "transient-for", parent,
+                                   "use-header-bar", 1,
+                                   NULL));
+}
+
+static void
+cc_font_chooser_dialog_buildable_interface_init (GtkBuildableIface *iface)
+{
+  parent_buildable_iface = g_type_interface_peek_parent (iface);
+  iface->get_internal_child = cc_font_chooser_dialog_buildable_get_internal_child;
+}
+
+static GObject *
+cc_font_chooser_dialog_buildable_get_internal_child (GtkBuildable *buildable,
+                                                      GtkBuilder   *builder,
+                                                      const gchar  *childname)
+{
+  CcFontChooserDialogPrivate *priv;
+
+  priv = CC_FONT_CHOOSER_DIALOG (buildable)->priv;
+
+  if (g_strcmp0 (childname, "select_button") == 0)
+    return G_OBJECT (priv->select_button);
+  else if (g_strcmp0 (childname, "cancel_button") == 0)
+    return G_OBJECT (priv->cancel_button);
+
+  return parent_buildable_iface->get_internal_child (buildable, builder, childname);
+}
diff --git a/panels/font/cc-font-chooser-dialog.h b/panels/font/cc-font-chooser-dialog.h
new file mode 100644
index 0000000..ac20036
--- /dev/null
+++ b/panels/font/cc-font-chooser-dialog.h
@@ -0,0 +1,53 @@
+/* GTK - The GIMP Toolkit
+ * Copyright (C) 2011      Alberto Ruiz <aruiz@gnome.org>
+ * Copyright (C) 2020 gooroom <gooroom@gooroom.kr>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+
+
+#pragma
+
+#include <gtk/gtk.h>
+
+G_BEGIN_DECLS
+
+#define CC_TYPE_FONT_CHOOSER_DIALOG               (cc_font_chooser_dialog_get_type ())
+#define CC_FONT_CHOOSER_DIALOG(obj)               (G_TYPE_CHECK_INSTANCE_CAST ((obj), CC_TYPE_FONT_CHOOSER_DIALOG, CcFontChooserDialog))
+#define CC_FONT_CHOOSER_DIALOG_CLASS(klass)       (G_TYPE_CHECK_CLASS_CAST ((klass), CC_TYPE_FONT_CHOOSER_DIALOG, CcFontChooserDialogClass))
+#define CC_IS_FONT_CHOOSER_DIALOG(obj)            (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CC_TYPE_FONT_CHOOSER_DIALOG))
+#define CC_IS_FONT_CHOOSER_DIALOG_CLASS(klass)    (G_TYPE_CHECK_CLASS_TYPE ((klass), CC_TYPE_FONT_CHOOSER_DIALOG))
+#define CC_FONT_CHOOSER_DIALOG_GET_CLASS(obj)     (G_TYPE_INSTANCE_GET_CLASS ((obj), CC_TYPE_FONT_CHOOSER_DIALOG, CcFontChooserDialogClass))
+
+typedef struct _CcFontChooserDialog               CcFontChooserDialog;
+typedef struct _CcFontChooserDialogClass          CcFontChooserDialogClass;
+typedef struct _CcFontChooserDialogPrivate        CcFontChooserDialogPrivate;
+
+struct _CcFontChooserDialog
+{
+  GtkDialog                   parent_instance;
+
+  CcFontChooserDialogPrivate *priv;
+};
+
+struct _CcFontChooserDialogClass
+{
+  GtkDialogClass parent_class;
+};
+
+GtkWidget *
+cc_font_chooser_dialog_new        (gchar *title, GtkWindow *parent);
+
+G_END_DECLS
diff --git a/panels/font/cc-font-chooser-private.h b/panels/font/cc-font-chooser-private.h
new file mode 100644
index 0000000..cb9755a
--- /dev/null
+++ b/panels/font/cc-font-chooser-private.h
@@ -0,0 +1,36 @@
+/* gtkfontprivatechooser.h - Interface definitions for font selectors UI
+ *
+ * Copyright (C) 2006 Emmanuele Bassi
+ * Copyright (C) 2020 gooroom <gooroom@gooroom.kr>
+ *
+ * All rights reserved
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef __CC_FONT_CHOOSER_PRIVATE_H__
+#define __CC_FONT_CHOOSER_PRIVATE_H__
+
+#include "cc-font-chooser.h"
+
+#define CC_FONT_CHOOSER_DEFAULT_FONT_NAME "Sans 10"
+
+G_BEGIN_DECLS
+
+void            _cc_font_chooser_font_activated        (CcFontChooser *chooser,
+                                                         const gchar    *fontname);
+
+G_END_DECLS
+
+#endif /* ! __CC_FONT_CHOOSER_PRIVATE_H__ */
diff --git a/panels/font/cc-font-chooser-utils.c b/panels/font/cc-font-chooser-utils.c
new file mode 100644
index 0000000..e56d437
--- /dev/null
+++ b/panels/font/cc-font-chooser-utils.c
@@ -0,0 +1,200 @@
+/* gtkfontchooserutils.h - Private utility functions for implementing a
+ *                           CcFontChooser interface
+ *
+ * Copyright (C) 2006 Emmanuele Bassi
+ * Copyright (C) 2020 gooroom <gooroom@gooroom.kr>
+ *
+ * All rights reserved
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library. If not, see <http://www.gnu.org/licenses/>.
+ *
+ * Based on gtkfilechooserutils.c:
+ *	Copyright (C) 2003 Red Hat, Inc.
+ */
+
+#include "config.h"
+
+#include <gtk/gtk.h>
+
+#include "cc-font-chooser-utils.h"
+#include "cc-font-define.h"
+
+static CcFontChooser *
+get_delegate (CcFontChooser *receiver)
+{
+  return g_object_get_qdata (G_OBJECT (receiver),
+                             CC_FONT_CHOOSER_DELEGATE_QUARK);
+}
+
+static PangoFontFamily *
+delegate_get_font_family (CcFontChooser *chooser)
+{
+  return cc_font_chooser_get_font_family (get_delegate (chooser));
+}
+
+static PangoFontFace *
+delegate_get_font_face (CcFontChooser *chooser)
+{
+  return cc_font_chooser_get_font_face (get_delegate (chooser));
+}
+
+static int
+delegate_get_font_size (CcFontChooser *chooser)
+{
+  return cc_font_chooser_get_font_size (get_delegate (chooser));
+}
+
+static void
+delegate_set_filter_func (CcFontChooser    *chooser,
+                          GtkFontFilterFunc  filter_func,
+                          gpointer           filter_data,
+                          GDestroyNotify     data_destroy)
+{
+  cc_font_chooser_set_filter_func (get_delegate (chooser),
+                                    filter_func,
+                                    filter_data,
+                                    data_destroy);
+}
+
+static void
+delegate_set_font_map (CcFontChooser *chooser,
+                       PangoFontMap   *map)
+{
+  cc_font_chooser_set_font_map (get_delegate (chooser), map);
+}
+
+static PangoFontMap *
+delegate_get_font_map (CcFontChooser *chooser)
+{
+  return cc_font_chooser_get_font_map (get_delegate (chooser));
+}
+
+static void
+delegate_notify (GObject    *object,
+                 GParamSpec *pspec,
+                 gpointer    user_data)
+{
+  gpointer iface;
+
+  iface = g_type_interface_peek (g_type_class_peek (G_OBJECT_TYPE (object)),
+                                 CC_TYPE_FONT_CHOOSER);
+  if (g_object_interface_find_property (iface, pspec->name))
+    g_object_notify_by_pspec (user_data, pspec);
+}
+
+static void
+delegate_font_activated (CcFontChooser *receiver,
+                         const gchar    *fontname,
+                         CcFontChooser *delegate)
+{
+  _cc_font_chooser_font_activated (delegate, fontname);
+}
+
+GQuark
+_cc_font_chooser_delegate_get_quark (void)
+{
+  static GQuark quark = 0;
+
+  if (G_UNLIKELY (quark == 0))
+    quark = g_quark_from_static_string ("gtk-font-chooser-delegate");
+
+  return quark;
+}
+
+/**
+ * _cc_font_chooser_install_properties:
+ * @klass: the class structure for a type deriving from #GObject
+ *
+ * Installs the necessary properties for a class implementing
+ * #CcFontChooser. A #GtkParamSpecOverride property is installed
+ * for each property, using the values from the #CcFontChooserProp
+ * enumeration. The caller must make sure itself that the enumeration
+ * values don’t collide with some other property values they
+ * are using.
+ */
+void
+_cc_font_chooser_install_properties (GObjectClass *klass)
+{
+  g_object_class_override_property (klass,
+                                    CC_FONT_CHOOSER_PROP_FONT,
+                                    "font");
+  g_object_class_override_property (klass,
+                                    CC_FONT_CHOOSER_PROP_FONT_DESC,
+                                    "font-desc");
+  g_object_class_override_property (klass,
+                                    CC_FONT_CHOOSER_PROP_PREVIEW_TEXT,
+                                    "preview-text");
+  g_object_class_override_property (klass,
+                                    CC_FONT_CHOOSER_PROP_SHOW_PREVIEW_ENTRY,
+                                    "show-preview-entry");
+  g_object_class_override_property (klass,
+                                    CC_FONT_CHOOSER_PROP_LEVEL,
+                                    "level");
+  g_object_class_override_property (klass,
+                                    CC_FONT_CHOOSER_PROP_FONT_FEATURES,
+                                    "font-features");
+  g_object_class_override_property (klass,
+                                    CC_FONT_CHOOSER_PROP_LANGUAGE,
+                                    "language");
+}
+
+/**
+ * _cc_font_chooser_delegate_iface_init:
+ * @iface: a #CcFontChooserIface
+ *
+ * An interface-initialization function for use in cases where
+ * an object is simply delegating the methods, signals of
+ * the #CcFontChooser interface to another object.
+ * _cc_font_chooser_set_delegate() must be called on each
+ * instance of the object so that the delegate object can
+ * be found.
+ */
+void
+_cc_font_chooser_delegate_iface_init (CcFontChooserIface *iface)
+{
+  iface->get_font_family = delegate_get_font_family;
+  iface->get_font_face = delegate_get_font_face;
+  iface->get_font_size = delegate_get_font_size;
+  iface->set_filter_func = delegate_set_filter_func;
+  iface->set_font_map = delegate_set_font_map;
+  iface->get_font_map = delegate_get_font_map;
+}
+
+/**
+ * _cc_font_chooser_set_delegate:
+ * @receiver: a #GObject implementing #CcFontChooser
+ * @delegate: another #GObject implementing #CcFontChooser
+ *
+ * Establishes that calls on @receiver for #CcFontChooser
+ * methods should be delegated to @delegate, and that
+ * #CcFontChooser signals emitted on @delegate should be
+ * forwarded to @receiver. Must be used in conjunction with
+ * _cc_font_chooser_delegate_iface_init().
+ */
+void
+_cc_font_chooser_set_delegate (CcFontChooser *receiver,
+                               CcFontChooser *delegate)
+{
+  g_return_if_fail (CC_IS_FONT_CHOOSER (receiver));
+  g_return_if_fail (CC_IS_FONT_CHOOSER (delegate));
+  
+  g_object_set_qdata (G_OBJECT (receiver),
+                      CC_FONT_CHOOSER_DELEGATE_QUARK,
+  		      delegate);
+  
+  g_signal_connect (delegate, "notify",
+  		    G_CALLBACK (delegate_notify), receiver);
+  g_signal_connect (delegate, "font-activated",
+  		    G_CALLBACK (delegate_font_activated), receiver);
+}
diff --git a/panels/font/cc-font-chooser-utils.h b/panels/font/cc-font-chooser-utils.h
new file mode 100644
index 0000000..1cbe710
--- /dev/null
+++ b/panels/font/cc-font-chooser-utils.h
@@ -0,0 +1,43 @@
+/* gtkfontchooserutils.h - Private utility functions for implementing a
+ *                           GtkFontChooser interface
+ *
+ * Copyright (C) 2006 Emmanuele Bassi
+ * Copyright (C) 2020 gooroom <gooroom@gooroom.kr>
+ *
+ * All rights reserved
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library. If not, see <http://www.gnu.org/licenses/>.
+ *
+ * Based on gtkfilechooserutils.h:
+ *	Copyright (C) 2003 Red Hat, Inc.
+ */
+ 
+#ifndef __CC_FONT_CHOOSER_UTILS_H__
+#define __CC_FONT_CHOOSER_UTILS_H__
+
+#include "cc-font-chooser-private.h"
+G_BEGIN_DECLS
+
+#define CC_FONT_CHOOSER_DELEGATE_QUARK	(_cc_font_chooser_delegate_get_quark ())
+
+void   _cc_font_chooser_install_properties  (GObjectClass       *klass);
+void   _cc_font_chooser_delegate_iface_init (CcFontChooserIface *iface);
+void   _cc_font_chooser_set_delegate        (CcFontChooser      *receiver,
+                                             CcFontChooser      *delegate);
+
+GQuark _cc_font_chooser_delegate_get_quark  (void) G_GNUC_CONST;
+
+G_END_DECLS
+
+#endif /* __CC_FONT_CHOOSER_UTILS_H__ */
diff --git a/panels/font/cc-font-chooser-widget.c b/panels/font/cc-font-chooser-widget.c
new file mode 100644
index 0000000..ea62f45
--- /dev/null
+++ b/panels/font/cc-font-chooser-widget.c
@@ -0,0 +1,2475 @@
+/* GTK - The GIMP Toolkit
+ * Copyright (C) 2011 Alberto Ruiz <aruiz@gnome.org>
+ * Copyright (C) 2020 gooroom <gooroom@gooroom.kr>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <config.h>
+
+#include <gtk/gtk.h>
+#include <glib/gi18n.h>
+
+#include "cc-font-chooser-widget.h"
+#include "cc-font-chooser.h"
+#include "cc-font-define.h"
+#include "cc-font-chooser-utils.h"
+
+struct _CcFontChooserWidgetPrivate
+{
+  GtkWidget         *stack;
+  GtkWidget         *search_entry;
+  GtkWidget         *family_face_list;
+  GtkTreeViewColumn *family_face_column;
+  GtkCellRenderer   *family_face_cell;
+  GtkWidget         *list_scrolled_window;
+  GtkWidget         *list_stack;
+  GtkTreeModel      *model;
+  GtkTreeModel      *filter_model;
+
+  GtkWidget       *preview;
+  GtkWidget       *preview2;
+  GtkWidget       *font_name_label;
+  gchar           *preview_text;
+  gboolean         show_preview_entry;
+
+  GtkWidget       *size_spin;
+  GtkWidget       *size_slider;
+  GtkWidget       *size_slider2;
+  GtkWidget       *size_label;
+  GtkWidget       *no_font_label;
+
+  GtkWidget       *axis_grid;
+  GtkWidget       *feature_box;
+
+  PangoFontMap    *font_map;
+
+  PangoFontDescription *font_desc;
+  char                 *font_features;
+  PangoLanguage        *language;
+  GtkTreeIter           font_iter;      /* invalid if font not available or pointer into model
+                                           (not filter_model) to the row containing font */
+  GtkFontFilterFunc     filter_func;
+  gpointer              filter_data;
+  GDestroyNotify        filter_data_destroy;
+
+  guint                 last_fontconfig_timestamp;
+  CcFontChooserLevel    level;
+
+  GHashTable           *axes;
+  gboolean              updating_variations;
+
+  GList                *feature_items;
+  GAction              *tweak_action;
+};
+
+/* This is the initial fixed height and the top padding of the preview entry */
+#define PREVIEW_HEIGHT 20
+#define PREVIEW_TOP_PADDING 6
+
+/* These are the sizes of the font, style & size lists. */
+#define FONT_LIST_HEIGHT  136
+#define FONT_LIST_WIDTH   190
+#define FONT_STYLE_LIST_WIDTH 170
+#define FONT_SIZE_LIST_WIDTH  60
+#define FONT_SIZE_MAX 20
+
+enum {
+  PROP_ZERO,
+  PROP_TWEAK_ACTION
+};
+
+/* Keep in line with GtkTreeStore defined in gtkfontchooserwidget.ui */
+enum {
+  FAMILY_COLUMN,
+  FACE_COLUMN,
+  FONT_DESC_COLUMN,
+  PREVIEW_TITLE_COLUMN
+};
+
+static void cc_font_chooser_widget_set_property         (GObject         *object,
+                                                          guint            prop_id,
+                                                          const GValue    *value,
+                                                          GParamSpec      *pspec);
+static void cc_font_chooser_widget_get_property         (GObject         *object,
+                                                          guint            prop_id,
+                                                          GValue          *value,
+                                                          GParamSpec      *pspec);
+static void cc_font_chooser_widget_finalize             (GObject         *object);
+
+static void cc_font_chooser_widget_screen_changed       (GtkWidget       *widget,
+                                                          GdkScreen       *previous_screen);
+
+static gboolean cc_font_chooser_widget_find_font        (CcFontChooserWidget *fontchooser,
+                                                          const PangoFontDescription *font_desc,
+                                                          GtkTreeIter          *iter);
+static void     cc_font_chooser_widget_ensure_selection (CcFontChooserWidget *fontchooser);
+
+static gchar   *cc_font_chooser_widget_get_font         (CcFontChooserWidget *fontchooser);
+static void     cc_font_chooser_widget_set_font         (CcFontChooserWidget *fontchooser,
+                                                          const gchar          *fontname);
+
+static PangoFontDescription *cc_font_chooser_widget_get_font_desc  (CcFontChooserWidget *fontchooser);
+static void                  cc_font_chooser_widget_merge_font_desc(CcFontChooserWidget       *fontchooser,
+                                                                     const PangoFontDescription *font_desc,
+                                                                     GtkTreeIter                *iter);
+static void                  cc_font_chooser_widget_take_font_desc (CcFontChooserWidget *fontchooser,
+                                                                     PangoFontDescription *font_desc);
+
+
+static const gchar *cc_font_chooser_widget_get_preview_text (CcFontChooserWidget *fontchooser);
+static void         cc_font_chooser_widget_set_preview_text (CcFontChooserWidget *fontchooser,
+                                                              const gchar          *text);
+
+static gboolean cc_font_chooser_widget_get_show_preview_entry (CcFontChooserWidget *fontchooser);
+static void     cc_font_chooser_widget_set_show_preview_entry (CcFontChooserWidget *fontchooser,
+                                                                gboolean              show_preview_entry);
+
+static void     cc_font_chooser_widget_set_cell_size          (CcFontChooserWidget *fontchooser);
+static void     cc_font_chooser_widget_load_fonts             (CcFontChooserWidget *fontchooser,
+                                                                gboolean              force);
+
+static void     cc_font_chooser_widget_populate_features      (CcFontChooserWidget *fontchooser);
+static gboolean visible_func                                   (GtkTreeModel *model,
+								GtkTreeIter  *iter,
+								gpointer      user_data);
+static void     cc_font_chooser_widget_cell_data_func         (GtkTreeViewColumn *column,
+								GtkCellRenderer   *cell,
+								GtkTreeModel      *tree_model,
+								GtkTreeIter       *iter,
+								gpointer           user_data);
+
+static void selection_changed (GtkTreeSelection *selection,
+                               CcFontChooserWidget *fontchooser);
+static void update_font_features (CcFontChooserWidget *fontchooser);
+
+
+static void                cc_font_chooser_widget_set_level (CcFontChooserWidget *fontchooser,
+                                                              CcFontChooserLevel   level);
+static CcFontChooserLevel cc_font_chooser_widget_get_level (CcFontChooserWidget *fontchooser);
+static void                cc_font_chooser_widget_set_language (CcFontChooserWidget *fontchooser,
+                                                                 const char           *language);
+static void selection_changed (GtkTreeSelection *selection,
+                               CcFontChooserWidget *fontchooser);
+static void update_font_features (CcFontChooserWidget *fontchooser);
+
+static void cc_font_chooser_widget_iface_init (CcFontChooserIface *iface);
+
+G_DEFINE_TYPE_WITH_CODE (CcFontChooserWidget, cc_font_chooser_widget, GTK_TYPE_BOX,
+                         G_ADD_PRIVATE (CcFontChooserWidget)
+                         G_IMPLEMENT_INTERFACE (CC_TYPE_FONT_CHOOSER,
+                                                cc_font_chooser_widget_iface_init))
+
+typedef struct _GtkDelayedFontDescription GtkDelayedFontDescription;
+struct _GtkDelayedFontDescription {
+  PangoFontFace        *face;
+  PangoFontDescription *desc;
+  guint                 ref_count;
+};
+
+static GtkDelayedFontDescription *
+gtk_delayed_font_description_new (PangoFontFace *face)
+{
+  GtkDelayedFontDescription *result;
+  
+  result = g_slice_new0 (GtkDelayedFontDescription);
+
+  result->face = g_object_ref (face);
+  result->desc = NULL;
+  result->ref_count = 1;
+
+  return result;
+}
+
+static GtkDelayedFontDescription *
+gtk_delayed_font_description_ref (GtkDelayedFontDescription *desc)
+{
+  desc->ref_count++;
+
+  return desc;
+}
+
+static void
+gtk_delayed_font_description_unref (GtkDelayedFontDescription *desc)
+{
+  desc->ref_count--;
+
+  if (desc->ref_count > 0)
+    return;
+
+  g_object_unref (desc->face);
+  if (desc->desc)
+    pango_font_description_free (desc->desc);
+
+  g_slice_free (GtkDelayedFontDescription, desc);
+}
+
+static const PangoFontDescription *
+gtk_delayed_font_description_get (GtkDelayedFontDescription *desc)
+{
+  if (desc->desc == NULL)
+    desc->desc = pango_font_face_describe (desc->face);
+
+  return desc->desc;
+}
+
+#define GTK_TYPE_DELAYED_FONT_DESCRIPTION (gtk_delayed_font_description_get_type ())
+G_DEFINE_BOXED_TYPE (GtkDelayedFontDescription, gtk_delayed_font_description,
+                     gtk_delayed_font_description_ref,
+                     gtk_delayed_font_description_unref)
+static void
+cc_font_chooser_widget_set_property (GObject         *object,
+                                      guint            prop_id,
+                                      const GValue    *value,
+                                      GParamSpec      *pspec)
+{
+  CcFontChooserWidget *fontchooser = CC_FONT_CHOOSER_WIDGET (object);
+
+  switch (prop_id)
+    {
+    case CC_FONT_CHOOSER_PROP_FONT:
+      cc_font_chooser_widget_set_font (fontchooser, g_value_get_string (value));
+      break;
+    case CC_FONT_CHOOSER_PROP_FONT_DESC:
+      cc_font_chooser_widget_take_font_desc (fontchooser, g_value_dup_boxed (value));
+      break;
+    case CC_FONT_CHOOSER_PROP_PREVIEW_TEXT:
+      cc_font_chooser_widget_set_preview_text (fontchooser, g_value_get_string (value));
+      break;
+    case CC_FONT_CHOOSER_PROP_SHOW_PREVIEW_ENTRY:
+      cc_font_chooser_widget_set_show_preview_entry (fontchooser, g_value_get_boolean (value));
+      break;
+    case CC_FONT_CHOOSER_PROP_LEVEL:
+      cc_font_chooser_widget_set_level (fontchooser, g_value_get_flags (value));
+      break;
+    case CC_FONT_CHOOSER_PROP_LANGUAGE:
+      cc_font_chooser_widget_set_language (fontchooser, g_value_get_string (value));
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+    }
+}
+
+static void
+cc_font_chooser_widget_get_property (GObject         *object,
+                                      guint            prop_id,
+                                      GValue          *value,
+                                      GParamSpec      *pspec)
+{
+  CcFontChooserWidget *fontchooser = CC_FONT_CHOOSER_WIDGET (object);
+
+  switch (prop_id)
+    {
+    case PROP_TWEAK_ACTION:
+      g_value_set_object (value, G_OBJECT (fontchooser->priv->tweak_action));
+      break;
+    case CC_FONT_CHOOSER_PROP_FONT:
+      g_value_take_string (value, cc_font_chooser_widget_get_font (fontchooser));
+      break;
+    case CC_FONT_CHOOSER_PROP_FONT_DESC:
+      g_value_set_boxed (value, cc_font_chooser_widget_get_font_desc (fontchooser));
+      break;
+    case CC_FONT_CHOOSER_PROP_PREVIEW_TEXT:
+      g_value_set_string (value, cc_font_chooser_widget_get_preview_text (fontchooser));
+      break;
+    case CC_FONT_CHOOSER_PROP_SHOW_PREVIEW_ENTRY:
+      g_value_set_boolean (value, cc_font_chooser_widget_get_show_preview_entry (fontchooser));
+      break;
+    case CC_FONT_CHOOSER_PROP_LEVEL:
+      g_value_set_flags (value, cc_font_chooser_widget_get_level (fontchooser));
+      break;
+    case CC_FONT_CHOOSER_PROP_FONT_FEATURES:
+      g_value_set_string (value, fontchooser->priv->font_features);
+      break;
+    case CC_FONT_CHOOSER_PROP_LANGUAGE:
+      g_value_set_string (value, pango_language_to_string (fontchooser->priv->language));
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+    }
+}
+
+static void
+cc_font_chooser_widget_refilter_font_list (CcFontChooserWidget *fontchooser)
+{
+  gtk_tree_model_filter_refilter (GTK_TREE_MODEL_FILTER (fontchooser->priv->filter_model));
+  cc_font_chooser_widget_ensure_selection (fontchooser);
+}
+
+static void
+text_changed_cb (GtkEntry             *entry,
+                 CcFontChooserWidget *fc)
+{
+  cc_font_chooser_widget_refilter_font_list (fc);
+}
+
+static void
+stop_search_cb (GtkEntry             *entry,
+                CcFontChooserWidget *fc)
+{
+  if (gtk_entry_get_text (entry)[0] != 0)
+    gtk_entry_set_text (entry, "");
+  else
+    {
+      GtkWidget *dialog;
+      GtkWidget *button = NULL;
+
+      dialog = gtk_widget_get_ancestor (GTK_WIDGET (fc), GTK_TYPE_DIALOG);
+      if (dialog)
+        button = gtk_dialog_get_widget_for_response (GTK_DIALOG (dialog), GTK_RESPONSE_CANCEL);
+
+      if (button)
+        gtk_widget_activate (button);
+    }
+}
+
+static void
+size_change_cb (GtkAdjustment *adjustment,
+                gpointer       user_data)
+{
+  CcFontChooserWidget *fontchooser = user_data;
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  PangoFontDescription *font_desc;
+  gdouble size = gtk_adjustment_get_value (adjustment);
+
+  font_desc = pango_font_description_new ();
+  if (pango_font_description_get_size_is_absolute (priv->font_desc))
+    pango_font_description_set_absolute_size (font_desc, size * PANGO_SCALE);
+  else
+    pango_font_description_set_size (font_desc, size * PANGO_SCALE);
+
+  cc_font_chooser_widget_take_font_desc (fontchooser, font_desc);
+}
+
+static gboolean
+output_cb (GtkSpinButton *spin,
+           gpointer       data)
+{
+  GtkAdjustment *adjustment;
+  gchar *text;
+  gdouble value;
+
+  adjustment = gtk_spin_button_get_adjustment (spin);
+  value = gtk_adjustment_get_value (adjustment);
+  text = g_strdup_printf ("%2.4g", value);
+  gtk_entry_set_text (GTK_ENTRY (spin), text);
+  g_free (text);
+
+  return TRUE;
+}
+
+static void
+cc_font_chooser_widget_update_marks (CcFontChooserWidget *fontchooser)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  GtkAdjustment *adj, *spin_adj;
+  const int *sizes;
+  gint *font_sizes;
+  gint i, n_sizes;
+  gdouble value, spin_value;
+
+  if (gtk_list_store_iter_is_valid (GTK_LIST_STORE (priv->model), &priv->font_iter))
+    {
+      PangoFontFace *face;
+
+      gtk_tree_model_get (priv->model, &priv->font_iter,
+                          FACE_COLUMN, &face,
+                          -1);
+
+      pango_font_face_list_sizes (face, &font_sizes, &n_sizes);
+
+      /* It seems not many fonts actually have a sane set of sizes */
+      for (i = 0; i < n_sizes; i++)
+        font_sizes[i] = font_sizes[i] / PANGO_SCALE;
+
+      g_object_unref (face);
+    }
+  else
+    {
+      font_sizes = NULL;
+      n_sizes = 0;
+    }
+
+  if (n_sizes < 2)
+    {
+      static const gint fallback_sizes[] = {
+        6, 8, 9, 10, 11, 12, 13, 14, 15, 17, FONT_SIZE_MAX
+      };
+
+      sizes = fallback_sizes;
+      n_sizes = G_N_ELEMENTS (fallback_sizes);
+    }
+  else
+    {
+      sizes = font_sizes;
+    }
+
+  gtk_scale_clear_marks (GTK_SCALE (priv->size_slider));
+  gtk_scale_clear_marks (GTK_SCALE (priv->size_slider2));
+
+  adj        = gtk_range_get_adjustment (GTK_RANGE (priv->size_slider));
+  spin_adj   = gtk_spin_button_get_adjustment (GTK_SPIN_BUTTON (priv->size_spin));
+  spin_value = gtk_adjustment_get_value (spin_adj);
+
+  if (spin_value < sizes[0])
+    value = (gdouble) sizes[0];
+  else if (spin_value > sizes[n_sizes - 1])
+    value = (gdouble)sizes[n_sizes - 1];
+  else
+    value = (gdouble)spin_value;
+
+  /* ensure clamping doesn't callback into font resizing code */
+  g_signal_handlers_block_by_func (adj, size_change_cb, fontchooser);
+  gtk_adjustment_configure (adj,
+                            value,
+                            sizes[0],
+                            sizes[n_sizes - 1],
+                            gtk_adjustment_get_step_increment (adj),
+                            gtk_adjustment_get_page_increment (adj),
+                            gtk_adjustment_get_page_size (adj));
+  g_signal_handlers_unblock_by_func (adj, size_change_cb, fontchooser);
+
+  for (i = 0; i < n_sizes; i++)
+    {
+      gtk_scale_add_mark (GTK_SCALE (priv->size_slider),
+                          sizes[i],
+                          GTK_POS_BOTTOM, NULL);
+      gtk_scale_add_mark (GTK_SCALE (priv->size_slider2),
+                          sizes[i],
+                          GTK_POS_BOTTOM, NULL);
+    }
+
+  g_free (font_sizes);
+}
+
+static void
+row_activated_cb (GtkTreeView       *view,
+                  GtkTreePath       *path,
+                  GtkTreeViewColumn *column,
+                  gpointer           user_data)
+{
+  CcFontChooserWidget *fontchooser = user_data;
+  gchar *fontname;
+
+  fontname = cc_font_chooser_widget_get_font (fontchooser);
+  _cc_font_chooser_font_activated (CC_FONT_CHOOSER (fontchooser), fontname);
+  g_free (fontname);
+}
+
+static void
+cursor_changed_cb (GtkTreeView *treeview,
+                   gpointer     user_data)
+{
+  CcFontChooserWidget *fontchooser = user_data;
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  GtkDelayedFontDescription *desc;
+  GtkTreeIter filter_iter, iter;
+  GtkTreePath *path = NULL;
+
+  gtk_tree_view_get_cursor (treeview, &path, NULL);
+
+  if (!path)
+    return;
+
+  if (!gtk_tree_model_get_iter (priv->filter_model, &filter_iter, path))
+    {
+      gtk_tree_path_free (path);
+      return;
+    }
+
+  gtk_tree_path_free (path);
+
+  gtk_tree_model_filter_convert_iter_to_child_iter (GTK_TREE_MODEL_FILTER (priv->filter_model),
+                                                    &iter,
+                                                    &filter_iter);
+  gtk_tree_model_get (priv->model, &iter,
+                      FONT_DESC_COLUMN, &desc,
+                      -1);
+
+  pango_font_description_set_variations (priv->font_desc, NULL);
+  cc_font_chooser_widget_merge_font_desc (fontchooser,
+                                           gtk_delayed_font_description_get (desc),
+                                           &iter);
+
+  gtk_delayed_font_description_unref (desc);
+}
+
+static gboolean
+resize_by_scroll_cb (GtkWidget      *scrolled_window,
+                     GdkEventScroll *event,
+                     gpointer        user_data)
+{
+  CcFontChooserWidget *fc = user_data;
+  CcFontChooserWidgetPrivate *priv = fc->priv;
+  GtkAdjustment *adj = gtk_spin_button_get_adjustment (GTK_SPIN_BUTTON (priv->size_spin));
+
+  if (event->direction == GDK_SCROLL_UP || event->direction == GDK_SCROLL_RIGHT)
+    gtk_adjustment_set_value (adj,
+                              gtk_adjustment_get_value (adj) +
+                              gtk_adjustment_get_step_increment (adj));
+  else if (event->direction == GDK_SCROLL_DOWN || event->direction == GDK_SCROLL_LEFT)
+    gtk_adjustment_set_value (adj,
+                              gtk_adjustment_get_value (adj) -
+                              gtk_adjustment_get_step_increment (adj));
+  else if (event->direction == GDK_SCROLL_SMOOTH && event->delta_x != 0.0)
+    gtk_adjustment_set_value (adj,
+                              gtk_adjustment_get_value (adj) +
+                              gtk_adjustment_get_step_increment (adj) * event->delta_x);
+  else if (event->direction == GDK_SCROLL_SMOOTH && event->delta_y != 0.0)
+    gtk_adjustment_set_value (adj,
+                              gtk_adjustment_get_value (adj) -
+                              gtk_adjustment_get_step_increment (adj) * event->delta_y);
+
+  return TRUE;
+}
+
+static void
+cc_font_chooser_widget_update_preview_attributes (CcFontChooserWidget *fontchooser)
+{
+  CcFontChooserWidgetPrivate *priv;
+  PangoAttrList *attrs;
+
+  priv = fontchooser->priv;
+
+  attrs = pango_attr_list_new ();
+
+  /* Prevent font fallback */
+  pango_attr_list_insert (attrs, pango_attr_fallback_new (FALSE));
+
+  /* Force current font and features */
+  pango_attr_list_insert (attrs, pango_attr_font_desc_new (priv->font_desc));
+  if (priv->font_features)
+    pango_attr_list_insert (attrs, pango_attr_font_features_new (priv->font_features));
+  if (priv->language)
+    pango_attr_list_insert (attrs, pango_attr_language_new (priv->language));
+
+  gtk_entry_set_attributes (GTK_ENTRY (priv->preview), attrs);
+  pango_attr_list_unref (attrs);
+}
+
+static void
+row_inserted_cb (GtkTreeModel *model,
+                 GtkTreePath  *path,
+                 GtkTreeIter  *iter,
+                 gpointer      user_data)
+{
+  CcFontChooserWidget *fontchooser = user_data;
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+
+  gtk_stack_set_visible_child_name (GTK_STACK (priv->list_stack), "list");
+}
+
+static void
+row_deleted_cb  (GtkTreeModel *model,
+                 GtkTreePath  *path,
+                 gpointer      user_data)
+{
+  CcFontChooserWidget *fontchooser = user_data;
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+
+  if (gtk_tree_model_iter_n_children (model, NULL) == 0)
+    gtk_stack_set_visible_child_name (GTK_STACK (priv->list_stack), "empty");
+}
+
+static void
+cc_font_chooser_widget_map (GtkWidget *widget)
+{
+  CcFontChooserWidget *fontchooser = CC_FONT_CHOOSER_WIDGET (widget);
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+
+  gtk_entry_set_text (GTK_ENTRY (priv->search_entry), "");
+  gtk_stack_set_visible_child_name (GTK_STACK (priv->stack), "list");
+  g_simple_action_set_state (G_SIMPLE_ACTION (priv->tweak_action), g_variant_new_boolean (FALSE));
+
+  GTK_WIDGET_CLASS (cc_font_chooser_widget_parent_class)->map (widget);
+}
+
+static void
+cc_font_chooser_widget_class_init (CcFontChooserWidgetClass *klass)
+{
+  GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
+  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);
+  GParamSpec *pspec;
+
+  g_type_ensure (GTK_TYPE_DELAYED_FONT_DESCRIPTION);
+  g_type_ensure (G_TYPE_THEMED_ICON);
+
+  widget_class->screen_changed = cc_font_chooser_widget_screen_changed;
+  widget_class->map = cc_font_chooser_widget_map;
+
+  gobject_class->finalize = cc_font_chooser_widget_finalize;
+  gobject_class->set_property = cc_font_chooser_widget_set_property;
+  gobject_class->get_property = cc_font_chooser_widget_get_property;
+
+  /**
+   * CcFontChooserWidget:tweak-action:
+   *
+   * A toggle action that can be used to switch to the tweak page
+   * of the font chooser widget, which lets the user tweak the
+   * OpenType features and variation axes of the selected font.
+   *
+   * The action will be enabled or disabled depending on whether
+   * the selected font has any features or axes.
+   */
+  pspec = g_param_spec_object ("tweak-action",
+                              ("The tweak action"),
+                              ("The toggle action to switch to the tweak page"),
+                              G_TYPE_ACTION,
+                              G_PARAM_READABLE | G_PARAM_STATIC_STRINGS);
+  g_object_class_install_property (gobject_class, PROP_TWEAK_ACTION, pspec);
+
+  _cc_font_chooser_install_properties (gobject_class);
+
+  /* Bind class to template */
+  gtk_widget_class_set_template_from_resource (widget_class,
+					       "/org/gnome/control-center/font/font-chooser-widget.ui");
+
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, search_entry);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, family_face_list);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, family_face_column);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, family_face_cell);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, list_scrolled_window);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, list_stack);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, model);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, filter_model);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, preview);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, preview2);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, size_spin);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, size_slider);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, size_slider2);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, stack);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, font_name_label);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, feature_box);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, axis_grid);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, no_font_label);
+  gtk_widget_class_bind_template_child_private (widget_class, CcFontChooserWidget, size_label);
+
+  gtk_widget_class_bind_template_callback (widget_class, text_changed_cb);
+  gtk_widget_class_bind_template_callback (widget_class, stop_search_cb);
+  gtk_widget_class_bind_template_callback (widget_class, cursor_changed_cb);
+  gtk_widget_class_bind_template_callback (widget_class, row_activated_cb);
+  gtk_widget_class_bind_template_callback (widget_class, cc_font_chooser_widget_set_cell_size);
+  gtk_widget_class_bind_template_callback (widget_class, resize_by_scroll_cb);
+  gtk_widget_class_bind_template_callback (widget_class, row_deleted_cb);
+  gtk_widget_class_bind_template_callback (widget_class, row_inserted_cb);
+  gtk_widget_class_bind_template_callback (widget_class, row_deleted_cb);
+  gtk_widget_class_bind_template_callback (widget_class, size_change_cb);
+  gtk_widget_class_bind_template_callback (widget_class, output_cb);
+  gtk_widget_class_bind_template_callback (widget_class, selection_changed);
+
+  gtk_widget_class_set_css_name (widget_class, ("fontchooser"));
+}
+
+static void
+change_tweak (GSimpleAction *action,
+              GVariant      *state,
+              gpointer       data)
+{
+  CcFontChooserWidget *fontchooser = data;
+  gboolean tweak = g_variant_get_boolean (state);
+
+  if (tweak)
+    {
+      gtk_entry_grab_focus_without_selecting (GTK_ENTRY (fontchooser->priv->preview2));
+      gtk_stack_set_visible_child_name (GTK_STACK (fontchooser->priv->stack), "tweaks");
+    }
+  else
+    {
+      gtk_entry_grab_focus_without_selecting (GTK_ENTRY (fontchooser->priv->search_entry));
+      gtk_stack_set_visible_child_name (GTK_STACK (fontchooser->priv->stack), "list");
+    }
+
+  g_simple_action_set_state (action, state);
+}
+
+#if defined(HAVE_HARFBUZZ) && defined(HAVE_PANGOFT)
+
+typedef struct {
+  guint32 tag;
+  GtkAdjustment *adjustment;
+  GtkWidget *label;
+  GtkWidget *scale;
+  GtkWidget *spin;
+  GtkWidget *fontchooser;
+} Axis;
+
+static guint
+axis_hash (gconstpointer v)
+{
+  const Axis *a = v;
+
+  return a->tag;
+}
+
+static gboolean
+axis_equal (gconstpointer v1, gconstpointer v2)
+{
+  const Axis *a1 = v1;
+  const Axis *a2 = v2;
+
+  return a1->tag == a2->tag;
+}
+
+static void
+axis_remove (gpointer key,
+             gpointer value,
+             gpointer data)
+{
+  Axis *a = value;
+
+  gtk_widget_destroy (a->label);
+  gtk_widget_destroy (a->scale);
+  gtk_widget_destroy (a->spin);
+}
+
+static void
+axis_free (gpointer v)
+{
+  Axis *a = v;
+
+  g_free (a);
+}
+
+#endif
+
+static void
+cc_font_chooser_widget_init (CcFontChooserWidget *fontchooser)
+{
+  CcFontChooserWidgetPrivate *priv;
+  gchar *test;
+
+  fontchooser->priv = cc_font_chooser_widget_get_instance_private (fontchooser);
+  priv = fontchooser->priv;
+
+  gtk_widget_init_template (GTK_WIDGET (fontchooser));
+
+#if defined(HAVE_HARFBUZZ) && defined(HAVE_PANGOFT)
+  priv->axes = g_hash_table_new_full (axis_hash, axis_equal, NULL, axis_free);
+#endif
+
+  /* Default preview string  */
+  priv->preview_text = g_strdup (pango_language_get_sample_string (NULL));
+  priv->show_preview_entry = TRUE;
+  priv->font_desc = pango_font_description_new ();
+  priv->level = CC_FONT_CHOOSER_LEVEL_FAMILY |
+                CC_FONT_CHOOSER_LEVEL_STYLE |
+                CC_FONT_CHOOSER_LEVEL_SIZE;
+  priv->language = pango_language_get_default ();
+
+  /* Set default preview text */
+  gtk_entry_set_text (GTK_ENTRY (priv->preview), priv->preview_text);
+
+  /* Set translate text because don't translate text from .ui */
+  gtk_entry_set_placeholder_text (GTK_ENTRY (priv->preview), _("Preview text"));
+  gtk_label_set_text (GTK_LABEL (priv->no_font_label), _("No Fonts Found"));
+  gtk_entry_set_placeholder_text (GTK_ENTRY (priv->search_entry), _("Search font name"));
+  gtk_label_set_text (GTK_LABEL (priv->size_label), _("Size"));
+
+  cc_font_chooser_widget_update_preview_attributes (fontchooser);
+
+  gtk_widget_add_events (priv->preview, GDK_SCROLL_MASK);
+
+  /* Set the upper values of the spin/scale with G_MAXINT / PANGO_SCALE */
+  gtk_spin_button_set_range (GTK_SPIN_BUTTON (priv->size_spin),
+                             6.0, (gdouble)FONT_SIZE_MAX);
+                             //1.0, (gdouble)(G_MAXINT / PANGO_SCALE));
+  gtk_adjustment_set_upper (gtk_range_get_adjustment (GTK_RANGE (priv->size_slider)),
+                            (gdouble)FONT_SIZE_MAX);
+                            //(gdouble)(G_MAXINT / PANGO_SCALE));
+
+  /* Setup treeview/model auxilary functions */
+  gtk_tree_model_filter_set_visible_func (GTK_TREE_MODEL_FILTER (priv->filter_model),
+                                          visible_func, (gpointer)priv, NULL);
+
+  gtk_tree_view_column_set_cell_data_func (priv->family_face_column,
+                                           priv->family_face_cell,
+                                           cc_font_chooser_widget_cell_data_func,
+                                           fontchooser,
+                                           NULL);
+
+  priv->tweak_action = G_ACTION (g_simple_action_new_stateful ("tweak", NULL, g_variant_new_boolean (FALSE)));
+  g_signal_connect (priv->tweak_action, "change-state", G_CALLBACK (change_tweak), fontchooser);
+
+  /* Load data and set initial style-dependent parameters */
+  cc_font_chooser_widget_load_fonts (fontchooser, TRUE);
+#if defined(HAVE_HARFBUZZ) && defined(HAVE_PANGOFT)
+  cc_font_chooser_widget_populate_features (fontchooser);
+#endif
+  cc_font_chooser_widget_set_cell_size (fontchooser);
+  cc_font_chooser_widget_take_font_desc (fontchooser, NULL);
+}
+
+/**
+ * cc_font_chooser_widget_new:
+ *
+ * Creates a new #CcFontChooserWidget.
+ *
+ * Returns: a new #CcFontChooserWidget
+ *
+ * Since: 3.2
+ */
+GtkWidget *
+cc_font_chooser_widget_new (void)
+{
+  return g_object_new (CC_TYPE_FONT_CHOOSER_WIDGET, NULL);
+}
+
+static int
+cmp_families (const void *a,
+              const void *b)
+{
+  const char *a_name = pango_font_family_get_name (*(PangoFontFamily **)a);
+  const char *b_name = pango_font_family_get_name (*(PangoFontFamily **)b);
+
+  return g_utf8_collate (a_name, b_name);
+}
+
+static void
+cc_font_chooser_widget_load_fonts (CcFontChooserWidget *fontchooser,
+                                    gboolean              force)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  GtkListStore *list_store;
+  gint n_families, i;
+  PangoFontFamily **families;
+  guint fontconfig_timestamp;
+  gboolean need_reload;
+  PangoFontMap *font_map;
+
+  g_object_get (gtk_widget_get_settings (GTK_WIDGET (fontchooser)),
+                "gtk-fontconfig-timestamp", &fontconfig_timestamp,
+                NULL);
+
+  /* The fontconfig timestamp is only set on systems with fontconfig; every
+   * other platform will set it to 0. For those systems, we fall back to
+   * reloading the fonts every time.
+   */
+  need_reload = fontconfig_timestamp == 0 ||
+                fontconfig_timestamp != priv->last_fontconfig_timestamp;
+
+  priv->last_fontconfig_timestamp = fontconfig_timestamp;
+
+  if (!need_reload && !force)
+    return;
+
+  list_store = GTK_LIST_STORE (priv->model);
+
+  if (priv->font_map)
+    font_map = priv->font_map;
+  else
+    font_map = pango_cairo_font_map_get_default ();
+  pango_font_map_list_families (font_map, &families, &n_families);
+
+  qsort (families, n_families, sizeof (PangoFontFamily *), cmp_families);
+
+  g_signal_handlers_block_by_func (priv->family_face_list, cursor_changed_cb, fontchooser);
+  gtk_list_store_clear (list_store);
+  g_signal_handlers_unblock_by_func (priv->family_face_list, cursor_changed_cb, fontchooser);
+
+  /* Iterate over families and faces */
+  for (i = 0; i < n_families; i++)
+    {
+      GtkTreeIter     iter;
+      PangoFontFace **faces;
+      int             j, n_faces;
+      const gchar    *fam_name = pango_font_family_get_name (families[i]);
+
+      pango_font_family_list_faces (families[i], &faces, &n_faces);
+
+      for (j = 0; j < n_faces; j++)
+        {
+          GtkDelayedFontDescription *desc;
+          const gchar *face_name;
+          char *title;
+
+          face_name = pango_font_face_get_face_name (faces[j]);
+
+          if ((priv->level & CC_FONT_CHOOSER_LEVEL_STYLE) != 0)
+            title = g_strconcat (fam_name, " ", face_name, NULL);
+          else
+            title = g_strdup (fam_name);
+
+          desc = gtk_delayed_font_description_new (faces[j]);
+
+          gtk_list_store_insert_with_values (list_store, &iter, -1,
+                                             FAMILY_COLUMN, families[i],
+                                             FACE_COLUMN, faces[j],
+                                             FONT_DESC_COLUMN, desc,
+                                             PREVIEW_TITLE_COLUMN, title,
+                                             -1);
+
+          g_free (title);
+          gtk_delayed_font_description_unref (desc);
+
+          if ((priv->level & CC_FONT_CHOOSER_LEVEL_STYLE) == 0)
+            break;
+        }
+
+      g_free (faces);
+    }
+
+  g_free (families);
+
+  /* now make sure the font list looks right */
+  if (!cc_font_chooser_widget_find_font (fontchooser, priv->font_desc, &priv->font_iter))
+    memset (&priv->font_iter, 0, sizeof (GtkTreeIter));
+
+  cc_font_chooser_widget_ensure_selection (fontchooser);
+}
+
+static gboolean
+visible_func (GtkTreeModel *model,
+              GtkTreeIter  *iter,
+              gpointer      user_data)
+{
+  CcFontChooserWidgetPrivate *priv = user_data;
+  gboolean result = TRUE;
+  const gchar *search_text;
+  gchar **split_terms;
+  gchar *font_name, *font_name_casefold;
+  guint i;
+
+  if (priv->filter_func != NULL)
+    {
+      PangoFontFamily *family;
+      PangoFontFace *face;
+
+      gtk_tree_model_get (model, iter,
+                          FAMILY_COLUMN, &family,
+                          FACE_COLUMN, &face,
+                          -1);
+
+      result = priv->filter_func (family, face, priv->filter_data);
+
+      g_object_unref (family);
+      g_object_unref (face);
+      
+      if (!result)
+        return FALSE;
+    }
+
+  /* If there's no filter string we show the item */
+  search_text = gtk_entry_get_text (GTK_ENTRY (priv->search_entry));
+  if (strlen (search_text) == 0)
+    return TRUE;
+
+  gtk_tree_model_get (model, iter,
+                      PREVIEW_TITLE_COLUMN, &font_name,
+                      -1);
+
+  if (font_name == NULL)
+    return FALSE;
+
+  split_terms = g_strsplit (search_text, " ", 0);
+  font_name_casefold = g_utf8_casefold (font_name, -1);
+
+  for (i = 0; split_terms[i] && result; i++)
+    {
+      gchar* term_casefold = g_utf8_casefold (split_terms[i], -1);
+
+      if (!strstr (font_name_casefold, term_casefold))
+        result = FALSE;
+
+      g_free (term_casefold);
+    }
+
+  g_free (font_name_casefold);
+  g_free (font_name);
+  g_strfreev (split_terms);
+
+  return result;
+}
+
+/* in pango units */
+static int
+cc_font_chooser_widget_get_preview_text_height (CcFontChooserWidget *fontchooser)
+{
+  GtkWidget *treeview = fontchooser->priv->family_face_list;
+  double dpi, font_size;
+
+  dpi = gdk_screen_get_resolution (gtk_widget_get_screen (treeview));
+  gtk_style_context_get (gtk_widget_get_style_context (treeview),
+                         gtk_widget_get_state_flags (treeview),
+                         "font-size", &font_size,
+                         NULL);
+
+  return (dpi < 0.0 ? 96.0 : dpi) / 72.0 * PANGO_SCALE_X_LARGE * font_size * PANGO_SCALE;
+}
+
+static PangoAttrList *
+cc_font_chooser_widget_get_preview_attributes (CcFontChooserWidget       *fontchooser,
+                                                const PangoFontDescription *font_desc)
+{
+  PangoAttribute *attribute;
+  PangoAttrList *attrs;
+
+  attrs = pango_attr_list_new ();
+
+  if (font_desc)
+    {
+      attribute = pango_attr_font_desc_new (font_desc);
+      pango_attr_list_insert (attrs, attribute);
+    }
+
+  attribute = pango_attr_size_new_absolute (cc_font_chooser_widget_get_preview_text_height (fontchooser));
+  pango_attr_list_insert (attrs, attribute);
+
+  return attrs;
+}
+
+static void
+cc_font_chooser_widget_cell_data_func (GtkTreeViewColumn *column,
+                                        GtkCellRenderer   *cell,
+                                        GtkTreeModel      *tree_model,
+                                        GtkTreeIter       *iter,
+                                        gpointer           user_data)
+{
+  CcFontChooserWidget *fontchooser = user_data;
+  GtkDelayedFontDescription *desc;
+  PangoAttrList *attrs;
+  char *preview_title;
+
+  gtk_tree_model_get (tree_model, iter,
+                      PREVIEW_TITLE_COLUMN, &preview_title,
+                      FONT_DESC_COLUMN, &desc,
+                      -1);
+
+  attrs = cc_font_chooser_widget_get_preview_attributes (fontchooser,
+                                                          gtk_delayed_font_description_get (desc));
+
+  g_object_set (cell,
+                "xpad", 20,
+                "ypad", 10,
+                "attributes", attrs,
+                "text", preview_title,
+                NULL);
+
+  gtk_delayed_font_description_unref (desc);
+  pango_attr_list_unref (attrs);
+  g_free (preview_title);
+}
+
+static void
+cc_font_chooser_widget_set_cell_size (CcFontChooserWidget *fontchooser)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  PangoAttrList *attrs;
+  GtkRequisition size;
+
+  gtk_cell_renderer_set_fixed_size (priv->family_face_cell, -1, -1);
+
+  attrs = cc_font_chooser_widget_get_preview_attributes (fontchooser, NULL);
+
+  g_object_set (priv->family_face_cell,
+                "xpad", 20,
+                "ypad", 10,
+                "attributes", attrs,
+                "text", "x",
+                NULL);
+
+  pango_attr_list_unref (attrs);
+
+  gtk_cell_renderer_get_preferred_size (priv->family_face_cell,
+                                        priv->family_face_list,
+                                        &size,
+                                        NULL);
+  gtk_cell_renderer_set_fixed_size (priv->family_face_cell, size.width, size.height);
+}
+
+static void
+cc_font_chooser_widget_finalize (GObject *object)
+{
+  CcFontChooserWidget *fontchooser = CC_FONT_CHOOSER_WIDGET (object);
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+
+  if (priv->font_desc)
+    pango_font_description_free (priv->font_desc);
+
+  if (priv->filter_data_destroy)
+    priv->filter_data_destroy (priv->filter_data);
+
+  g_free (priv->preview_text);
+
+  g_clear_object (&priv->font_map);
+
+  g_object_unref (priv->tweak_action);
+
+  g_list_free_full (priv->feature_items, g_free);
+
+  if (priv->axes)
+    g_hash_table_unref (priv->axes);
+
+  g_free (priv->font_features);
+
+  G_OBJECT_CLASS (cc_font_chooser_widget_parent_class)->finalize (object);
+}
+
+static gboolean
+my_pango_font_family_equal (const char *familya,
+                            const char *familyb)
+{
+  return g_ascii_strcasecmp (familya, familyb) == 0;
+}
+
+static gboolean
+cc_font_chooser_widget_find_font (CcFontChooserWidget        *fontchooser,
+                                   const PangoFontDescription  *font_desc,
+                                   /* out arguments */
+                                   GtkTreeIter                 *iter)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  gboolean valid;
+
+  if (pango_font_description_get_family (font_desc) == NULL)
+    return FALSE;
+
+  for (valid = gtk_tree_model_get_iter_first (priv->model, iter);
+       valid;
+       valid = gtk_tree_model_iter_next (priv->model, iter))
+    {
+      GtkDelayedFontDescription *desc;
+      PangoFontDescription *merged;
+      PangoFontFamily *family;
+
+      gtk_tree_model_get (priv->model, iter,
+                          FAMILY_COLUMN, &family,
+                          FONT_DESC_COLUMN, &desc,
+                          -1);
+
+      if (!my_pango_font_family_equal (pango_font_description_get_family (font_desc),
+                                       pango_font_family_get_name (family)))
+        {
+          gtk_delayed_font_description_unref (desc);
+          g_object_unref (family);
+          continue;
+        }
+
+      merged = pango_font_description_copy_static (gtk_delayed_font_description_get (desc));
+
+      pango_font_description_merge_static (merged, font_desc, FALSE);
+      if (pango_font_description_equal (merged, font_desc))
+        {
+          gtk_delayed_font_description_unref (desc);
+          pango_font_description_free (merged);
+          g_object_unref (family);
+          break;
+        }
+
+      gtk_delayed_font_description_unref (desc);
+      pango_font_description_free (merged);
+      g_object_unref (family);
+    }
+  
+  return valid;
+}
+
+static void
+fontconfig_changed (CcFontChooserWidget *fontchooser)
+{
+  cc_font_chooser_widget_load_fonts (fontchooser, TRUE);
+}
+
+static void
+cc_font_chooser_widget_screen_changed (GtkWidget *widget,
+                                        GdkScreen *previous_screen)
+{
+  CcFontChooserWidget *fontchooser = CC_FONT_CHOOSER_WIDGET (widget);
+  GtkSettings *settings;
+
+  if (GTK_WIDGET_CLASS (cc_font_chooser_widget_parent_class)->screen_changed)
+    GTK_WIDGET_CLASS (cc_font_chooser_widget_parent_class)->screen_changed (widget, previous_screen);
+
+  if (previous_screen)
+    {
+      settings = gtk_settings_get_for_screen (previous_screen);
+      g_signal_handlers_disconnect_by_func (settings, fontconfig_changed, widget);
+    }
+  settings = gtk_widget_get_settings (widget);
+  g_signal_connect_object (settings, "notify::gtk-fontconfig-timestamp",
+                           G_CALLBACK (fontconfig_changed), widget, G_CONNECT_SWAPPED);
+
+  if (previous_screen == NULL)
+    previous_screen = gdk_screen_get_default ();
+
+  if (previous_screen == gtk_widget_get_screen (widget))
+    return;
+
+  cc_font_chooser_widget_load_fonts (fontchooser, FALSE);
+}
+
+static PangoFontFamily *
+cc_font_chooser_widget_get_family (CcFontChooser *chooser)
+{
+  CcFontChooserWidget *fontchooser = CC_FONT_CHOOSER_WIDGET (chooser);
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  PangoFontFamily *family;
+
+  if (!gtk_list_store_iter_is_valid (GTK_LIST_STORE (priv->model), &priv->font_iter))
+    return NULL;
+
+  gtk_tree_model_get (priv->model, &priv->font_iter,
+                      FAMILY_COLUMN, &family,
+                      -1);
+  g_object_unref (family);
+
+  return family;
+}
+
+static PangoFontFace *
+cc_font_chooser_widget_get_face (CcFontChooser *chooser)
+{
+  CcFontChooserWidget *fontchooser = CC_FONT_CHOOSER_WIDGET (chooser);
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  PangoFontFace *face;
+
+  if (!gtk_list_store_iter_is_valid (GTK_LIST_STORE (priv->model), &priv->font_iter))
+    return NULL;
+
+  gtk_tree_model_get (priv->model, &priv->font_iter,
+                      FACE_COLUMN, &face,
+                      -1);
+  g_object_unref (face);
+
+  return face;
+}
+
+static gint
+cc_font_chooser_widget_get_size (CcFontChooser *chooser)
+{
+  CcFontChooserWidget *fontchooser = CC_FONT_CHOOSER_WIDGET (chooser);
+  PangoFontDescription *desc = cc_font_chooser_widget_get_font_desc (fontchooser);
+
+  if (desc)
+    return pango_font_description_get_size (desc);
+
+  return -1;
+}
+
+static gchar *
+cc_font_chooser_widget_get_font (CcFontChooserWidget *fontchooser)
+{
+  PangoFontDescription *desc = cc_font_chooser_widget_get_font_desc (fontchooser);
+
+  if (desc)
+    return pango_font_description_to_string (desc);
+
+  return NULL;
+}
+
+static PangoFontDescription *
+cc_font_chooser_widget_get_font_desc (CcFontChooserWidget *fontchooser)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  GtkTreeSelection *selection;
+
+  selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (priv->family_face_list));
+  if (gtk_tree_selection_count_selected_rows (selection) > 0)
+    return fontchooser->priv->font_desc;
+
+  return NULL;
+}
+
+static void
+cc_font_chooser_widget_set_font (CcFontChooserWidget *fontchooser,
+                                  const gchar          *fontname)
+{
+  PangoFontDescription *font_desc;
+
+  font_desc = pango_font_description_from_string (fontname);
+  cc_font_chooser_widget_take_font_desc (fontchooser, font_desc);
+}
+
+static void
+cc_font_chooser_widget_update_font_name (CcFontChooserWidget *fontchooser,
+                                          GtkTreeSelection     *selection)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  GtkTreeModel *model;
+  GtkTreeIter iter;
+  PangoFontFamily *family;
+  PangoFontFace *face;
+  GtkDelayedFontDescription *desc;
+  const PangoFontDescription *font_desc;
+  PangoAttrList *attrs;
+  const char *fam_name;
+  const char *face_name;
+  char *title;
+
+  gtk_tree_selection_get_selected (selection, &model, &iter);
+  gtk_tree_model_get (model, &iter,
+                      FAMILY_COLUMN, &family,
+                      FACE_COLUMN, &face,
+                      FONT_DESC_COLUMN, &desc,
+                      -1);
+
+  fam_name = pango_font_family_get_name (family);
+  face_name = pango_font_face_get_face_name (face);
+  font_desc = gtk_delayed_font_description_get (desc);
+
+  g_object_unref (family);
+  g_object_unref (face);
+  gtk_delayed_font_description_unref (desc);
+
+  if (priv->level == CC_FONT_CHOOSER_LEVEL_FAMILY)
+    title = g_strdup (fam_name);
+  else
+    title = g_strconcat (fam_name, " ", face_name, NULL);
+
+  attrs = cc_font_chooser_widget_get_preview_attributes (fontchooser, font_desc);
+  gtk_label_set_attributes (GTK_LABEL (priv->font_name_label), attrs);
+  pango_attr_list_unref (attrs);
+
+  gtk_label_set_label (GTK_LABEL (priv->font_name_label), title);
+  g_free (title);
+}
+
+static void
+selection_changed (GtkTreeSelection     *selection,
+                   CcFontChooserWidget *fontchooser)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+
+  g_object_notify (G_OBJECT (fontchooser), "font");
+  g_object_notify (G_OBJECT (fontchooser), "font-desc");
+
+  if (gtk_tree_selection_count_selected_rows (selection) > 0)
+    {
+      cc_font_chooser_widget_update_font_name (fontchooser, selection);
+      g_simple_action_set_enabled (G_SIMPLE_ACTION (priv->tweak_action), TRUE);
+    }
+  else
+    {
+      g_simple_action_set_state (G_SIMPLE_ACTION (priv->tweak_action), g_variant_new_boolean (FALSE));
+      g_simple_action_set_enabled (G_SIMPLE_ACTION (priv->tweak_action), FALSE);
+    }
+}
+
+static void
+cc_font_chooser_widget_ensure_selection (CcFontChooserWidget *fontchooser)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  GtkTreeSelection *selection;
+  GtkTreeIter filter_iter;
+  
+  selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (priv->family_face_list));
+
+  if (gtk_list_store_iter_is_valid (GTK_LIST_STORE (priv->model), &priv->font_iter) &&
+      gtk_tree_model_filter_convert_child_iter_to_iter (GTK_TREE_MODEL_FILTER (priv->filter_model),
+                                                        &filter_iter,
+                                                        &priv->font_iter))
+    {
+      GtkTreePath *path = gtk_tree_model_get_path (GTK_TREE_MODEL (priv->filter_model),
+                                                   &filter_iter);
+
+      gtk_tree_selection_select_iter (selection, &filter_iter);
+      gtk_tree_view_scroll_to_cell (GTK_TREE_VIEW (priv->family_face_list),
+                                    path, NULL, FALSE, 0.0, 0.0);
+      gtk_tree_path_free (path);
+    }
+  else
+    {
+      gtk_tree_selection_unselect_all (selection);
+    }
+}
+
+#if defined(HAVE_HARFBUZZ) && defined(HAVE_PANGOFT)
+
+/* OpenType variations */
+
+#define FixedToFloat(f) (((float)(f))/65536.0)
+
+static void
+add_font_variations (CcFontChooserWidget *fontchooser,
+                     GString              *s)
+{
+  GHashTableIter iter;
+  Axis *axis;
+  const char *sep = "";
+  char buf[G_ASCII_DTOSTR_BUF_SIZE];
+
+  g_hash_table_iter_init (&iter, fontchooser->priv->axes);
+  while (g_hash_table_iter_next (&iter, (gpointer *)NULL, (gpointer *)&axis))
+    {
+      char tag[5];
+      double value;
+
+      tag[0] = (axis->tag >> 24) & 0xff;
+      tag[1] = (axis->tag >> 16) & 0xff;
+      tag[2] = (axis->tag >> 8) & 0xff;
+      tag[3] = (axis->tag >> 0) & 0xff;
+      tag[4] = '\0';
+      value = gtk_adjustment_get_value (axis->adjustment);
+      g_string_append_printf (s, "%s%s=%s", sep, tag, g_ascii_dtostr (buf, sizeof(buf), value));
+      sep = ",";
+    }
+}
+
+static void
+adjustment_changed (GtkAdjustment *adjustment,
+                    Axis          *axis)
+{
+  CcFontChooserWidget *fontchooser = CC_FONT_CHOOSER_WIDGET (axis->fontchooser);
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  PangoFontDescription *font_desc;
+  GString *s;
+
+  priv->updating_variations = TRUE;
+
+  s = g_string_new ("");
+  add_font_variations (fontchooser, s);
+
+  if (s->len > 0)
+    {
+      font_desc = pango_font_description_new ();
+      pango_font_description_set_variations (font_desc, s->str);
+      cc_font_chooser_widget_take_font_desc (fontchooser, font_desc);
+    }
+
+  g_string_free (s, TRUE);
+
+  priv->updating_variations = FALSE;
+}
+
+static gboolean
+should_show_axis (FT_Var_Axis *ax)
+{
+  /* FIXME use FT_Get_Var_Axis_Flags */
+  if (ax->tag == FT_MAKE_TAG ('o', 'p', 's', 'z'))
+    return FALSE;
+
+  return TRUE;
+}
+
+static gboolean
+is_named_instance (FT_Face face)
+{
+  return (face->face_index >> 16) > 0;
+}
+
+static struct {
+  guint32 tag;
+  const char *name;
+} axis_names[] = {
+  { FT_MAKE_TAG ('w', 'd', 't', 'h'), N_("Width") },
+  { FT_MAKE_TAG ('w', 'g', 'h', 't'), N_("Weight") },
+  { FT_MAKE_TAG ('i', 't', 'a', 'l'), N_("Italic") },
+  { FT_MAKE_TAG ('s', 'l', 'n', 't'), N_("Slant") },
+  { FT_MAKE_TAG ('o', 'p', 's', 'z'), N_("Optical Size") },
+};
+
+static gboolean
+add_axis (CcFontChooserWidget *fontchooser,
+          FT_Face               face,
+          FT_Var_Axis          *ax,
+          FT_Fixed              value,
+          int                   row)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  Axis *axis;
+  const char *name;
+  int i;
+
+  axis = g_new (Axis, 1);
+  axis->tag = ax->tag;
+  axis->fontchooser = GTK_WIDGET (fontchooser);
+
+  name = ax->name;
+  for (i = 0; i < G_N_ELEMENTS (axis_names); i++)
+    {
+      if (axis_names[i].tag == ax->tag)
+        {
+          name = _(axis_names[i].name);
+          break;
+        }
+    }
+  axis->label = gtk_label_new (name);
+  gtk_widget_show (axis->label);
+  gtk_widget_set_halign (axis->label, GTK_ALIGN_START);
+  gtk_widget_set_valign (axis->label, GTK_ALIGN_BASELINE);
+  gtk_grid_attach (GTK_GRID (priv->axis_grid), axis->label, 0, row, 1, 1);
+  axis->adjustment = gtk_adjustment_new ((double)FixedToFloat(value),
+                                         (double)FixedToFloat(ax->minimum),
+                                         (double)FixedToFloat(ax->maximum),
+                                         1.0, 10.0, 0.0);
+  axis->scale = gtk_scale_new (GTK_ORIENTATION_HORIZONTAL, axis->adjustment);
+  gtk_widget_show (axis->scale);
+  gtk_scale_add_mark (GTK_SCALE (axis->scale), (double)FixedToFloat(ax->def), GTK_POS_TOP, NULL);
+  gtk_widget_set_valign (axis->scale, GTK_ALIGN_BASELINE);
+  gtk_widget_set_hexpand (axis->scale, TRUE);
+  gtk_widget_set_size_request (axis->scale, 100, -1);
+  gtk_scale_set_draw_value (GTK_SCALE (axis->scale), FALSE);
+  gtk_grid_attach (GTK_GRID (priv->axis_grid), axis->scale, 1, row, 1, 1);
+  axis->spin = gtk_spin_button_new (axis->adjustment, 0, 0);
+  gtk_widget_show (axis->spin);
+  g_signal_connect (axis->spin, "output", G_CALLBACK (output_cb), fontchooser);
+  gtk_widget_set_valign (axis->spin, GTK_ALIGN_BASELINE);
+  gtk_grid_attach (GTK_GRID (priv->axis_grid), axis->spin, 2, row, 1, 1);
+
+  g_hash_table_add (priv->axes, axis);
+
+  adjustment_changed (axis->adjustment, axis);
+  g_signal_connect (axis->adjustment, "value-changed", G_CALLBACK (adjustment_changed), axis);
+  if (is_named_instance (face) || !should_show_axis (ax))
+    {
+      gtk_widget_hide (axis->label);
+      gtk_widget_hide (axis->scale);
+      gtk_widget_hide (axis->spin);
+
+      return FALSE;
+    }
+
+  return TRUE;
+}
+
+static gboolean
+cc_font_chooser_widget_update_font_variations (CcFontChooserWidget *fontchooser)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  PangoFont *pango_font;
+  FT_Face ft_face;
+  FT_MM_Var *ft_mm_var;
+  FT_Error ret;
+  gboolean has_axis = FALSE;
+
+  if (priv->updating_variations)
+    return FALSE;
+
+  g_hash_table_foreach (priv->axes, axis_remove, NULL);
+  g_hash_table_remove_all (priv->axes);
+
+  if ((priv->level & CC_FONT_CHOOSER_LEVEL_VARIATIONS) == 0)
+    return FALSE;
+
+  pango_font = pango_context_load_font (gtk_widget_get_pango_context (GTK_WIDGET (fontchooser)),
+                                        priv->font_desc);
+  ft_face = pango_fc_font_lock_face (PANGO_FC_FONT (pango_font));
+
+  ret = FT_Get_MM_Var (ft_face, &ft_mm_var);
+  if (ret == 0)
+    {
+      int i;
+      FT_Fixed *coords;
+
+      coords = g_new (FT_Fixed, ft_mm_var->num_axis);
+      for (i = 0; i < ft_mm_var->num_axis; i++)
+        coords[i] = ft_mm_var->axis[i].def;
+
+      if (ft_face->face_index > 0)
+        {
+          int instance_id = ft_face->face_index >> 16;
+          if (instance_id && instance_id <= ft_mm_var->num_namedstyles)
+            {
+              FT_Var_Named_Style *instance = &ft_mm_var->namedstyle[instance_id - 1];
+              memcpy (coords, instance->coords, ft_mm_var->num_axis * sizeof (*coords));
+            }
+        }
+
+      for (i = 0; i < ft_mm_var->num_axis; i++)
+        {
+          if (add_axis (fontchooser, ft_face, &ft_mm_var->axis[i], coords[i], i + 4))
+            has_axis = TRUE;
+        }
+
+      g_free (coords);
+      free (ft_mm_var);
+    }
+
+  pango_fc_font_unlock_face (PANGO_FC_FONT (pango_font));
+  g_object_unref (pango_font);
+
+  return has_axis;
+}
+
+/* OpenType features */
+
+/* look for a lang / script combination that matches the
+ * language property and is supported by the hb_face. If
+ * none is found, return the default lang / script tags.
+ */
+static void
+find_language_and_script (CcFontChooserWidget *fontchooser,
+                          hb_face_t            *hb_face,
+                          hb_tag_t             *lang_tag,
+                          hb_tag_t             *script_tag)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  gint i, j, k;
+  hb_tag_t scripts[80];
+  unsigned int n_scripts;
+  unsigned int count;
+  hb_tag_t table[2] = { HB_OT_TAG_GSUB, HB_OT_TAG_GPOS };
+  hb_language_t lang;
+  const char *langname, *p;
+
+  langname = pango_language_to_string (priv->language);
+  p = strchr (langname, '-');
+  lang = hb_language_from_string (langname, p ? p - langname : -1);
+
+  n_scripts = 0;
+  for (i = 0; i < 2; i++)
+    {
+      count = G_N_ELEMENTS (scripts);
+      hb_ot_layout_table_get_script_tags (hb_face, table[i], n_scripts, &count, scripts);
+      n_scripts += count;
+    }
+
+  for (j = 0; j < n_scripts; j++)
+    {
+      hb_tag_t languages[80];
+      unsigned int n_languages;
+
+      n_languages = 0;
+      for (i = 0; i < 2; i++)
+        {
+          count = G_N_ELEMENTS (languages);
+          hb_ot_layout_script_get_language_tags (hb_face, table[i], j, n_languages, &count, languages);
+          n_languages += count;
+        }
+
+      for (k = 0; k < n_languages; k++)
+        {
+          if (lang == hb_ot_tag_to_language (languages[k]))
+            {
+              *script_tag = scripts[j];
+              *lang_tag = languages[k];
+              return;
+            }
+        }
+    }
+
+  *lang_tag = HB_OT_TAG_DEFAULT_LANGUAGE;
+  *script_tag = HB_OT_TAG_DEFAULT_SCRIPT;
+}
+
+typedef struct {
+  hb_tag_t tag;
+  const char *name;
+  GtkWidget *top;
+  GtkWidget *feat;
+  GtkWidget *example;
+} FeatureItem;
+
+static const char *
+get_feature_display_name (hb_tag_t tag)
+{
+  int i;
+
+  for (i = 0; i < G_N_ELEMENTS (open_type_layout_features); i++)
+    {
+      if (tag == open_type_layout_features[i].tag)
+        return g_dpgettext2 (NULL, "OpenType layout", open_type_layout_features[i].name);
+    }
+
+  return NULL;
+}
+
+static void
+set_inconsistent (GtkCheckButton *button,
+                  gboolean        inconsistent)
+{
+  if (inconsistent)
+    gtk_widget_set_state_flags (GTK_WIDGET (button), GTK_STATE_FLAG_INCONSISTENT, FALSE);
+  else
+    gtk_widget_unset_state_flags (GTK_WIDGET (button), GTK_STATE_FLAG_INCONSISTENT);
+//  gtk_widget_set_opacity (gtk_widget_get_first_child (GTK_WIDGET (button)), inconsistent ? 0.0 : 1.0);
+}
+
+static void
+feat_clicked (GtkWidget *feat,
+              gpointer   data)
+{
+  g_signal_handlers_block_by_func (feat, feat_clicked, NULL);
+
+  if (gtk_widget_get_state_flags (feat) & GTK_STATE_FLAG_INCONSISTENT)
+    {
+      set_inconsistent (GTK_CHECK_BUTTON (feat), FALSE);
+      gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (feat), TRUE);
+    }
+
+  g_signal_handlers_unblock_by_func (feat, feat_clicked, NULL);
+}
+
+static void
+feat_pressed (GtkGesture *gesture,
+              int         n_press,
+              double      x,
+              double      y,
+              GtkWidget  *feat)
+{
+  gboolean inconsistent;
+
+  inconsistent = (gtk_widget_get_state_flags (feat) & GTK_STATE_FLAG_INCONSISTENT) != 0;
+  set_inconsistent (GTK_CHECK_BUTTON (feat), !inconsistent);
+}
+
+static char *
+find_affected_text (hb_tag_t   feature_tag,
+                    hb_face_t *hb_face,
+                    hb_tag_t   script_tag,
+                    hb_tag_t   lang_tag,
+                    int        max_chars)
+{
+  unsigned int script_index = 0;
+  unsigned int lang_index = 0;
+  unsigned int feature_index = 0;
+  GString *chars;
+
+  chars = g_string_new ("");
+
+  hb_ot_layout_table_find_script (hb_face, HB_OT_TAG_GSUB, script_tag, &script_index);
+  hb_ot_layout_script_find_language (hb_face, HB_OT_TAG_GSUB, script_index, lang_tag, &lang_index);
+  if (hb_ot_layout_language_find_feature (hb_face, HB_OT_TAG_GSUB, script_index, lang_index, feature_tag, &feature_index))
+    {
+      unsigned int lookup_indexes[32];
+      unsigned int lookup_count = 32;
+      int count;
+      int n_chars = 0;
+
+      count  = hb_ot_layout_feature_get_lookups (hb_face,
+                                                 HB_OT_TAG_GSUB,
+                                                 feature_index,
+                                                 0,
+                                                 &lookup_count,
+                                                 lookup_indexes);
+      if (count > 0)
+        {
+          hb_set_t* glyphs_before = NULL;
+          hb_set_t* glyphs_input  = NULL;
+          hb_set_t* glyphs_after  = NULL;
+          hb_set_t* glyphs_output = NULL;
+          hb_font_t *hb_font = NULL;
+          hb_codepoint_t gid;
+
+          glyphs_input  = hb_set_create ();
+
+          // XXX For now, just look at first index
+          hb_ot_layout_lookup_collect_glyphs (hb_face,
+                                              HB_OT_TAG_GSUB,
+                                              lookup_indexes[0],
+                                              glyphs_before,
+                                              glyphs_input,
+                                              glyphs_after,
+                                              glyphs_output);
+
+          hb_font = hb_font_create (hb_face);
+          hb_ft_font_set_funcs (hb_font);
+
+          gid = -1;
+          while (hb_set_next (glyphs_input, &gid)) {
+            hb_codepoint_t ch;
+            if (n_chars == max_chars)
+              {
+                g_string_append (chars, "…");
+                break;
+              }
+            for (ch = 0; ch < 0xffff; ch++) {
+              hb_codepoint_t glyph = 0;
+              hb_font_get_nominal_glyph (hb_font, ch, &glyph);
+              if (glyph == gid) {
+                g_string_append_unichar (chars, (gunichar)ch);
+                n_chars++;
+                break;
+              }
+            }
+          }
+          hb_set_destroy (glyphs_input);
+          hb_font_destroy (hb_font);
+        }
+    }
+
+  return g_string_free (chars, FALSE);
+}
+
+static void
+update_feature_example (FeatureItem          *item,
+                        hb_face_t            *hb_face,
+                        hb_tag_t              script_tag,
+                        hb_tag_t              lang_tag,
+                        PangoFontDescription *font_desc)
+{
+  const char *letter_case[] = { "smcp", "c2sc", "pcap", "c2pc", "unic", "cpsp", "case", NULL };
+  const char *number_case[] = { "xxxx", "lnum", "onum", NULL };
+  const char *number_spacing[] = { "xxxx", "pnum", "tnum", NULL };
+  const char *number_formatting[] = { "zero", "nalt", NULL };
+  const char *char_variants[] = {
+    "swsh", "cswh", "calt", "falt", "hist", "salt", "jalt", "titl", "rand",
+    "ss01", "ss02", "ss03", "ss04", "ss05", "ss06", "ss07", "ss08", "ss09", "ss10",
+    "ss11", "ss12", "ss13", "ss14", "ss15", "ss16", "ss17", "ss18", "ss19", "ss20",
+    NULL };
+
+  if (g_strv_contains (number_case, item->name) ||
+      g_strv_contains (number_spacing, item->name))
+    {
+      PangoAttrList *attrs;
+      PangoAttribute *attr;
+      PangoFontDescription *desc;
+      char *str;
+
+      attrs = pango_attr_list_new ();
+
+      desc = pango_font_description_copy (font_desc);
+      pango_font_description_unset_fields (desc, PANGO_FONT_MASK_SIZE);
+      pango_attr_list_insert (attrs, pango_attr_font_desc_new (desc));
+      pango_font_description_free (desc);
+      str = g_strconcat (item->name, " 1", NULL);
+      attr = pango_attr_font_features_new (str);
+      pango_attr_list_insert (attrs, attr);
+
+      gtk_label_set_text (GTK_LABEL (item->example), "0123456789");
+      gtk_label_set_attributes (GTK_LABEL (item->example), attrs);
+
+      pango_attr_list_unref (attrs);
+    }
+  else if (g_strv_contains (letter_case, item->name) ||
+           g_strv_contains (number_formatting, item->name) ||
+           g_strv_contains (char_variants, item->name))
+    {
+      char *input = NULL;
+      char *text;
+
+      if (strcmp (item->name, "case") == 0)
+        input = g_strdup ("A-B[Cq]");
+      else if (g_strv_contains (letter_case, item->name))
+        input = g_strdup ("AaBbCc…");
+      else if (strcmp (item->name, "zero") == 0)
+        input = g_strdup ("0");
+      else if (strcmp (item->name, "nalt") == 0)
+        input = find_affected_text (item->tag, hb_face, script_tag, lang_tag, 3);
+      else
+        input = find_affected_text (item->tag, hb_face, script_tag, lang_tag, 10);
+
+      if (input[0] != '\0')
+        {
+          PangoAttrList *attrs;
+          PangoAttribute *attr;
+          PangoFontDescription *desc;
+          char *str;
+
+          text = g_strconcat (input, " ⟶ ", input, NULL);
+
+          attrs = pango_attr_list_new ();
+
+          desc = pango_font_description_copy (font_desc);
+          pango_font_description_unset_fields (desc, PANGO_FONT_MASK_SIZE);
+          pango_attr_list_insert (attrs, pango_attr_font_desc_new (desc));
+          pango_font_description_free (desc);
+          str = g_strconcat (item->name, " 0", NULL);
+          attr = pango_attr_font_features_new (str);
+          attr->start_index = 0;
+          attr->end_index = strlen (input);
+          pango_attr_list_insert (attrs, attr);
+          str = g_strconcat (item->name, " 1", NULL);
+          attr = pango_attr_font_features_new (str);
+          attr->start_index = strlen (input) + strlen (" ⟶ ");
+          attr->end_index = attr->start_index + strlen (input);
+          pango_attr_list_insert (attrs, attr);
+
+          gtk_label_set_text (GTK_LABEL (item->example), text);
+          gtk_label_set_attributes (GTK_LABEL (item->example), attrs);
+
+          g_free (text);
+          pango_attr_list_unref (attrs);
+        }
+      else
+        gtk_label_set_markup (GTK_LABEL (item->example), "");
+      g_free (input);
+    }
+}
+
+static void
+add_check_group (CcFontChooserWidget *fontchooser,
+                 const char  *title,
+                 const char **tags)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  GtkWidget *label;
+  GtkWidget *group;
+  PangoAttrList *attrs;
+  int i;
+
+  group = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
+  gtk_widget_show (group);
+  gtk_widget_set_halign (group, GTK_ALIGN_FILL);
+
+  label = gtk_label_new (title);
+  gtk_widget_show (label);
+  gtk_label_set_xalign (GTK_LABEL (label), 0.0);
+  gtk_widget_set_halign (label, GTK_ALIGN_START);
+  g_object_set (label, "margin-top", 10, "margin-bottom", 10, NULL);
+  attrs = pango_attr_list_new ();
+  pango_attr_list_insert (attrs, pango_attr_weight_new (PANGO_WEIGHT_BOLD));
+  gtk_label_set_attributes (GTK_LABEL (label), attrs);
+  pango_attr_list_unref (attrs);
+  gtk_container_add (GTK_CONTAINER (group), label);
+
+  for (i = 0; tags[i]; i++)
+    {
+      hb_tag_t tag;
+      GtkWidget *feat;
+      FeatureItem *item;
+      GtkGesture *gesture;
+      GtkWidget *box;
+      GtkWidget *example;
+
+      tag = hb_tag_from_string (tags[i], -1);
+
+      feat = gtk_check_button_new_with_label (get_feature_display_name (tag));
+      gtk_widget_show (feat);
+      set_inconsistent (GTK_CHECK_BUTTON (feat), TRUE);
+      g_signal_connect_swapped (feat, "notify::active", G_CALLBACK (update_font_features), fontchooser);
+      g_signal_connect_swapped (feat, "notify::inconsistent", G_CALLBACK (update_font_features), fontchooser);
+      g_signal_connect (feat, "clicked", G_CALLBACK (feat_clicked), NULL);
+
+      gesture = gtk_gesture_multi_press_new (feat);
+      g_object_set_data_full (G_OBJECT (feat), "press", gesture, g_object_unref);
+
+      gtk_gesture_single_set_button (GTK_GESTURE_SINGLE (gesture), GDK_BUTTON_SECONDARY);
+      g_signal_connect (gesture, "pressed", G_CALLBACK (feat_pressed), feat);
+
+      example = gtk_label_new ("");
+      gtk_widget_show (example);
+      gtk_label_set_selectable (GTK_LABEL (example), TRUE);
+      gtk_widget_set_halign (example, GTK_ALIGN_START);
+
+      box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 10);
+      gtk_widget_show (box);
+      gtk_box_set_homogeneous (GTK_BOX (box), TRUE);
+      gtk_container_add (GTK_CONTAINER (box), feat);
+      gtk_container_add (GTK_CONTAINER (box), example);
+      gtk_container_add (GTK_CONTAINER (group), box);
+
+      item = g_new (FeatureItem, 1);
+      item->name = tags[i];
+      item->tag = tag;
+      item->top = box;
+      item->feat = feat;
+      item->example = example;
+
+      priv->feature_items = g_list_prepend (priv->feature_items, item);
+    }
+
+  gtk_container_add (GTK_CONTAINER (priv->feature_box), group);
+}
+
+static void
+add_radio_group (CcFontChooserWidget *fontchooser,
+                 const char  *title,
+                 const char **tags)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  GtkWidget *label;
+  GtkWidget *group;
+  int i;
+  GtkWidget *group_button = NULL;
+  PangoAttrList *attrs;
+
+  group = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
+  gtk_widget_show (group);
+  gtk_widget_set_halign (group, GTK_ALIGN_FILL);
+
+  label = gtk_label_new (title);
+  gtk_widget_show (label);
+  gtk_label_set_xalign (GTK_LABEL (label), 0.0);
+  gtk_widget_set_halign (label, GTK_ALIGN_START);
+  g_object_set (label, "margin-top", 10, "margin-bottom", 10, NULL);
+  attrs = pango_attr_list_new ();
+  pango_attr_list_insert (attrs, pango_attr_weight_new (PANGO_WEIGHT_BOLD));
+  gtk_label_set_attributes (GTK_LABEL (label), attrs);
+  pango_attr_list_unref (attrs);
+  gtk_container_add (GTK_CONTAINER (group), label);
+
+  for (i = 0; tags[i]; i++)
+    {
+      hb_tag_t tag;
+      GtkWidget *feat;
+      FeatureItem *item;
+      const char *name;
+      GtkWidget *box;
+      GtkWidget *example;
+
+      tag = hb_tag_from_string (tags[i], -1);
+      name = get_feature_display_name (tag);
+
+      feat = gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (group_button),
+                                                          name ? name : _("Default"));
+      gtk_widget_show (feat);
+      if (group_button == NULL)
+        group_button = feat;
+
+      g_signal_connect_swapped (feat, "notify::active", G_CALLBACK (update_font_features), fontchooser);
+      g_object_set_data (G_OBJECT (feat), "default", group_button);
+
+      example = gtk_label_new ("");
+      gtk_widget_show (example);
+      gtk_label_set_selectable (GTK_LABEL (example), TRUE);
+      gtk_widget_set_halign (example, GTK_ALIGN_START);
+
+      box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 10);
+      gtk_widget_show (box);
+      gtk_box_set_homogeneous (GTK_BOX (box), TRUE);
+      gtk_container_add (GTK_CONTAINER (box), feat);
+      gtk_container_add (GTK_CONTAINER (box), example);
+      gtk_container_add (GTK_CONTAINER (group), box);
+
+      item = g_new (FeatureItem, 1);
+      item->name = tags[i];
+      item->tag = tag;
+      item->top = box;
+      item->feat = feat;
+      item->example = example;
+
+      priv->feature_items = g_list_prepend (priv->feature_items, item);
+    }
+
+  gtk_container_add (GTK_CONTAINER (priv->feature_box), group);
+}
+
+static void
+cc_font_chooser_widget_populate_features (CcFontChooserWidget *fontchooser)
+{
+  const char *ligatures[] = { "liga", "dlig", "hlig", "clig", NULL };
+  const char *letter_case[] = { "smcp", "c2sc", "pcap", "c2pc", "unic", "cpsp", "case", NULL };
+  const char *number_case[] = { "xxxx", "lnum", "onum", NULL };
+  const char *number_spacing[] = { "xxxx", "pnum", "tnum", NULL };
+  const char *number_formatting[] = { "zero", "nalt", NULL };
+  const char *char_variants[] = {
+    "swsh", "cswh", "calt", "falt", "hist", "salt", "jalt", "titl", "rand",
+    "ss01", "ss02", "ss03", "ss04", "ss05", "ss06", "ss07", "ss08", "ss09", "ss10",
+    "ss11", "ss12", "ss13", "ss14", "ss15", "ss16", "ss17", "ss18", "ss19", "ss20",
+    NULL };
+
+  add_check_group (fontchooser, _("Ligatures"), ligatures);
+  add_check_group (fontchooser, _("Letter Case"), letter_case);
+  add_radio_group (fontchooser, _("Number Case"), number_case);
+  add_radio_group (fontchooser, _("Number Spacing"), number_spacing);
+  add_check_group (fontchooser, _("Number Formatting"), number_formatting);
+  add_check_group (fontchooser, _("Character Variants"), char_variants);
+
+  update_font_features (fontchooser);
+}
+
+static gboolean
+cc_font_chooser_widget_update_font_features (CcFontChooserWidget *fontchooser)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  PangoFont *pango_font;
+  FT_Face ft_face;
+  hb_font_t *hb_font;
+  hb_tag_t script_tag;
+  hb_tag_t lang_tag;
+  guint script_index = 0;
+  guint lang_index = 0;
+  int i, j;
+  GList *l;
+  gboolean has_feature = FALSE;
+
+  for (l = priv->feature_items; l; l = l->next)
+    {
+      FeatureItem *item = l->data;
+      gtk_widget_hide (item->top);
+      gtk_widget_hide (gtk_widget_get_parent (item->top));
+    }
+
+  if ((priv->level & CC_FONT_CHOOSER_LEVEL_FEATURES) == 0)
+    return FALSE;
+
+  pango_font = pango_context_load_font (gtk_widget_get_pango_context (GTK_WIDGET (fontchooser)),
+                                        priv->font_desc);
+  ft_face = pango_fc_font_lock_face (PANGO_FC_FONT (pango_font)),
+  hb_font = hb_ft_font_create (ft_face, NULL);
+
+  if (hb_font)
+    {
+      hb_tag_t table[2] = { HB_OT_TAG_GSUB, HB_OT_TAG_GPOS };
+      hb_face_t *hb_face;
+      hb_tag_t features[80];
+      unsigned int count;
+      unsigned int n_features;
+
+      hb_face = hb_font_get_face (hb_font);
+
+      find_language_and_script (fontchooser, hb_face, &lang_tag, &script_tag);
+
+      n_features = 0;
+      for (i = 0; i < 2; i++)
+        {
+          hb_ot_layout_table_find_script (hb_face, table[i], script_tag, &script_index);
+          hb_ot_layout_script_find_language (hb_face, table[i], script_index, lang_tag, &lang_index);
+          count = G_N_ELEMENTS (features);
+          hb_ot_layout_language_get_feature_tags (hb_face,
+                                                  table[i],
+                                                  script_index,
+                                                  lang_index,
+                                                  n_features,
+                                                  &count,
+                                                  features);
+          n_features += count;
+        }
+
+      for (j = 0; j < n_features; j++)
+        {
+          for (l = priv->feature_items; l; l = l->next)
+            {
+              FeatureItem *item = l->data;
+              if (item->tag != features[j])
+                continue;
+
+              has_feature = TRUE;
+              gtk_widget_show (item->top);
+              gtk_widget_show (gtk_widget_get_parent (item->top));
+
+              update_feature_example (item, hb_face, script_tag, lang_tag, priv->font_desc);
+
+              if (GTK_IS_RADIO_BUTTON (item->feat))
+                {
+                  GtkWidget *def = GTK_WIDGET (g_object_get_data (G_OBJECT (item->feat), "default"));
+                  gtk_widget_show (gtk_widget_get_parent (def));
+                }
+              else if (GTK_IS_CHECK_BUTTON (item->feat))
+                {
+                  set_inconsistent (GTK_CHECK_BUTTON (item->feat), TRUE);
+                }
+            }
+        }
+
+      hb_face_destroy (hb_face);
+    }
+
+  pango_fc_font_unlock_face (PANGO_FC_FONT (pango_font));
+  g_object_unref (pango_font);
+
+  return has_feature;
+}
+
+static void
+update_font_features (CcFontChooserWidget *fontchooser)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  GString *s;
+  GList *l;
+
+  s = g_string_new ("");
+
+  for (l = priv->feature_items; l; l = l->next)
+    {
+      FeatureItem *item = l->data;
+
+      if (!gtk_widget_is_sensitive (item->feat))
+        continue;
+
+      if (GTK_IS_RADIO_BUTTON (item->feat))
+        {
+          if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (item->feat)) &&
+              strcmp (item->name, "xxxx") != 0)
+            {
+              g_string_append_printf (s, "%s\"%s\" %d", s->len > 0 ? ", " : "", item->name, 1);
+            }
+        }
+      else if (GTK_IS_CHECK_BUTTON (item->feat))
+        {
+          if (gtk_widget_get_state_flags (item->feat) & GTK_STATE_FLAG_INCONSISTENT)
+            continue;
+
+          g_string_append_printf (s, "%s\"%s\" %d",
+                                  s->len > 0 ? ", " : "", item->name,
+                                  gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (item->feat)));
+        }
+    }
+
+  if (g_strcmp0 (priv->font_features, s->str) != 0)
+    {
+      g_free (priv->font_features);
+      priv->font_features = g_string_free (s, FALSE);
+      g_object_notify (G_OBJECT (fontchooser), "font-features");
+    }
+  else
+    g_string_free (s, TRUE);
+
+  cc_font_chooser_widget_update_preview_attributes (fontchooser);
+}
+
+#endif
+
+static void
+cc_font_chooser_widget_merge_font_desc (CcFontChooserWidget       *fontchooser,
+                                         const PangoFontDescription *font_desc,
+                                         GtkTreeIter                *iter)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  PangoFontMask mask;
+
+  g_assert (font_desc != NULL);
+  /* iter may be NULL if the font doesn't exist on the list */
+
+  mask = pango_font_description_get_set_fields (font_desc);
+
+  /* sucky test, because we can't restrict the comparison to 
+   * only the parts that actually do get merged */
+  if (pango_font_description_equal (font_desc, priv->font_desc))
+    return;
+
+  pango_font_description_merge (priv->font_desc, font_desc, TRUE);
+  
+  if (mask & PANGO_FONT_MASK_SIZE)
+    {
+      double font_size = (double) pango_font_description_get_size (priv->font_desc) / PANGO_SCALE;
+      /* XXX: This clamps, which can cause it to reloop into here, do we need
+       * to block its signal handler? */
+      gtk_range_set_value (GTK_RANGE (priv->size_slider), font_size);
+      gtk_spin_button_set_value (GTK_SPIN_BUTTON (priv->size_spin), font_size);
+    }
+  if (mask & (PANGO_FONT_MASK_FAMILY | PANGO_FONT_MASK_STYLE | PANGO_FONT_MASK_VARIANT |
+              PANGO_FONT_MASK_WEIGHT | PANGO_FONT_MASK_STRETCH))
+    {
+      gboolean has_tweak = FALSE;
+
+      if (&priv->font_iter != iter)
+        {
+          if (iter == NULL)
+            memset (&priv->font_iter, 0, sizeof (GtkTreeIter));
+          else
+            memcpy (&priv->font_iter, iter, sizeof (GtkTreeIter));
+          
+          cc_font_chooser_widget_ensure_selection (fontchooser);
+        }
+
+      cc_font_chooser_widget_update_marks (fontchooser);
+
+#if defined(HAVE_HARFBUZZ) && defined(HAVE_PANGOFT)
+      if (cc_font_chooser_widget_update_font_features (fontchooser))
+        has_tweak = TRUE;
+      if (cc_font_chooser_widget_update_font_variations (fontchooser))
+        has_tweak = TRUE;
+#endif
+
+      g_simple_action_set_enabled (G_SIMPLE_ACTION (priv->tweak_action), has_tweak);
+    }
+
+  cc_font_chooser_widget_update_preview_attributes (fontchooser);
+
+  g_object_notify (G_OBJECT (fontchooser), "font");
+  g_object_notify (G_OBJECT (fontchooser), "font-desc");
+}
+
+static void
+cc_font_chooser_widget_take_font_desc (CcFontChooserWidget *fontchooser,
+                                        PangoFontDescription *font_desc)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  PangoFontMask mask;
+
+  if (font_desc == NULL)
+    font_desc = pango_font_description_from_string (CC_FONT_CHOOSER_DEFAULT_FONT_NAME);
+
+  mask = pango_font_description_get_set_fields (font_desc);
+  if (mask & (PANGO_FONT_MASK_FAMILY | PANGO_FONT_MASK_STYLE | PANGO_FONT_MASK_VARIANT |
+              PANGO_FONT_MASK_WEIGHT | PANGO_FONT_MASK_STRETCH))
+    {
+      GtkTreeIter iter;
+
+      if (cc_font_chooser_widget_find_font (fontchooser, font_desc, &iter))
+        cc_font_chooser_widget_merge_font_desc (fontchooser, font_desc, &iter);
+      else
+        cc_font_chooser_widget_merge_font_desc (fontchooser, font_desc, NULL);
+    }
+  else
+    {
+      cc_font_chooser_widget_merge_font_desc (fontchooser, font_desc, &priv->font_iter);
+    }
+
+  pango_font_description_free (font_desc);
+}
+
+static const gchar*
+cc_font_chooser_widget_get_preview_text (CcFontChooserWidget *fontchooser)
+{
+  return fontchooser->priv->preview_text;
+}
+
+static void
+cc_font_chooser_widget_set_preview_text (CcFontChooserWidget *fontchooser,
+                                          const gchar          *text)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+
+  g_free (priv->preview_text);
+  priv->preview_text = g_strdup (text);
+
+  gtk_entry_set_text (GTK_ENTRY (priv->preview), text);
+
+  g_object_notify (G_OBJECT (fontchooser), "preview-text");
+
+  /* XXX: There's no API to tell the treeview that a column has changed,
+   * so we just */
+  gtk_widget_queue_draw (priv->family_face_list);
+}
+
+static gboolean
+cc_font_chooser_widget_get_show_preview_entry (CcFontChooserWidget *fontchooser)
+{
+  return fontchooser->priv->show_preview_entry;
+}
+
+static void
+cc_font_chooser_widget_set_show_preview_entry (CcFontChooserWidget *fontchooser,
+                                                gboolean              show_preview_entry)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+
+  if (priv->show_preview_entry != show_preview_entry)
+    {
+      fontchooser->priv->show_preview_entry = show_preview_entry;
+
+      if (show_preview_entry)
+        gtk_widget_show (fontchooser->priv->preview);
+      else
+        gtk_widget_hide (fontchooser->priv->preview);
+
+      g_object_notify (G_OBJECT (fontchooser), "show-preview-entry");
+    }
+}
+
+static void
+cc_font_chooser_widget_set_font_map (CcFontChooser *chooser,
+                                      PangoFontMap   *fontmap)
+{
+  CcFontChooserWidget *fontchooser = CC_FONT_CHOOSER_WIDGET (chooser);
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+
+  if (g_set_object (&priv->font_map, fontmap))
+    {
+      PangoContext *context;
+
+      if (!fontmap)
+        fontmap = pango_cairo_font_map_get_default ();
+
+      context = gtk_widget_get_pango_context (priv->family_face_list);
+      pango_context_set_font_map (context, fontmap);
+
+      context = gtk_widget_get_pango_context (priv->preview);
+      pango_context_set_font_map (context, fontmap);
+
+      cc_font_chooser_widget_load_fonts (fontchooser, TRUE);
+    }
+}
+
+static PangoFontMap *
+cc_font_chooser_widget_get_font_map (CcFontChooser *chooser)
+{
+  CcFontChooserWidget *fontchooser = CC_FONT_CHOOSER_WIDGET (chooser);
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+
+  return priv->font_map;
+}
+
+static void
+cc_font_chooser_widget_set_filter_func (CcFontChooser  *chooser,
+                                         GtkFontFilterFunc filter,
+                                         gpointer          data,
+                                         GDestroyNotify    destroy)
+{
+  CcFontChooserWidget *fontchooser = CC_FONT_CHOOSER_WIDGET (chooser);
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+
+  if (priv->filter_data_destroy)
+    priv->filter_data_destroy (priv->filter_data);
+
+  priv->filter_func = filter;
+  priv->filter_data = data;
+  priv->filter_data_destroy = destroy;
+
+  cc_font_chooser_widget_refilter_font_list (fontchooser);
+}
+
+static void
+cc_font_chooser_widget_set_level (CcFontChooserWidget *fontchooser,
+                                   CcFontChooserLevel   level)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+
+  if (priv->level == level)
+    return;
+
+  priv->level = level;
+
+  if ((level & CC_FONT_CHOOSER_LEVEL_SIZE) != 0)
+    {
+      gtk_widget_show (priv->size_slider);
+      gtk_widget_show (priv->size_spin);
+    }
+  else
+   {
+      gtk_widget_hide (priv->size_slider);
+      gtk_widget_hide (priv->size_spin);
+   }
+
+  cc_font_chooser_widget_load_fonts (fontchooser, TRUE);
+
+  g_object_notify (G_OBJECT (fontchooser), "level");
+}
+
+static CcFontChooserLevel
+cc_font_chooser_widget_get_level (CcFontChooserWidget *fontchooser)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+
+  return priv->level;
+}
+
+static void
+cc_font_chooser_widget_set_language (CcFontChooserWidget *fontchooser,
+                                      const char           *language)
+{
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  PangoLanguage *lang;
+
+  lang = pango_language_from_string (language);
+  if (priv->language == lang)
+    return;
+
+  priv->language = lang;
+  g_object_notify (G_OBJECT (fontchooser), "language");
+
+  cc_font_chooser_widget_update_preview_attributes (fontchooser);
+}
+
+static void
+cc_font_chooser_widget_iface_init (CcFontChooserIface *iface)
+{
+  iface->get_font_family = cc_font_chooser_widget_get_family;
+  iface->get_font_face = cc_font_chooser_widget_get_face;
+  iface->get_font_size = cc_font_chooser_widget_get_size;
+  iface->set_filter_func = cc_font_chooser_widget_set_filter_func;
+  iface->set_font_map = cc_font_chooser_widget_set_font_map;
+  iface->get_font_map = cc_font_chooser_widget_get_font_map;
+}
+
+gboolean
+cc_font_chooser_widget_handle_event (GtkWidget   *widget,
+                                      GdkEventKey *key_event)
+{
+  CcFontChooserWidget *fontchooser = CC_FONT_CHOOSER_WIDGET (widget);
+  CcFontChooserWidgetPrivate *priv = fontchooser->priv;
+  GdkEvent *event = (GdkEvent *)key_event;
+
+  return gtk_search_entry_handle_event (GTK_SEARCH_ENTRY (priv->search_entry), event);
+}
+
+GAction *
+cc_font_chooser_widget_get_tweak_action (GtkWidget *widget)
+{
+  return CC_FONT_CHOOSER_WIDGET (widget)->priv->tweak_action;
+}
diff --git a/panels/font/cc-font-chooser-widget.h b/panels/font/cc-font-chooser-widget.h
new file mode 100644
index 0000000..3c30e00
--- /dev/null
+++ b/panels/font/cc-font-chooser-widget.h
@@ -0,0 +1,49 @@
+ /* GTK - The GIMP Toolkit
+ * Copyright (C) 2011      Alberto Ruiz <aruiz@gnome.org>
+ * Copyright (C) 2020 gooroom <gooroom@gooroom.kr>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#pragma
+
+G_BEGIN_DECLS
+
+#define CC_TYPE_FONT_CHOOSER_WIDGET           (cc_font_chooser_widget_get_type ())
+#define CC_FONT_CHOOSER_WIDGET(obj)           (G_TYPE_CHECK_INSTANCE_CAST ((obj), CC_TYPE_FONT_CHOOSER_WIDGET, CcFontChooserWidget))
+#define CC_FONT_CHOOSER_WIDGET_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), CC_TYPE_FONT_CHOOSER_WIDGET, CcFontChooserWidgetClass))
+#define CC_IS_FONT_CHOOSER_WIDGET(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CC_TYPE_FONT_CHOOSER_WIDGET))
+#define CC_IS_FONT_CHOOSER_WIDGET_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), CC_TYPE_FONT_CHOOSER_WIDGET))
+#define CC_FONT_CHOOSER_WIDGET_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), CC_TYPE_FONT_CHOOSER_WIDGET, CcFontChooserWidgetClass))
+
+typedef struct _CcFontChooserWidget              CcFontChooserWidget;
+typedef struct _CcFontChooserWidgetPrivate       CcFontChooserWidgetPrivate;
+typedef struct _CcFontChooserWidgetClass         CcFontChooserWidgetClass;
+
+struct _CcFontChooserWidget
+{
+  GtkBox                      parent_instance;
+  CcFontChooserWidgetPrivate *priv;
+};
+
+struct _CcFontChooserWidgetClass
+{
+  GtkBoxClass parent_class;
+};
+
+GtkWidget*    cc_font_chooser_widget_new      (void);
+/* private */
+GAction*      cc_font_chooser_widget_get_tweak_action (GtkWidget *widget);
+
+G_END_DECLS
diff --git a/panels/font/cc-font-chooser.c b/panels/font/cc-font-chooser.c
new file mode 100644
index 0000000..4453935
--- /dev/null
+++ b/panels/font/cc-font-chooser.c
@@ -0,0 +1,590 @@
+/* GTK - The GIMP Toolkit
+ * gtkfontchooser.c - Abstract interface for font file selectors GUIs
+ *
+ * Copyright (C) 2006, Emmanuele Bassi
+ * Copyright (C) 2011 Alberto Ruiz <aruiz@gnome.org>
+ * Copyright (C) 2020 gooroom <gooroom@gooroom.kr>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "config.h"
+
+#include <gtk/gtk.h>
+#include <glib/gi18n.h>
+
+#include "cc-font-chooser.h"
+#include "cc-font-chooser-private.h"
+#include "cc-font-define.h"
+
+enum
+{
+  SIGNAL_FONT_ACTIVATED,
+  LAST_SIGNAL
+};
+
+static guint chooser_signals[LAST_SIGNAL];
+
+/* enumerations from "gtkfontchooser.h" */
+GType
+cc_font_chooser_level_get_type (void)
+{
+    static GType etype = 0;
+    if (G_UNLIKELY(etype == 0)) {
+        static const GFlagsValue values[] = {
+            { CC_FONT_CHOOSER_LEVEL_FAMILY, "CC_FONT_CHOOSER_LEVEL_FAMILY", "family" },
+            { CC_FONT_CHOOSER_LEVEL_STYLE, "CC_FONT_CHOOSER_LEVEL_STYLE", "style" },
+            { CC_FONT_CHOOSER_LEVEL_SIZE, "CC_FONT_CHOOSER_LEVEL_SIZE", "size" },
+            { CC_FONT_CHOOSER_LEVEL_VARIATIONS, "CC_FONT_CHOOSER_LEVEL_VARIATIONS", "variations" },
+            { CC_FONT_CHOOSER_LEVEL_FEATURES, "CC_FONT_CHOOSER_LEVEL_FEATURES", "features" },
+            { 0, NULL, NULL }
+        };
+        etype = g_flags_register_static (g_intern_static_string ("CCFontChooserLevel"), values);
+    }
+    return etype;
+}
+
+typedef CcFontChooserIface CcFontChooserInterface;
+G_DEFINE_INTERFACE (CcFontChooser, cc_font_chooser, G_TYPE_OBJECT);
+
+static void
+cc_font_chooser_default_init (CcFontChooserInterface *iface)
+{
+  g_object_interface_install_property
+     (iface,
+      g_param_spec_string ("font",
+                          _("Font"),
+                          _("Font description as a string, e.g. \"Sans Italic 12\""),
+                          CC_FONT_CHOOSER_DEFAULT_FONT_NAME,
+                          CC_PARAM_READWRITE));
+
+  g_object_interface_install_property
+     (iface,
+      g_param_spec_boxed ("font-desc",
+                          _("Font description"),
+                          _("Font description as a PangoFontDescription struct"),
+                          PANGO_TYPE_FONT_DESCRIPTION,
+                          CC_PARAM_READWRITE));
+
+  g_object_interface_install_property
+     (iface,
+      g_param_spec_string ("preview-text",
+                          _("Preview text"),
+                          _("The text to display in order to demonstrate the selected font"),
+                          pango_language_get_sample_string (NULL),
+                          CC_PARAM_READWRITE));
+
+  g_object_interface_install_property
+     (iface,
+      g_param_spec_boolean ("show-preview-entry",
+                          _("Show preview text entry"),
+                          _("Whether the preview text entry is shown or not"),
+                          TRUE,
+                          CC_PARAM_READWRITE|G_PARAM_EXPLICIT_NOTIFY));
+
+  g_object_interface_install_property
+     (iface,
+      g_param_spec_flags ("level",
+                          _("Selection level"),
+                          _("Whether to select family, face or font"),
+                          CC_TYPE_FONT_CHOOSER_LEVEL,
+                          CC_FONT_CHOOSER_LEVEL_FAMILY |
+                          CC_FONT_CHOOSER_LEVEL_STYLE |
+                          CC_FONT_CHOOSER_LEVEL_SIZE,
+                          CC_PARAM_READWRITE|G_PARAM_EXPLICIT_NOTIFY));
+
+  g_object_interface_install_property
+     (iface,
+      g_param_spec_string ("font-features",
+                          _("Font features"),
+                          _("Font features as a string"),
+                          "",
+                          CC_PARAM_READABLE));
+
+  g_object_interface_install_property
+     (iface,
+      g_param_spec_string ("language",
+                          _("Language"),
+                          _("Language for which features have been selected"),
+                          "",
+                          CC_PARAM_READWRITE|G_PARAM_EXPLICIT_NOTIFY));
+
+  chooser_signals[SIGNAL_FONT_ACTIVATED] =
+    g_signal_new (_("font-activated"),
+                  CC_TYPE_FONT_CHOOSER,
+                  G_SIGNAL_RUN_FIRST,
+                  G_STRUCT_OFFSET (CcFontChooserIface, font_activated),
+                  NULL, NULL,
+                  NULL,
+                  G_TYPE_NONE,
+                  1, G_TYPE_STRING);
+}
+
+/**
+ * cc_font_chooser_get_font_family:
+ * @fontchooser: a #CcFontChooser
+ *
+ * Gets the #PangoFontFamily representing the selected font family.
+ * Font families are a collection of font faces.
+ *
+ * If the selected font is not installed, returns %NULL.
+ *
+ * Returns: (nullable) (transfer none): A #PangoFontFamily representing the
+ *     selected font family, or %NULL. The returned object is owned by @fontchooser
+ *     and must not be modified or freed.
+ *
+ * Since: 3.2
+ */
+PangoFontFamily *
+cc_font_chooser_get_font_family (CcFontChooser *fontchooser)
+{
+  g_return_val_if_fail (CC_IS_FONT_CHOOSER (fontchooser), NULL);
+
+  return CC_FONT_CHOOSER_GET_IFACE (fontchooser)->get_font_family (fontchooser);
+}
+
+/**
+ * cc_font_chooser_get_font_face:
+ * @fontchooser: a #CcFontChooser
+ *
+ * Gets the #PangoFontFace representing the selected font group
+ * details (i.e. family, slant, weight, width, etc).
+ *
+ * If the selected font is not installed, returns %NULL.
+ *
+ * Returns: (nullable) (transfer none): A #PangoFontFace representing the
+ *     selected font group details, or %NULL. The returned object is owned by
+ *     @fontchooser and must not be modified or freed.
+ *
+ * Since: 3.2
+ */
+PangoFontFace *
+cc_font_chooser_get_font_face (CcFontChooser *fontchooser)
+{
+  g_return_val_if_fail (CC_IS_FONT_CHOOSER (fontchooser), NULL);
+
+  return CC_FONT_CHOOSER_GET_IFACE (fontchooser)->get_font_face (fontchooser);
+}
+
+/**
+ * cc_font_chooser_get_font_size:
+ * @fontchooser: a #CcFontChooser
+ *
+ * The selected font size.
+ *
+ * Returns: A n integer representing the selected font size,
+ *     or -1 if no font size is selected.
+ *
+ * Since: 3.2
+ */
+gint
+cc_font_chooser_get_font_size (CcFontChooser *fontchooser)
+{
+  g_return_val_if_fail (CC_IS_FONT_CHOOSER (fontchooser), -1);
+
+  return CC_FONT_CHOOSER_GET_IFACE (fontchooser)->get_font_size (fontchooser);
+}
+
+/**
+ * cc_font_chooser_get_font:
+ * @fontchooser: a #CcFontChooser
+ *
+ * Gets the currently-selected font name.
+ *
+ * Note that this can be a different string than what you set with
+ * cc_font_chooser_set_font(), as the font chooser widget may
+ * normalize font names and thus return a string with a different
+ * structure. For example, “Helvetica Italic Bold 12” could be
+ * normalized to “Helvetica Bold Italic 12”.
+ *
+ * Use pango_font_description_equal() if you want to compare two
+ * font descriptions.
+ *
+ * Returns: (nullable) (transfer full): A string with the name
+ *     of the current font, or %NULL if  no font is selected. You must
+ *     free this string with g_free().
+ *
+ * Since: 3.2
+ */
+gchar *
+cc_font_chooser_get_font (CcFontChooser *fontchooser)
+{
+  gchar *fontname;
+
+  g_return_val_if_fail (CC_IS_FONT_CHOOSER (fontchooser), NULL);
+
+  g_object_get (fontchooser, "font", &fontname, NULL);
+
+
+  return fontname;
+}
+
+/**
+ * cc_font_chooser_set_font:
+ * @fontchooser: a #CcFontChooser
+ * @fontname: a font name like “Helvetica 12” or “Times Bold 18”
+ *
+ * Sets the currently-selected font.
+ *
+ * Since: 3.2
+ */
+void
+cc_font_chooser_set_font (CcFontChooser *fontchooser,
+                           const gchar    *fontname)
+{
+  g_return_if_fail (CC_IS_FONT_CHOOSER (fontchooser));
+  g_return_if_fail (fontname != NULL);
+
+  g_object_set (fontchooser, "font", fontname, NULL);
+}
+
+/**
+ * cc_font_chooser_get_font_desc:
+ * @fontchooser: a #CcFontChooser
+ *
+ * Gets the currently-selected font.
+ *
+ * Note that this can be a different string than what you set with
+ * cc_font_chooser_set_font(), as the font chooser widget may
+ * normalize font names and thus return a string with a different
+ * structure. For example, “Helvetica Italic Bold 12” could be
+ * normalized to “Helvetica Bold Italic 12”.
+ *
+ * Use pango_font_description_equal() if you want to compare two
+ * font descriptions.
+ *
+ * Returns: (nullable) (transfer full): A #PangoFontDescription for the
+ *     current font, or %NULL if  no font is selected.
+ *
+ * Since: 3.2
+ */
+PangoFontDescription *
+cc_font_chooser_get_font_desc (CcFontChooser *fontchooser)
+{
+  PangoFontDescription *font_desc;
+
+  g_return_val_if_fail (CC_IS_FONT_CHOOSER (fontchooser), NULL);
+
+  g_object_get (fontchooser, "font-desc", &font_desc, NULL);
+
+  return font_desc;
+}
+
+/**
+ * cc_font_chooser_set_font_desc:
+ * @fontchooser: a #CcFontChooser
+ * @font_desc: a #PangoFontDescription
+ *
+ * Sets the currently-selected font from @font_desc.
+ *
+ * Since: 3.2
+ */
+void
+cc_font_chooser_set_font_desc (CcFontChooser             *fontchooser,
+                                const PangoFontDescription *font_desc)
+{
+  g_return_if_fail (CC_IS_FONT_CHOOSER (fontchooser));
+  g_return_if_fail (font_desc != NULL);
+
+  g_object_set (fontchooser, "font-desc", font_desc, NULL);
+}
+
+/**
+ * cc_font_chooser_get_preview_text:
+ * @fontchooser: a #CcFontChooser
+ *
+ * Gets the text displayed in the preview area.
+ *
+ * Returns: (transfer full): the text displayed in the
+ *     preview area
+ *
+ * Since: 3.2
+ */
+gchar *
+cc_font_chooser_get_preview_text (CcFontChooser *fontchooser)
+{
+  char *text;
+
+  g_return_val_if_fail (CC_IS_FONT_CHOOSER (fontchooser), NULL);
+
+  g_object_get (fontchooser, "preview-text", &text, NULL);
+
+  return text;
+}
+
+/**
+ * cc_font_chooser_set_preview_text:
+ * @fontchooser: a #CcFontChooser
+ * @text: (transfer none): the text to display in the preview area
+ *
+ * Sets the text displayed in the preview area.
+ * The @text is used to show how the selected font looks.
+ *
+ * Since: 3.2
+ */
+void
+cc_font_chooser_set_preview_text (CcFontChooser *fontchooser,
+                                   const gchar    *text)
+{
+  g_return_if_fail (CC_IS_FONT_CHOOSER (fontchooser));
+  g_return_if_fail (text != NULL);
+
+  g_object_set (fontchooser, "preview-text", text, NULL);
+}
+
+/**
+ * cc_font_chooser_get_show_preview_entry:
+ * @fontchooser: a #CcFontChooser
+ *
+ * Returns whether the preview entry is shown or not.
+ *
+ * Returns: %TRUE if the preview entry is shown
+ *     or %FALSE if it is hidden.
+ *
+ * Since: 3.2
+ */
+gboolean
+cc_font_chooser_get_show_preview_entry (CcFontChooser *fontchooser)
+{
+  gboolean show;
+
+  g_return_val_if_fail (CC_IS_FONT_CHOOSER (fontchooser), FALSE);
+
+  g_object_get (fontchooser, "show-preview-entry", &show, NULL);
+
+  return show;
+}
+
+/**
+ * cc_font_chooser_set_show_preview_entry:
+ * @fontchooser: a #CcFontChooser
+ * @show_preview_entry: whether to show the editable preview entry or not
+ *
+ * Shows or hides the editable preview entry.
+ *
+ * Since: 3.2
+ */
+void
+cc_font_chooser_set_show_preview_entry (CcFontChooser *fontchooser,
+                                         gboolean        show_preview_entry)
+{
+  g_return_if_fail (CC_IS_FONT_CHOOSER (fontchooser));
+
+  show_preview_entry = show_preview_entry != FALSE;
+  g_object_set (fontchooser, "show-preview-entry", show_preview_entry, NULL);
+}
+
+/**
+ * cc_font_chooser_set_filter_func:
+ * @fontchooser: a #CcFontChooser
+ * @filter: (allow-none): a #CcFontFilterFunc, or %NULL
+ * @user_data: data to pass to @filter
+ * @destroy: function to call to free @data when it is no longer needed
+ *
+ * Adds a filter function that decides which fonts to display
+ * in the font chooser.
+ *
+ * Since: 3.2
+ */
+void
+cc_font_chooser_set_filter_func (CcFontChooser   *fontchooser,
+                                  CcFontFilterFunc filter,
+                                  gpointer          user_data,
+                                  GDestroyNotify    destroy)
+{
+  g_return_if_fail (CC_IS_FONT_CHOOSER (fontchooser));
+
+  CC_FONT_CHOOSER_GET_IFACE (fontchooser)->set_filter_func (fontchooser,
+                                                             filter,
+                                                             user_data,
+                                                             destroy);
+}
+
+void
+_cc_font_chooser_font_activated (CcFontChooser *chooser,
+                                  const gchar    *fontname)
+{
+  g_return_if_fail (CC_IS_FONT_CHOOSER (chooser));
+
+  g_signal_emit (chooser, chooser_signals[SIGNAL_FONT_ACTIVATED], 0, fontname);
+}
+
+/**
+ * cc_font_chooser_set_font_map:
+ * @fontchooser: a #CcFontChooser
+ * @fontmap: (allow-none): a #PangoFontMap
+ *
+ * Sets a custom font map to use for this font chooser widget.
+ * A custom font map can be used to present application-specific
+ * fonts instead of or in addition to the normal system fonts.
+ *
+ * |[<!-- language="C" -->
+ * FcConfig *config;
+ * PangoFontMap *fontmap;
+ *
+ * config = FcInitLoadConfigAndFonts ();
+ * FcConfigAppFontAddFile (config, my_app_font_file);
+ *
+ * fontmap = pango_cairo_font_map_new_for_font_type (CAIRO_FONT_TYPE_FT);
+ * pango_fc_font_map_set_config (PANGO_FC_FONT_MAP (fontmap), config);
+ *
+ * cc_font_chooser_set_font_map (font_chooser, fontmap);
+ * ]|
+ *
+ * Note that other GTK+ widgets will only be able to use the application-specific
+ * font if it is present in the font map they use:
+ *
+ * |[
+ * context = gtk_widget_get_pango_context (label);
+ * pango_context_set_font_map (context, fontmap);
+ * ]|
+ *
+ * Since: 3.18
+ */
+void
+cc_font_chooser_set_font_map (CcFontChooser *fontchooser,
+                               PangoFontMap   *fontmap)
+{
+  g_return_if_fail (CC_IS_FONT_CHOOSER (fontchooser));
+  g_return_if_fail (fontmap == NULL || PANGO_IS_FONT_MAP (fontmap));
+
+  if (CC_FONT_CHOOSER_GET_IFACE (fontchooser)->set_font_map)
+    CC_FONT_CHOOSER_GET_IFACE (fontchooser)->set_font_map (fontchooser, fontmap);
+}
+
+/**
+ * cc_font_chooser_get_font_map:
+ * @fontchooser: a #CcFontChooser
+ *
+ * Gets the custom font map of this font chooser widget,
+ * or %NULL if it does not have one.
+ *
+ * Returns: (nullable) (transfer full): a #PangoFontMap, or %NULL
+ *
+ * Since: 3.18
+ */
+PangoFontMap *
+cc_font_chooser_get_font_map (CcFontChooser *fontchooser)
+{
+  PangoFontMap *fontmap = NULL;
+
+  g_return_val_if_fail (CC_IS_FONT_CHOOSER (fontchooser), NULL);
+
+  if (CC_FONT_CHOOSER_GET_IFACE (fontchooser)->get_font_map)
+    fontmap = CC_FONT_CHOOSER_GET_IFACE (fontchooser)->get_font_map (fontchooser);
+
+  return fontmap;
+}
+
+/**
+ * cc_font_chooser_set_level:
+ * @fontchooser: a #CcFontChooser
+ * @level: the desired level of granularity
+ *
+ * Sets the desired level of granularity for selecting fonts.
+ *
+ * Since: 3.24
+ */
+void
+cc_font_chooser_set_level (CcFontChooser      *fontchooser,
+                            CcFontChooserLevel  level)
+{
+  g_return_if_fail (CC_IS_FONT_CHOOSER (fontchooser));
+
+  g_object_set (fontchooser, "level", level, NULL);
+}
+
+/**
+ * cc_font_chooser_get_level:
+ * @fontchooser: a #CcFontChooser
+ *
+ * Returns the current level of granularity for selecting fonts.
+ *
+ * Returns: the current granularity level
+ *
+ * Since: 3.24
+ */
+CcFontChooserLevel
+cc_font_chooser_get_level (CcFontChooser *fontchooser)
+{
+  CcFontChooserLevel level;
+
+  g_return_val_if_fail (CC_IS_FONT_CHOOSER (fontchooser), 0);
+
+  g_object_get (fontchooser, "level", &level, NULL);
+
+  return level;
+}
+
+/**
+ * cc_font_chooser_get_font_features:
+ * @fontchooser: a #CcFontChooser
+ *
+ * Gets the currently-selected font features.
+ *
+ * Returns: the currently selected font features
+ *
+ * Since: 3.24
+ */
+char *
+cc_font_chooser_get_font_features (CcFontChooser *fontchooser)
+{
+  char *text;
+
+  g_return_val_if_fail (CC_IS_FONT_CHOOSER (fontchooser), NULL);
+
+  g_object_get (fontchooser, "font-features", &text, NULL);
+
+  return text;
+}
+
+/**
+ * cc_font_chooser_get_language:
+ * @fontchooser: a #CcFontChooser
+ *
+ * Gets the language that is used for font features.
+ *
+ * Returns: the currently selected language
+ *
+ * Since: 3.24
+ */
+char *
+cc_font_chooser_get_language (CcFontChooser *fontchooser)
+{
+  char *text;
+
+  g_return_val_if_fail (CC_IS_FONT_CHOOSER (fontchooser), NULL);
+
+  g_object_get (fontchooser, "language", &text, NULL);
+
+  return text;
+}
+
+/**
+ * cc_font_chooser_set_language:
+ * @fontchooser: a #CcFontChooser
+ * @language: a language
+ *
+ * Sets the language to use for font features.
+ *
+ * Since: 3.24
+ */
+void
+cc_font_chooser_set_language (CcFontChooser *fontchooser,
+                               const char     *language)
+{
+  g_return_if_fail (CC_IS_FONT_CHOOSER (fontchooser));
+
+  g_object_set (fontchooser, "language", language, NULL);
+}
diff --git a/panels/font/cc-font-chooser.h b/panels/font/cc-font-chooser.h
new file mode 100644
index 0000000..359eb43
--- /dev/null
+++ b/panels/font/cc-font-chooser.h
@@ -0,0 +1,144 @@
+/* GTK - The GIMP Toolkit
+ * gtkfontchooser.h - Abstract interface for font file selectors GUIs
+ *
+ * Copyright (C) 2006, Emmanuele Bassi
+ * Copyright (C) 2011 Alberto Ruiz <aruiz@gnome.org>
+ * Copyright (C) 2020 gooroom <gooroom@gooroom.kr>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef __CC_FONT_CHOOSER_H__
+#define __CC_FONT_CHOOSER_H__
+
+#include <gtk/gtk.h>
+#include "cc-font-define.h"
+
+G_BEGIN_DECLS
+
+/**
+ * CcFontFilterFunc:
+ * @family: a #PangoFontFamily
+ * @face: a #PangoFontFace belonging to @family
+ * @data: (closure): user data passed to cc_font_chooser_set_filter_func()
+ *
+ * The type of function that is used for deciding what fonts get
+ * shown in a #CcFontChooser. See cc_font_chooser_set_filter_func().
+ *
+ * Returns: %TRUE if the font should be displayed
+ */
+typedef gboolean (*CcFontFilterFunc) (const PangoFontFamily *family,
+                                       const PangoFontFace   *face,
+                                       gpointer               data);
+
+#define CC_TYPE_FONT_CHOOSER			(cc_font_chooser_get_type ())
+#define CC_FONT_CHOOSER(obj)			(G_TYPE_CHECK_INSTANCE_CAST ((obj), CC_TYPE_FONT_CHOOSER, CcFontChooser))
+#define CC_IS_FONT_CHOOSER(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), CC_TYPE_FONT_CHOOSER))
+#define CC_FONT_CHOOSER_GET_IFACE(inst)	(G_TYPE_INSTANCE_GET_INTERFACE ((inst), CC_TYPE_FONT_CHOOSER, CcFontChooserIface))
+
+typedef struct _CcFontChooser      CcFontChooser; /* dummy */
+typedef struct _CcFontChooserIface CcFontChooserIface;
+
+/* font chooser level type */
+GType cc_font_chooser_level_get_type (void) G_GNUC_CONST;
+#define CC_TYPE_FONT_CHOOSER_LEVEL (cc_font_chooser_level_get_type ())
+
+struct _CcFontChooserIface
+{
+  GTypeInterface base_iface;
+
+  /* Methods */
+  PangoFontFamily * (* get_font_family)         (CcFontChooser  *fontchooser);
+  PangoFontFace *   (* get_font_face)           (CcFontChooser  *fontchooser);
+  gint              (* get_font_size)           (CcFontChooser  *fontchooser);
+
+  void              (* set_filter_func)         (CcFontChooser   *fontchooser,
+                                                 CcFontFilterFunc filter,
+                                                 gpointer          user_data,
+                                                 GDestroyNotify    destroy);
+
+  /* Signals */
+  void (* font_activated) (CcFontChooser *chooser,
+                           const gchar    *fontname);
+
+  /* More methods */
+  void              (* set_font_map)            (CcFontChooser   *fontchooser,
+                                                 PangoFontMap     *fontmap);
+  PangoFontMap *    (* get_font_map)            (CcFontChooser   *fontchooser);
+
+   /* Padding */
+  gpointer padding[10];
+};
+
+GDK_AVAILABLE_IN_3_2
+GType            cc_font_chooser_get_type                 (void) G_GNUC_CONST;
+
+GDK_AVAILABLE_IN_3_2
+PangoFontFamily *cc_font_chooser_get_font_family          (CcFontChooser   *fontchooser);
+GDK_AVAILABLE_IN_3_2
+PangoFontFace   *cc_font_chooser_get_font_face            (CcFontChooser   *fontchooser);
+GDK_AVAILABLE_IN_3_2
+gint             cc_font_chooser_get_font_size            (CcFontChooser   *fontchooser);
+
+GDK_AVAILABLE_IN_3_2
+PangoFontDescription *
+                 cc_font_chooser_get_font_desc            (CcFontChooser             *fontchooser);
+GDK_AVAILABLE_IN_3_2
+void             cc_font_chooser_set_font_desc            (CcFontChooser             *fontchooser,
+                                                            const PangoFontDescription *font_desc);
+
+GDK_AVAILABLE_IN_3_2
+gchar*           cc_font_chooser_get_font                 (CcFontChooser   *fontchooser);
+
+GDK_AVAILABLE_IN_3_2
+void             cc_font_chooser_set_font                 (CcFontChooser   *fontchooser,
+                                                            const gchar      *fontname);
+GDK_AVAILABLE_IN_3_2
+gchar*           cc_font_chooser_get_preview_text         (CcFontChooser   *fontchooser);
+GDK_AVAILABLE_IN_3_2
+void             cc_font_chooser_set_preview_text         (CcFontChooser   *fontchooser,
+                                                            const gchar      *text);
+GDK_AVAILABLE_IN_3_2
+gboolean         cc_font_chooser_get_show_preview_entry   (CcFontChooser   *fontchooser);
+GDK_AVAILABLE_IN_3_2
+void             cc_font_chooser_set_show_preview_entry   (CcFontChooser   *fontchooser,
+                                                            gboolean          show_preview_entry);
+GDK_AVAILABLE_IN_3_2
+void             cc_font_chooser_set_filter_func          (CcFontChooser   *fontchooser,
+                                                            CcFontFilterFunc filter,
+                                                            gpointer          user_data,
+                                                            GDestroyNotify    destroy);
+GDK_AVAILABLE_IN_3_18
+void             cc_font_chooser_set_font_map             (CcFontChooser   *fontchooser,
+                                                            PangoFontMap     *fontmap);
+GDK_AVAILABLE_IN_3_18
+PangoFontMap *   cc_font_chooser_get_font_map             (CcFontChooser   *fontchooser);
+
+GDK_AVAILABLE_IN_3_24
+void             cc_font_chooser_set_level                (CcFontChooser   *fontchooser,
+                                                            CcFontChooserLevel level);
+GDK_AVAILABLE_IN_3_24
+CcFontChooserLevel
+                 cc_font_chooser_get_level                (CcFontChooser   *fontchooser);
+GDK_AVAILABLE_IN_3_24
+char *           cc_font_chooser_get_font_features        (CcFontChooser   *fontchooser);
+GDK_AVAILABLE_IN_3_24
+char *           cc_font_chooser_get_language             (CcFontChooser   *fontchooser);
+GDK_AVAILABLE_IN_3_24
+void             cc_font_chooser_set_language             (CcFontChooser   *fontchooser,
+                                                            const char       *language);
+
+G_END_DECLS
+
+#endif /* __CC_FONT_CHOOSER_H__ */
diff --git a/panels/font/cc-font-define.h b/panels/font/cc-font-define.h
new file mode 100644
index 0000000..9706ddf
--- /dev/null
+++ b/panels/font/cc-font-define.h
@@ -0,0 +1,61 @@
+/* GTK - The GIMP Toolkit
+ * Copyright (C) 2020 gooroom <gooroom@gooroom.kr>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/*
+ * Modified by the GTK+ Team and others 1997-2000.  See the AUTHORS
+ * file for a list of people on the GTK+ Team.  See the ChangeLog
+ * files for a list of changes.  These files are distributed with
+ * GTK+ at ftp://ftp.gtk.org/pub/gtk/.
+ */
+
+#ifndef __CC_FONT_DEFINE_H_
+#define __CC_FONT_DEFINE_H_
+
+#include <gdk/gdk.h>
+
+G_BEGIN_DECLS
+
+/* This library is copy from gtkprivate.h */
+#define CC_PARAM_READABLE G_PARAM_READABLE|G_PARAM_STATIC_NAME|G_PARAM_STATIC_NICK|G_PARAM_STATIC_BLURB 
+#define CC_PARAM_WRITABLE G_PARAM_WRITABLE|G_PARAM_STATIC_NAME|G_PARAM_STATIC_NICK|G_PARAM_STATIC_BLURB 
+#define CC_PARAM_READWRITE G_PARAM_READWRITE|G_PARAM_STATIC_NAME|G_PARAM_STATIC_NICK|G_PARAM_STATIC_BLURB
+
+/* This library is copy from gtkfontchooser.h */
+typedef enum {
+  CC_FONT_CHOOSER_LEVEL_FAMILY     = 0,
+  CC_FONT_CHOOSER_LEVEL_STYLE      = 1 << 0,
+  CC_FONT_CHOOSER_LEVEL_SIZE       = 1 << 1,
+  CC_FONT_CHOOSER_LEVEL_VARIATIONS = 1 << 2,
+  CC_FONT_CHOOSER_LEVEL_FEATURES   = 1 << 3
+} CcFontChooserLevel;
+
+/* This library is copy from gtkfontchooserutils.h */
+typedef enum {
+  CC_FONT_CHOOSER_PROP_FIRST           = 0x4000,
+  CC_FONT_CHOOSER_PROP_FONT,
+  CC_FONT_CHOOSER_PROP_FONT_DESC,
+  CC_FONT_CHOOSER_PROP_PREVIEW_TEXT,
+  CC_FONT_CHOOSER_PROP_SHOW_PREVIEW_ENTRY,
+  CC_FONT_CHOOSER_PROP_LEVEL,
+  CC_FONT_CHOOSER_PROP_FONT_FEATURES,
+  CC_FONT_CHOOSER_PROP_LANGUAGE,
+  CC_FONT_CHOOSER_PROP_LAST
+} CcFontChooserProp;
+
+G_END_DECLS
+
+#endif /* __CC_FONT_DEFINE_H_ */
diff --git a/panels/font/cc-font-panel.c b/panels/font/cc-font-panel.c
index dc61abe..422833f 100644
--- a/panels/font/cc-font-panel.c
+++ b/panels/font/cc-font-panel.c
@@ -18,15 +18,16 @@
  *
  */
 
-#include "cc-font-panel.h"
-//#include "font-dialog.h"
-#include "cc-font-resources.h"
-
 #include <config.h>
 #include <gtk/gtk.h>
-
 #include <glib/gi18n.h>
 
+#include "cc-font-panel.h"
+#include "cc-font-resources.h"
+#include "cc-font-button.h"
+#include "cc-font-chooser.h"
+#include "cc-font-define.h"
+
 #define WID(y) (GtkWidget *) gtk_builder_get_object (panel->builder, y)
 
 enum {
@@ -244,17 +245,6 @@ changed_antialias_cb (GtkWidget *widget, CcFontPanel *panel)
   g_settings_set_enum (panel->gsd_settings, "antialiasing", value);
 }
 
-static void
-cc_font_panel_class_init (CcFontPanelClass *klass)
-{
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
-  CcPanelClass *panel_class = CC_PANEL_CLASS (klass);
-
-  object_class->dispose = cc_font_panel_dispose;
-
-  panel_class->get_help_uri = cc_font_panel_get_help_uri;
-}
-
 static GtkWidget *
 make_label_for_scale (char *text)
 {
@@ -356,6 +346,17 @@ init_scale_buttons (CcFontPanel *panel)
   panel->is_updating = FALSE;
 }
 
+static void
+cc_font_panel_class_init (CcFontPanelClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  CcPanelClass *panel_class = CC_PANEL_CLASS (klass);
+
+  object_class->dispose = cc_font_panel_dispose;
+
+  panel_class->get_help_uri = cc_font_panel_get_help_uri;
+}
+
 static void
 cc_font_panel_init (CcFontPanel *panel)
 {
@@ -381,9 +382,6 @@ cc_font_panel_init (CcFontPanel *panel)
   panel->font_list = WID ("font-listbox");
   panel->render_list = WID ("render-listbox");
 
-  // remove feature. by ryong
-  //panel->scale_adjustment = gtk_adjustment_new (1, 0.5, 3, 0.01, 0, 0);
-
   // set header separator on listbox row
   gtk_list_box_set_header_func (panel->font_list, call_list_box_separator, NULL, NULL);
   gtk_list_box_set_header_func (panel->render_list, call_list_box_separator, NULL, NULL);
@@ -393,17 +391,35 @@ cc_font_panel_init (CcFontPanel *panel)
   panel->gsd_settings = g_settings_new ("org.gnome.settings-daemon.plugins.xsettings");
 
   // font data binding
-  g_settings_bind (panel->interface_settings, "font-name", WID("interface-fontbutton"),"font", G_SETTINGS_BIND_DEFAULT);
-  g_settings_bind (panel->interface_settings, "document-font-name", WID("doc-text-fontbutton"),"font", G_SETTINGS_BIND_DEFAULT);
-  g_settings_bind (panel->interface_settings, "monospace-font-name", WID("mono-text-fontbutton"),"font", G_SETTINGS_BIND_DEFAULT);
-  g_settings_bind (panel->wm_settings, "titlebar-font", WID("windowtitle-text-fontbutton"),"font", G_SETTINGS_BIND_DEFAULT);
+  //g_settings_bind (panel->interface_settings, "font-name", WID("interface-fontbutton"),"font", G_SETTINGS_BIND_DEFAULT);
+  //g_settings_bind (panel->interface_settings, "document-font-name", WID("doc-text-fontbutton"),"font", G_SETTINGS_BIND_DEFAULT);
+  //g_settings_bind (panel->interface_settings, "monospace-font-name", WID("mono-text-fontbutton"),"font", G_SETTINGS_BIND_DEFAULT);
+
+  //g_settings_bind (panel->wm_settings, "titlebar-font", WID("windowtitle-text-fontbutton"),"font", G_SETTINGS_BIND_DEFAULT);
+
+  w = cc_font_button_new ();
+  gtk_widget_set_valign (GTK_WIDGET (w), GTK_ALIGN_CENTER);
+  gtk_box_pack_start (GTK_BOX (WID ("interface-text-box")), w, FALSE, FALSE, 15);
+  g_settings_bind (panel->interface_settings, "font-name", w, "font", G_SETTINGS_BIND_DEFAULT);
+
+  w = cc_font_button_new ();
+  gtk_widget_set_valign (GTK_WIDGET (w), GTK_ALIGN_CENTER);
+  gtk_box_pack_start (GTK_BOX (WID ("mono-text-box")), w, FALSE, FALSE, 15);
+  g_settings_bind (panel->interface_settings, "monospace-font-name", w, "font", G_SETTINGS_BIND_DEFAULT);
+
+  w = cc_font_button_new ();
+  gtk_widget_set_valign (GTK_WIDGET (w), GTK_ALIGN_CENTER);
+  gtk_box_pack_start (GTK_BOX (WID ("doc-text-box")), w, FALSE, FALSE, 15);
+  g_settings_bind (panel->interface_settings, "document-font-name", w, "font", G_SETTINGS_BIND_DEFAULT);
+
+  w = cc_font_button_new ();
+  gtk_widget_set_valign (GTK_WIDGET (w), GTK_ALIGN_CENTER);
+  gtk_box_pack_start (GTK_BOX (WID ("windowtitle-text-box")), w, FALSE, FALSE, 15);
+  g_settings_bind (panel->wm_settings, "titlebar-font", w, "font", G_SETTINGS_BIND_DEFAULT);
 
   // initialize gsd combo box
   init_gsd_combo_box_model (panel);
 
-  // remove feature. by ryong
-  //init_scale_buttons (panel);
-
   button_val = g_settings_get_enum (panel->gsd_settings, "hinting");
   set_value_for_combo (GTK_COMBO_BOX (panel->hinting_cb), button_val);
 
@@ -415,7 +431,6 @@ cc_font_panel_init (CcFontPanel *panel)
   g_signal_connect (panel->antialias_cb, "changed",
                     G_CALLBACK (changed_antialias_cb), panel);
 
-  w = WID ("font-main-scrolled-window");
-  gtk_container_add (GTK_CONTAINER (panel), w);
+  gtk_container_add (GTK_CONTAINER (panel), WID ("font-main-scrolled-window"));
   gtk_widget_show_all (GTK_WIDGET (panel));
 }
diff --git a/panels/font/cc-font-panel.h b/panels/font/cc-font-panel.h
index 74662ce..270640b 100644
--- a/panels/font/cc-font-panel.h
+++ b/panels/font/cc-font-panel.h
@@ -23,6 +23,8 @@
 
 #include <shell/cc-panel.h>
 
+G_BEGIN_DECLS
+
 #define CC_TYPE_FONT_PANEL (cc_font_panel_get_type ())
 
 G_DECLARE_FINAL_TYPE (CcFontPanel, cc_font_panel, CC, FONT_PANEL, CcPanel)
diff --git a/panels/font/font-button.ui b/panels/font/font-button.ui
new file mode 100644
index 0000000..6c01114
--- /dev/null
+++ b/panels/font/font-button.ui
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<interface domain="gtk30">
+  <!-- interface-requires gtk+ 3.10 -->
+  <template class="CcFontButton" parent="GtkButton">
+    <property name="can-focus">1</property>
+    <property name="receives-default">1</property>
+    <child>
+      <object class="GtkBox" id="box1">
+        <property name="visible">1</property>
+        <child>
+          <object class="GtkLabel" id="font_label">
+            <property name="visible">1</property>
+            <property name="label" translatable="yes">Font</property>
+          </object>
+          <packing>
+            <property name="expand">1</property>
+            <property name="padding">5</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkBox" id="font_size_box">
+            <property name="visible">1</property>
+            <property name="no-show-all">1</property>
+            <child>
+              <object class="GtkSeparator" id="separator">
+                <property name="visible">1</property>
+                <property name="orientation">vertical</property>
+              </object>
+              <packing>
+                <property name="fill">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkLabel" id="size_label">
+                <property name="visible">1</property>
+                <property name="label">14</property>
+              </object>
+              <packing>
+                <property name="fill">0</property>
+                <property name="padding">5</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="position">1</property>
+          </packing>
+        </child>
+      </object>
+    </child>
+  </template>
+</interface>
diff --git a/panels/font/font-chooser-dialog.ui b/panels/font/font-chooser-dialog.ui
new file mode 100644
index 0000000..b00c8b7
--- /dev/null
+++ b/panels/font/font-chooser-dialog.ui
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.22.1 -->
+<interface domain="gtk30">
+  <requires lib="gtk+" version="3.10"/>
+  <template class="CcFontChooserDialog" parent="GtkDialog">
+    <property name="can_focus">False</property>
+    <property name="border_width">5</property>
+    <property name="title" translatable="yes">Select Font</property>
+    <property name="type_hint">dialog</property>
+    <child internal-child="vbox">
+      <object class="GtkBox" id="dialogbox">
+        <property name="can_focus">False</property>
+        <property name="orientation">vertical</property>
+        <property name="spacing">2</property>
+        <child>
+          <object class="CcFontChooserWidget" id="fontchooser">
+            <property name="visible">1</property>
+            <property name="border-width">5</property>
+            <property name="orientation">vertical</property>
+            <property name="spacing">6</property>
+            <signal name="font-activated" handler="font_activated_cb" swapped="no"/>
+          </object>
+          <packing>
+            <property name="expand">1</property>
+            <property name="position">1</property>
+          </packing>
+        </child>
+      </object>
+    </child>
+    <child type="action">
+      <object class="GtkButton" id="cancel_button">
+        <property name="visible">1</property>
+        <property name="use-underline">1</property>
+        <property name="label" translatable="yes">_Cancel</property>
+      </object>
+    </child>
+    <child type="action">
+      <object class="GtkButton" id="select_button">
+        <property name="visible">1</property>
+        <property name="label" translatable="yes">_Select</property>
+        <property name="use-underline">1</property>
+        <property name="can-default">1</property>
+      </object>
+    </child>
+    <action-widgets>
+      <action-widget response="cancel">cancel_button</action-widget>
+      <action-widget response="ok" default="true">select_button</action-widget>
+    </action-widgets>
+  </template>
+</interface>
diff --git a/panels/font/font-chooser-widget.ui b/panels/font/font-chooser-widget.ui
new file mode 100644
index 0000000..ac0affc
--- /dev/null
+++ b/panels/font/font-chooser-widget.ui
@@ -0,0 +1,338 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<interface domain="gtk40">
+  <!-- interface-requires gtk+ 3.10 -->
+  <object class="GtkListStore" id="model">
+    <columns>
+      <!-- column-name family -->
+      <column type="PangoFontFamily"/>
+      <!-- column-name face -->
+      <column type="PangoFontFace"/>
+      <!-- column-name description -->
+      <column type="GtkDelayedFontDescription"/>
+      <!-- column-name preview-title -->
+      <column type="gchararray"/>
+    </columns>
+  </object>
+  <object class="GtkTreeModelFilter" id="filter_model">
+    <property name="child-model">model</property>
+    <signal name="row-deleted" handler="row_deleted_cb" swapped="no"/>
+    <signal name="row-inserted" handler="row_inserted_cb" swapped="no"/>
+  </object>
+  <object class="GtkAdjustment" id="slider_adjustment">
+    <property name="upper">100</property>
+    <property name="step-increment">1</property>
+    <property name="page-increment">10</property>
+    <signal name="value-changed" handler="size_change_cb" swapped="no"/>
+  </object>
+  <object class="GtkAdjustment" id="spin_adjustment">
+    <property name="upper">100</property>
+    <property name="step-increment">1</property>
+    <property name="page-increment">10</property>
+    <signal name="value-changed" handler="size_change_cb" swapped="no"/>
+  </object>
+  <template class="CcFontChooserWidget" parent="GtkBox">
+    <child>
+      <object class="GtkStack" id="stack">
+        <property name="visible">1</property>
+        <child>
+          <object class="GtkGrid" id="grid">
+            <property name="visible">1</property>
+            <property name="row-spacing">6</property>
+            <property name="column-spacing">6</property>
+            <child>
+              <object class="GtkSearchEntry" id="search_entry">
+                <property name="visible">1</property>
+                <property name="can-focus">1</property>
+                <property name="hexpand">1</property>
+                <property name="activates-default">1</property>
+                <property name="primary-icon-name">edit-find-symbolic</property>
+                <property name="primary-icon-activatable">0</property>
+                <property name="secondary-icon-activatable">0</property>
+                <property name="primary-icon-sensitive">0</property>
+                <property name="secondary-icon-sensitive">0</property>
+                <property name="placeholder-text" translatable="yes">Search font name</property>
+                <signal name="search-changed" handler="text_changed_cb" swapped="no"/>
+                <signal name="stop-search" handler="stop_search_cb" swapped="no"/>
+              </object>
+              <packing>
+                <property name="left-attach">0</property>
+                <property name="top-attach">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkStack" id="list_stack">
+                <property name="visible">1</property>
+                <child>
+                  <object class="GtkGrid" id="font_grid">
+                    <property name="visible">1</property>
+                    <property name="row-spacing">6</property>
+                    <property name="column-spacing">6</property>
+                    <child>
+                      <object class="GtkScrolledWindow" id="list_scrolled_window">
+                        <property name="visible">1</property>
+                        <property name="width-request">400</property>
+                        <property name="height-request">300</property>
+                        <property name="can-focus">1</property>
+                        <property name="hexpand">1</property>
+                        <property name="vexpand">1</property>
+                        <property name="hscrollbar-policy">never</property>
+                        <property name="shadow-type">etched-in</property>
+                        <child>
+                          <object class="GtkTreeView" id="family_face_list">
+                            <property name="visible">1</property>
+                            <property name="can-focus">1</property>
+                            <property name="model">filter_model</property>
+                            <property name="headers-visible">0</property>
+                            <property name="enable-search">0</property>
+                            <property name="fixed-height-mode">1</property>
+                            <signal name="cursor-changed" handler="cursor_changed_cb" swapped="no"/>
+                            <signal name="row-activated" handler="row_activated_cb" swapped="no"/>
+                            <signal name="style-updated" handler="cc_font_chooser_widget_set_cell_size" object="CcFontChooserWidget" after="yes" swapped="yes"/>
+                            <child internal-child="selection">
+                              <object class="GtkTreeSelection" id="treeview-selection1">
+                                <property name="mode">browse</property>
+                                <signal name="changed" handler="selection_changed"/>
+                              </object>
+                            </child>
+                            <child>
+                              <object class="GtkTreeViewColumn" id="family_face_column">
+                                <property name="sizing">fixed</property>
+                                <property name="title" translatable="yes">Font Family</property>
+                                <child>
+                                  <object class="GtkCellRendererText" id="family_face_cell">
+                                    <property name="ellipsize">end</property>
+                                  </object>
+                                </child>
+                              </object>
+                            </child>
+                          </object>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="left-attach">0</property>
+                        <property name="top-attach">1</property>
+                        <property name="width">3</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkEntry" id="preview">
+                        <property name="visible">1</property>
+                        <property name="can-focus">1</property>
+                        <property name="placeholder-text" translatable="yes">Preview text</property>
+                        <property name="valign">baseline</property>
+                        <signal name="scroll-event" handler="resize_by_scroll_cb" swapped="no"/>
+                      </object>
+                      <packing>
+                        <property name="left-attach">0</property>
+                        <property name="top-attach">2</property>
+                        <property name="width">3</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkLabel" id="size_label">
+                        <property name="visible">1</property>
+                        <property name="label" translatable="yes">Size</property>
+                        <property name="xalign">0</property>
+                        <property name="valign">baseline</property>
+                      </object>
+                      <packing>
+                        <property name="left-attach">0</property>
+                        <property name="top-attach">3</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkScale" id="size_slider">
+                        <property name="visible">1</property>
+                        <property name="can-focus">1</property>
+                        <property name="hexpand">1</property>
+                        <property name="adjustment">slider_adjustment</property>
+                        <property name="draw-value">0</property>
+                        <property name="round-digits">0</property>
+                        <signal name="scroll-event" handler="resize_by_scroll_cb" swapped="no"/>
+                      </object>
+                      <packing>
+                        <property name="left-attach">1</property>
+                        <property name="top-attach">3</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkSpinButton" id="size_spin">
+                        <property name="visible">1</property>
+                        <property name="can-focus">1</property>
+                        <property name="adjustment">spin_adjustment</property>
+                        <property name="valign">center</property>
+                        <signal name="output" handler="output_cb"/>
+                      </object>
+                      <packing>
+                        <property name="left-attach">2</property>
+                        <property name="top-attach">3</property>
+                      </packing>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="name">list</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkGrid">
+                    <property name="visible">1</property>
+                    <property name="row-spacing">12</property>
+                    <property name="hexpand">1</property>
+                    <property name="vexpand">1</property>
+                    <property name="halign">center</property>
+                    <property name="valign">center</property>
+                    <style>
+                      <class name="dim-label"/>
+                    </style>
+                    <child>
+                      <object class="GtkImage">
+                        <property name="visible">1</property>
+                        <property name="gicon">fonticon</property>
+                        <property name="pixel-size">64</property>
+                      </object>
+                      <packing>
+                        <property name="left-attach">0</property>
+                        <property name="top-attach">0</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkLabel" id="no_font_label">
+                        <property name="visible">1</property>
+                        <property name="label" translatable="yes">No Fonts Found</property>
+                        <attributes>
+                          <attribute name="weight" value="bold"/>
+                          <attribute name="scale" value="1.2"/>
+                        </attributes>
+                      </object>
+                      <packing>
+                        <property name="left-attach">0</property>
+                        <property name="top-attach">1</property>
+                      </packing>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="name">empty</property>
+                  </packing>
+                </child>
+              </object>
+              <packing>
+                <property name="left-attach">0</property>
+                <property name="top-attach">1</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="name">list</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkBox">
+            <property name="visible">1</property>
+            <property name="orientation">vertical</property>
+            <property name="spacing">6</property>
+            <child>
+              <object class="GtkLabel" id="font_name_label">
+                <property name="visible">1</property>
+                <property name="margin-top">6</property>
+                <property name="margin-bottom">6</property>
+                <property name="margin-start">12</property>
+                <property name="margin-end">12</property>
+                <property name="ellipsize">end</property>
+                <property name="xalign">0</property>
+              </object>
+            </child>
+            <child>
+              <object class="GtkEntry" id="preview2">
+                <property name="visible">1</property>
+                <property name="can-focus">1</property>
+                <property name="placeholder-text" translatable="yes">Preview text</property>
+                <property name="text" bind-source="preview" bind-property="text" bind-flags="bidirectional"/>
+                <property name="attributes" bind-source="preview" bind-property="attributes" bind-flags="bidirectional"/>
+              </object>
+            </child>
+            <child>
+              <object class="GtkScrolledWindow">
+                <property name="visible">1</property>
+                <property name="hscrollbar-policy">never</property>
+                <property name="shadow-type">in</property>
+                <property name="vexpand">1</property>
+                <style>
+                  <class name="view"/>
+                </style>
+                <child>
+                  <object class="GtkBox">
+                    <property name="visible">1</property>
+                    <property name="orientation">vertical</property>
+                    <property name="spacing">12</property>
+                    <property name="margin">12</property>
+                    <child>
+                      <object class="GtkGrid" id="axis_grid">
+                        <property name="visible">1</property>
+                        <property name="row-spacing">6</property>
+                        <property name="column-spacing">12</property>
+                        <child>
+                          <object class="GtkLabel" id="size_label2">
+                            <property name="visible">1</property>
+                            <property name="label" translatable="yes">Size</property>
+                            <property name="xalign">0</property>
+                            <property name="valign">baseline</property>
+                          </object>
+                          <packing>
+                            <property name="left-attach">0</property>
+                            <property name="top-attach">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkScale" id="size_slider2">
+                            <property name="visible">1</property>
+                            <property name="can-focus">1</property>
+                            <property name="hexpand">1</property>
+                            <property name="adjustment">slider_adjustment</property>
+                            <property name="draw-value">0</property>
+                            <property name="round-digits">0</property>
+                            <signal name="scroll-event" handler="resize_by_scroll_cb" swapped="no"/>
+                          </object>
+                          <packing>
+                            <property name="left-attach">1</property>
+                            <property name="top-attach">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkSpinButton" id="size_spin2">
+                            <property name="visible">1</property>
+                            <property name="can-focus">1</property>
+                            <property name="adjustment">spin_adjustment</property>
+                            <property name="valign">center</property>
+                            <signal name="output" handler="output_cb"/>
+                          </object>
+                          <packing>
+                            <property name="left-attach">2</property>
+                            <property name="top-attach">0</property>
+                          </packing>
+                        </child>
+                      </object>
+                    </child>
+                    <child>
+                      <object class="GtkBox" id="feature_box">
+                        <property name="visible">1</property>
+                        <property name="orientation">vertical</property>
+                        <property name="spacing">12</property>
+                      </object>
+                    </child>
+                  </object>
+                </child>
+              </object>
+            </child>
+          </object>
+          <packing>
+            <property name="name">tweaks</property>
+          </packing>
+        </child>
+      </object>
+    </child>
+  </template>
+  <object class="GThemedIcon" id="fonticon">
+    <property name="names">font-x-generic-symbolic
+emblem-documents-symbolic</property>
+  </object>
+</interface>
diff --git a/panels/font/font.gresource.xml b/panels/font/font.gresource.xml
index 90315d6..067dc25 100644
--- a/panels/font/font.gresource.xml
+++ b/panels/font/font.gresource.xml
@@ -2,6 +2,9 @@
 <gresources>
   <gresource prefix="/org/gnome/control-center/font">
     <file preprocess="xml-stripblanks">font.ui</file>
+    <file preprocess="xml-stripblanks">font-button.ui</file>
+    <file preprocess="xml-stripblanks">font-chooser-dialog.ui</file>
+    <file preprocess="xml-stripblanks">font-chooser-widget.ui</file>
     <!--<file preprocess="xml-stripblanks">font-dialog.ui</file>-->
   </gresource>
 </gresources>
diff --git a/panels/font/font.ui b/panels/font/font.ui
index 169c75d..87da2c2 100644
--- a/panels/font/font.ui
+++ b/panels/font/font.ui
@@ -100,22 +100,7 @@
                                   </packing>
                                 </child>
                                 <child>
-                                  <object class="GtkFontButton" id="interface-fontbutton">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">True</property>
-                                    <property name="receives_default">True</property>
-                                    <property name="halign">end</property>
-                                    <property name="valign">center</property>
-                                    <property name="margin_right">15</property>
-                                    <property name="font">Sans 12</property>
-                                    <property name="language">ko-kr</property>
-                                    <property name="preview_text"/>
-                                  </object>
-                                  <packing>
-                                    <property name="expand">False</property>
-                                    <property name="fill">True</property>
-                                    <property name="position">1</property>
-                                  </packing>
+                                  <placeholder/>
                                 </child>
                               </object>
                             </child>
@@ -155,22 +140,7 @@
                                   </packing>
                                 </child>
                                 <child>
-                                  <object class="GtkFontButton" id="doc-text-fontbutton">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">True</property>
-                                    <property name="receives_default">True</property>
-                                    <property name="halign">end</property>
-                                    <property name="valign">center</property>
-                                    <property name="margin_right">15</property>
-                                    <property name="font">Sans 12</property>
-                                    <property name="language">ko-kr</property>
-                                    <property name="preview_text"/>
-                                  </object>
-                                  <packing>
-                                    <property name="expand">False</property>
-                                    <property name="fill">True</property>
-                                    <property name="position">1</property>
-                                  </packing>
+                                  <placeholder />
                                 </child>
                               </object>
                             </child>
@@ -210,22 +180,7 @@
                                   </packing>
                                 </child>
                                 <child>
-                                  <object class="GtkFontButton" id="mono-text-fontbutton">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">True</property>
-                                    <property name="receives_default">True</property>
-                                    <property name="halign">end</property>
-                                    <property name="valign">center</property>
-                                    <property name="margin_right">15</property>
-                                    <property name="font">Sans 12</property>
-                                    <property name="language">ko-kr</property>
-                                    <property name="preview_text"/>
-                                  </object>
-                                  <packing>
-                                    <property name="expand">False</property>
-                                    <property name="fill">True</property>
-                                    <property name="position">1</property>
-                                  </packing>
+                                  <placeholder />
                                 </child>
                               </object>
                             </child>
@@ -265,23 +220,8 @@
                                   </packing>
                                 </child>
                                 <child>
-                                  <object class="GtkFontButton" id="windowtitle-text-fontbutton">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">True</property>
-                                    <property name="receives_default">True</property>
-                                    <property name="halign">end</property>
-                                    <property name="valign">center</property>
-                                    <property name="margin_right">15</property>
-                                    <property name="font">Sans 12</property>
-                                    <property name="language">ko-kr</property>
-                                    <property name="preview_text"/>
-                                  </object>
-                                  <packing>
-                                    <property name="expand">False</property>
-                                    <property name="fill">True</property>
-                                    <property name="position">1</property>
-                                  </packing>
-                                </child>
+                                  <placeholder/>
+                                </child>                              
                               </object>
                             </child>
                           </object>
@@ -429,61 +369,6 @@
                             </child>
                           </object>
                         </child>
-                        <!--<child>
-                          <object class="GtkListBoxRow" id="scale-listboxrow">
-                            <property name="height_request">32</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="activatable">False</property>
-                            <property name="selectable">False</property>
-                            <child>
-                              <object class="GtkBox" id="scale-box">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <child>
-                                  <object class="GtkLabel" id="scale-label">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="margin_left">12</property>
-                                    <property name="margin_top">8</property>
-                                    <property name="margin_bottom">8</property>
-                                    <property name="ypad">2</property>
-                                    <property name="label" translatable="yes">Scale Constant</property>
-                                    <property name="use_underline">True</property>
-                                    <property name="xalign">0</property>
-                                  </object>
-                                  <packing>
-                                    <property name="expand">False</property>
-                                    <property name="fill">True</property>
-                                    <property name="position">0</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkButtonBox" id="scale-bbox">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="halign">end</property>
-                                    <property name="valign">center</property>
-                                    <property name="margin_right">15</property>
-                                    <property name="margin_top">10</property>
-                                    <property name="margin_bottom">10</property>
-                                    <property name="homogeneous">True</property>
-                                    <property name="layout_style">start</property>
-                                    <child>
-                                      <placeholder/>
-                                    </child>
-                                  </object>
-                                  <packing>
-                                    <property name="expand">False</property>
-                                    <property name="fill">True</property>
-                                    <property name="pack_type">end</property>
-                                    <property name="position">1</property>
-                                  </packing>
-                                </child>
-                              </object>
-                            </child>
-                          </object>
-                        </child>-->
                       </object>
                     </child>
                   </object>
diff --git a/panels/font/meson.build b/panels/font/meson.build
index 36c38d1..a14c560 100644
--- a/panels/font/meson.build
+++ b/panels/font/meson.build
@@ -21,8 +21,9 @@ datadir = get_option('datadir')
 
 resource_data = files(
   'font.ui',
-  #'font-dialog.ui',
-  #'rgba-images.h'
+  'font-button.ui',
+  'font-chooser-widget.ui',
+  'font-chooser-dialog.ui',
 )
 
 common_sources = []
@@ -36,6 +37,11 @@ common_sources += gnome.compile_resources(
 
 sources = files(
   'cc-font-panel.c',
+  'cc-font-button.c',
+  'cc-font-chooser.c',
+  'cc-font-chooser-utils.c',
+  'cc-font-chooser-widget.c',
+  'cc-font-chooser-dialog.c',
 )
 
 deps = common_deps + [
diff --git a/po/POTFILES.in b/po/POTFILES.in
index 2f8878d..69006ee 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -241,5 +241,7 @@ panels/font/font.ui
 panels/themes/gnome-themes-panel.desktop.in.in
 panels/themes/cc-themes-panel.c
 panels/themes/themes.ui
+panels/font/cc-font-button.c
+panels/font/font-chooser-widget.ui
 # Please do not remove this file from POTFILES.in. Run "git submodule init && git submodule update" to get it.
 subprojects/gvc/gvc-mixer-control.c
diff --git a/po/en.po b/po/en.po
index 3ecd651..43251d2 100644
--- a/po/en.po
+++ b/po/en.po
@@ -3339,3 +3339,31 @@ msgstr ""
 ""
 ""
 ""
+
+#: ../panels/font/gnome-font-panel.desktop.in.in:3
+msgid "Change your font"
+msgstr ""
+
+#: ../panels/font/font-chooser-widget.ui:53
+msgid "Search font name"
+msgstr ""
+
+#: ../panels/font/font-chooser-widget.ui:121
+#: ../panels/font/font-chooser-widget.ui:248
+msgid "Preview text"
+msgstr ""
+
+#: ../panels/font/font-chooser-widget.ui:134
+#: ../panels/font/font-chooser-widget.ui:223
+#: ../panels/font/font-chooser-widget.ui:276
+msgid "Size"
+msgstr ""
+
+#: ../panels/font/font-chooser-widget.ui:201
+msgid "No Fonts Found"
+msgstr ""
+
+#: ../panels/font/cc-font-button.c:483
+#: ../panels/font/cc-font-button.c:617
+msgid "Pick a Font"
+msgstr ""
diff --git a/po/en_GB.po b/po/en_GB.po
index d2c4e09..846ff51 100644
--- a/po/en_GB.po
+++ b/po/en_GB.po
@@ -13451,3 +13451,25 @@ msgstr ""
 "User infomations has changed.\n"
 "Changes take effect after your session needs to be restarted.\n"
 "Do you want restart?"
+
+#: ../panels/font/gnome-font-panel.desktop.in.in:3
+msgid "Change your font"
+msgstr "Change your font"
+
+#: ../panels/font/font-chooser-widget.ui:53
+msgid "Search font name"
+msgstr "Search font name"
+
+#: ../panels/font/font-chooser-widget.ui:121
+#: ../panels/font/font-chooser-widget.ui:248
+msgid "Preview text"
+msgstr "Preview text"
+
+#: ../panels/font/font-chooser-widget.ui:201
+msgid "No Fonts Found"
+msgstr "No Fonts Found"
+
+#: ../panels/font/cc-font-button.c:483
+#: ../panels/font/cc-font-button.c:617
+msgid "Pick a Font"
+msgstr "Pick a Font"
diff --git a/po/ko.po b/po/ko.po
index b8b34d1..824c795 100644
--- a/po/ko.po
+++ b/po/ko.po
@@ -7869,3 +7869,31 @@ msgstr ""
 "사용자 정보가 변경되었습니다.\n"
 "세션을 다시 시작해야 변경 사항이 적용됩니다.\n"
 "다시 시작하시겠습니까?"
+
+#: ../panels/font/gnome-font-panel.desktop.in.in:3
+msgid "Change your font"
+msgstr "폰트를 변경합니다"
+
+#: ../panels/font/font-chooser-widget.ui:53
+msgid "Search font name"
+msgstr "글꼴 검색"
+
+#: ../panels/font/font-chooser-widget.ui:121
+#: ../panels/font/font-chooser-widget.ui:248
+msgid "Preview text"
+msgstr "미리보기 텍스트"
+
+#: ../panels/font/font-chooser-widget.ui:134
+#: ../panels/font/font-chooser-widget.ui:223
+#: ../panels/font/font-chooser-widget.ui:276
+msgid "Size"
+msgstr "크기"
+
+#: ../panels/font/font-chooser-widget.ui:201
+msgid "No Fonts Found"
+msgstr "글꼴이 없습니다"
+
+#: ../panels/font/cc-font-button.c:483
+#: ../panels/font/cc-font-button.c:617
+msgid "Pick a Font"
+msgstr "글꼴 고르기"
-- 
2.20.1

