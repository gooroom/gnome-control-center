diff --git a/panels/region/cc-region-panel.c b/panels/region/cc-region-panel.c
index aced978..e9a02b6 100644
--- a/panels/region/cc-region-panel.c
+++ b/panels/region/cc-region-panel.c
@@ -73,7 +73,6 @@ struct _CcRegionPanel {
         GtkWidget   *login_button;
         GtkWidget   *login_label;
         gboolean     login;
-        gboolean     login_auto_apply;
         GPermission *permission;
         SystemOp     op;
         GDBusProxy  *localed;
@@ -365,7 +364,7 @@ maybe_notify (CcRegionPanel *self,
                            mnd);
 }
 
-static void set_localed_locale (CcRegionPanel *self);
+static void set_localed_locale (CcRegionPanel *self, gboolean lang_changed);
 
 static void
 set_system_language (CcRegionPanel *self,
@@ -377,7 +376,7 @@ set_system_language (CcRegionPanel *self,
         g_free (self->system_language);
         self->system_language = g_strdup (language);
 
-        set_localed_locale (self);
+        set_localed_locale (self, TRUE);
 }
 
 static void
@@ -405,10 +404,8 @@ update_language (CcRegionPanel *self,
                 if (g_strcmp0 (language, self->language) == 0)
                         return;
                 set_user_language (self, language);
-                if (self->login_auto_apply)
-                        set_system_language (self, language);
+                maybe_notify (self, LC_MESSAGES, language);
         }
-        maybe_notify (self, LC_MESSAGES, language);
 }
 
 static void
@@ -436,7 +433,7 @@ set_system_region (CcRegionPanel *self,
         g_free (self->system_region);
         self->system_region = g_strdup (region);
 
-        set_localed_locale (self);
+        set_localed_locale (self, FALSE);
 }
 
 static void
@@ -449,10 +446,8 @@ update_region (CcRegionPanel *self,
                 if (g_strcmp0 (region, self->region) == 0)
                         return;
                 g_settings_set_string (self->locale_settings, KEY_REGION, region);
-                if (self->login_auto_apply)
-                        set_system_region (self, region);
+                maybe_notify (self, LC_TIME, region);
         }
-        maybe_notify (self, LC_TIME, region);
 }
 
 static void
@@ -710,80 +705,107 @@ options_response (GtkDialog     *options,
 }
 
 static void
-on_localed_properties_changed (GDBusProxy     *proxy,
-                               GVariant       *changed_properties,
-                               const gchar   **invalidated_properties,
-                               CcRegionPanel  *self)
+update_locale_done_cb (GPid pid, gint status, gpointer data)
 {
-        g_autoptr(GVariant) v = NULL;
+        g_spawn_close_pid (pid);
+}
 
-        v = g_dbus_proxy_get_cached_property (proxy, "Locale");
-        if (v) {
-                g_autofree const gchar **strv = NULL;
-                gsize len;
-                gint i;
-                const gchar *lang, *messages, *time;
+static void
+set_localed_locale (CcRegionPanel *self, gboolean lang_changed)
+{
+        GPid pid;
+        gchar **argv = NULL;
+        gchar *cmd = NULL, *args = NULL;
 
-                strv = g_variant_get_strv (v, &len);
+        if (lang_changed) {
+                args = g_strdup_printf ("LANG=%s", self->system_language);
+       } else {
+                args = g_strdup_printf ("LC_TIME=%s LC_NUMERIC=%s "
+                                        "LC_COLLATE=%s LC_MONETARY=%s "
+                                        "LC_PAPER=%s LC_NAME=%s "
+                                        "LC_ADDRESS=%s LC_TELEPHONE=%s "
+                                        "LC_MEASUREMENT=%s LC_IDENTIFICATION=%s",
+                                        self->system_region, self->system_region,
+                                        self->system_region, self->system_region,
+                                        self->system_region, self->system_region,
+                                        self->system_region, self->system_region,
+                                        self->system_region, self->system_region);
+        }
 
-                lang = messages = time = NULL;
-                for (i = 0; strv[i]; i++) {
-                        if (g_str_has_prefix (strv[i], "LANG=")) {
-                                lang = strv[i] + strlen ("LANG=");
-                        } else if (g_str_has_prefix (strv[i], "LC_MESSAGES=")) {
-                                messages = strv[i] + strlen ("LC_MESSAGES=");
-                        } else if (g_str_has_prefix (strv[i], "LC_TIME=")) {
-                                time = strv[i] + strlen ("LC_TIME=");
-                        }
-                }
-                if (!lang) {
-                        lang = setlocale (LC_MESSAGES, NULL);
-                }
-                if (!messages) {
-                        messages = lang;
-                }
-                g_free (self->system_language);
-                self->system_language = g_strdup (messages);
-                g_free (self->system_region);
-                self->system_region = g_strdup (time);
+        cmd = g_strdup_printf ("/usr/bin/pkexec /usr/sbin/update-locale %s", args);
 
-                update_language_label (self);
+        g_shell_parse_argv (cmd, NULL, &argv, NULL);
+
+        if (g_spawn_async (NULL, argv, NULL,
+                           G_SPAWN_SEARCH_PATH | G_SPAWN_DO_NOT_REAP_CHILD,
+                           NULL, NULL, &pid, NULL)) {
+                g_child_watch_add (pid, (GChildWatchFunc) update_locale_done_cb, NULL);
         }
-}
 
-static void
-set_localed_locale (CcRegionPanel *self)
-{
-        g_autoptr(GVariantBuilder) b = NULL;
-        g_autofree gchar *lang_value = NULL;
-
-        b = g_variant_builder_new (G_VARIANT_TYPE ("as"));
-        lang_value = g_strconcat ("LANG=", self->system_language, NULL);
-        g_variant_builder_add (b, "s", lang_value);
-
-        if (self->system_region != NULL &&
-            g_strcmp0 (self->system_language, self->system_region) != 0) {
-                g_autofree gchar *time_value = NULL;
-                g_autofree gchar *numeric_value = NULL;
-                g_autofree gchar *monetary_value = NULL;
-                g_autofree gchar *measurement_value = NULL;
-                g_autofree gchar *paper_value = NULL;
-                time_value = g_strconcat ("LC_TIME=", self->system_region, NULL);
-                g_variant_builder_add (b, "s", time_value);
-                numeric_value = g_strconcat ("LC_NUMERIC=", self->system_region, NULL);
-                g_variant_builder_add (b, "s", numeric_value);
-                monetary_value = g_strconcat ("LC_MONETARY=", self->system_region, NULL);
-                g_variant_builder_add (b, "s", monetary_value);
-                measurement_value = g_strconcat ("LC_MEASUREMENT=", self->system_region, NULL);
-                g_variant_builder_add (b, "s", measurement_value);
-                paper_value = g_strconcat ("LC_PAPER=", self->system_region, NULL);
-                g_variant_builder_add (b, "s", paper_value);
+        g_free (args);
+        g_free (cmd);
+        g_strfreev (argv);
+}
+
+static void
+update_system_locale (CcRegionPanel *self)
+{
+        gchar **lines = NULL;
+        gchar *contents = NULL;
+        gchar *lang = NULL, *messages = NULL, *region = NULL;
+
+        g_file_get_contents ("/etc/default/locale", &contents, NULL, NULL);
+        if (contents) {
+                guint i = 0;
+                lines = g_strsplit (contents, "\n", -1);
+                for (i = 0; lines[i] != NULL; i++) {
+                        if (g_str_has_prefix (lines[i], "LANG=")) {
+                                lang = lines[i] + strlen ("LANG=");
+                        } else if (g_str_has_prefix (lines[i], "LC_MESSAGES")) {
+                                messages = lines[i] + strlen ("LC_MESSAGES=");
+                        } else if (g_str_has_prefix (lines[i], "LC_TIME")) {
+                                region = lines[i] + strlen ("LC_TIME=");
+                        }/* else if (g_str_has_prefix (lines[i], "LC_NUMERIC")) {
+                                region = lines[i] + strlen ("LC_NUMERIC=");
+                        } else if (g_str_has_prefix (lines[i], "LC_COLLATE")) {
+                                region = lines[i] + strlen ("LC_COLLATE=");
+                        } else if (g_str_has_prefix (lines[i], "LC_MONETARY")) {
+                                region = lines[i] + strlen ("LC_MONETARY=");
+                        } else if (g_str_has_prefix (lines[i], "LC_PAPER")) {
+                                region = lines[i] + strlen ("LC_PAPER=");
+                        } else if (g_str_has_prefix (lines[i], "LC_NAME")) {
+                                region = lines[i] + strlen ("LC_NAME=");
+                        } else if (g_str_has_prefix (lines[i], "LC_ADDRESS")) {
+                                region = lines[i] + strlen ("LC_ADDRESS=");
+                        } else if (g_str_has_prefix (lines[i], "LC_TELEPHONE")) {
+                                region = lines[i] + strlen ("LC_TELEPHONE=");
+                        } else if (g_str_has_prefix (lines[i], "LC_MEASUREMENT")) {
+                                region = lines[i] + strlen ("LC_MEASUREMENT=");
+                        } else if (g_str_has_prefix (lines[i], "LC_IDENTIFICATION")) {
+                                region = lines[i] + strlen ("LC_IDENTIFICATION=");
+                        }*/
+                }
         }
-        g_dbus_proxy_call (self->localed,
-                           "SetLocale",
-                           g_variant_new ("(asb)", b, TRUE),
-                           G_DBUS_CALL_FLAGS_NONE,
-                           -1, NULL, NULL, NULL);
+
+        if (!lang) {
+                lang = setlocale (LC_MESSAGES, NULL);
+        }
+        if (!messages) {
+                messages = lang;
+        }
+        if (!region) {
+                region = lang;
+        }
+
+        g_free (self->system_language);
+        self->system_language = g_strdup (messages);
+        g_free (self->system_region);
+        self->system_region = g_strdup (region);
+
+        update_language_label (self);
+
+        if (contents) g_free (contents);
+        if (lines) g_strfreev (lines);
 }
 
 static void
@@ -807,9 +829,31 @@ localed_proxy_ready (GObject      *source,
 
         gtk_widget_set_sensitive (self->login_button, TRUE);
 
-        g_signal_connect (self->localed, "g-properties-changed",
-                          G_CALLBACK (on_localed_properties_changed), self);
-        on_localed_properties_changed (self->localed, NULL, NULL, self);
+        update_system_locale (self);
+}
+
+static void
+locale_file_changed_cb (GFileMonitor      *monitor,
+                        GFile             *file,
+                        GFile             *other_file,
+                        GFileMonitorEvent  event_type,
+                        gpointer           user_data)
+{
+        CcRegionPanel *self = CC_REGION_PANEL (user_data);
+
+        switch (event_type)
+        {
+            case G_FILE_MONITOR_EVENT_CHANGED:
+            case G_FILE_MONITOR_EVENT_DELETED:
+            case G_FILE_MONITOR_EVENT_CREATED:
+            {
+                    update_system_locale (self);
+                    break;
+            }
+
+            default:
+                break;
+        }
 }
 
 static void
@@ -820,6 +864,15 @@ login_changed (CcRegionPanel *self)
         self->login = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (self->login_button));
         gtk_widget_set_visible (self->login_label, self->login);
 
+        if (self->login) {
+                gtk_revealer_set_reveal_child (GTK_REVEALER (self->restart_revealer), FALSE);
+        } else {
+                g_autoptr(GFile) needs_restart_file = NULL;
+                needs_restart_file = get_needs_restart_file ();
+                if (g_file_query_exists (needs_restart_file, NULL))
+                        set_restart_notification_visible (self, NULL, TRUE);
+        }
+
         can_acquire = self->permission &&
                 (g_permission_get_allowed (self->permission) ||
                  g_permission_get_can_acquire (self->permission));
@@ -829,38 +882,31 @@ login_changed (CcRegionPanel *self)
         update_language_label (self);
 }
 
-static void
-set_login_button_visibility (CcRegionPanel *self)
-{
-        gboolean has_multiple_users;
-        gboolean loaded;
-
-        g_object_get (self->user_manager, "is-loaded", &loaded, NULL);
-        if (!loaded)
-          return;
-
-        g_object_get (self->user_manager, "has-multiple-users", &has_multiple_users, NULL);
-
-        self->login_auto_apply = !has_multiple_users && g_permission_get_allowed (self->permission);
-        gtk_widget_set_visible (self->login_button, !self->login_auto_apply);
-
-        g_signal_handlers_disconnect_by_func (self->user_manager, set_login_button_visibility, self);
-}
-
 static void
 setup_login_button (CcRegionPanel *self)
 {
         g_autoptr(GDBusConnection) bus = NULL;
-        gboolean loaded;
         g_autoptr(GError) error = NULL;
+        GFile *file;
+        GFileMonitor *monitor;
 
-        self->permission = polkit_permission_new_sync ("org.freedesktop.locale1.set-locale", NULL, NULL, &error);
+        self->permission = polkit_permission_new_sync ("org.gnome.controlcenter.update-locale", NULL, NULL, &error);
         if (self->permission == NULL) {
-                g_warning ("Could not get 'org.freedesktop.locale1.set-locale' permission: %s",
+                g_warning ("Could not get 'org.gnome.controlcenter.update-locale' permission: %s",
                            error->message);
                 return;
         }
 
+        file = g_file_new_for_path ("/etc/default/locale");
+
+        monitor = g_file_monitor_file (file, G_FILE_MONITOR_NONE, NULL, &error);
+        if (error) {
+            g_error_free (error);
+        } else {
+            g_signal_connect (monitor, "changed", G_CALLBACK (locale_file_changed_cb), self);
+        }
+        g_object_unref (file);
+
         bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, NULL);
         g_dbus_proxy_new (bus,
                           G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES,
@@ -876,17 +922,10 @@ setup_login_button (CcRegionPanel *self)
         gtk_style_context_add_class (gtk_widget_get_style_context (self->login_button),
                                      "text-button");
         gtk_widget_set_valign (self->login_button, GTK_ALIGN_CENTER);
-        gtk_widget_set_visible (self->login_button, FALSE);
+        gtk_widget_set_visible (self->login_button, TRUE);
         gtk_widget_set_sensitive (self->login_button, FALSE);
         g_signal_connect_swapped (self->login_button, "notify::active",
                                   G_CALLBACK (login_changed), self);
-
-        g_object_get (self->user_manager, "is-loaded", &loaded, NULL);
-        if (loaded)
-                set_login_button_visibility (self);
-        else
-                g_signal_connect_swapped (self->user_manager, "notify::is-loaded",
-                                          G_CALLBACK (set_login_button_visibility), self);
 }
 
 static void
diff --git a/panels/region/meson.build b/panels/region/meson.build
index f028829..a1352f5 100644
--- a/panels/region/meson.build
+++ b/panels/region/meson.build
@@ -17,6 +17,26 @@ i18n.merge_file(
   install_dir: control_center_desktopdir
 )
 
+polkit_conf = configuration_data()
+polkit_conf.set('libexecdir', control_center_libexecdir)
+
+polkit = 'org.gnome.controlcenter.region.policy'
+
+polkit_in = configure_file(
+  input: polkit + '.in.in',
+  output: polkit + '.in',
+  configuration: polkit_conf
+)
+
+i18n.merge_file(
+  polkit,
+  input: polkit_in,
+  output: polkit,
+  po_dir: po_dir,
+  install: true,
+  install_dir: join_paths(control_center_datadir, 'polkit-1', 'actions')
+)
+
 sources = files(
   'cc-region-panel.c',
   'cc-format-chooser.c',
diff --git a/panels/region/org.gnome.controlcenter.region.policy.in.in b/panels/region/org.gnome.controlcenter.region.policy.in.in
new file mode 100644
index 0000000..5bea441
--- /dev/null
+++ b/panels/region/org.gnome.controlcenter.region.policy.in.in
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE policyconfig PUBLIC
+ "-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN"
+ "http://www.freedesktop.org/standards/PolicyKit/1.0/policyconfig.dtd">
+<policyconfig>
+
+  <vendor>The GNOME Project</vendor>
+  <action id="org.gnome.controlcenter.update-locale">
+    <defaults>
+      <allow_any>no</allow_any>
+      <allow_inactive>no</allow_inactive>
+      <allow_active>auth_admin_keep</allow_active>
+    </defaults>
+    <annotate key="org.freedesktop.policykit.exec.path">/usr/sbin/update-locale</annotate>
+  </action>
+
+</policyconfig>
