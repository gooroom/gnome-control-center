From 6e3adfa8777937430af31f51ccfb4d9511adfaa2 Mon Sep 17 00:00:00 2001
From: HaeRyong Jeong <jeong89@gooroom.kr>
Date: Thu, 29 Oct 2020 16:24:18 +0900
Subject: [PATCH] change background and themes panel ui

Change-Id: Ic0836adf964bb0a5abed6c680c186a854a039bd3
---
 panels/background/background-chooser.ui    | 180 +++++
 panels/background/background.gresource.xml |   4 +
 panels/background/background.ui            | 478 ++++++++------
 panels/background/bg-colors-source.c       |  61 +-
 panels/background/bg-colors-source.h       |   7 +-
 panels/background/bg-pictures-source.c     | 280 ++------
 panels/background/bg-pictures-source.h     |   8 +-
 panels/background/bg-recent-source.c       | 470 +++++++++++++
 panels/background/bg-recent-source.h       |  39 ++
 panels/background/bg-source.c              |  78 ++-
 panels/background/bg-source.h              |  14 +-
 panels/background/bg-wallpapers-source.c   |  48 +-
 panels/background/bg-wallpapers-source.h   |   8 +-
 panels/background/cc-background-chooser.c  | 344 ++++++++++
 panels/background/cc-background-chooser.h  |  12 +
 panels/background/cc-background-item.c     |  97 +--
 panels/background/cc-background-item.h     |   5 +-
 panels/background/cc-background-panel.c    | 728 +++++++++++++--------
 panels/background/check-icon.svg           |   6 +
 panels/background/color-check-icon.svg     |   6 +
 panels/background/meson.build              |  38 +-
 panels/background/style.css                |  24 +
 panels/themes/cc-themes-panel.c            | 403 ++++--------
 panels/themes/cc-themes-theme.c            | 276 ++++++++
 panels/themes/cc-themes-theme.h            |  22 +
 panels/themes/check-icon.svg               |   6 +
 panels/themes/meson.build                  |   6 +-
 panels/themes/style.css                    |  28 +
 panels/themes/themes-theme.ui              |  77 +++
 panels/themes/themes.gresource.xml         |   3 +
 panels/themes/themes.ui                    | 146 +----
 po/en.po                                   |  57 ++
 po/en_GB.po                                |  38 +-
 po/ko.po                                   |  32 +
 34 files changed, 2752 insertions(+), 1277 deletions(-)
 create mode 100644 panels/background/background-chooser.ui
 create mode 100644 panels/background/bg-recent-source.c
 create mode 100644 panels/background/bg-recent-source.h
 create mode 100644 panels/background/cc-background-chooser.c
 create mode 100644 panels/background/cc-background-chooser.h
 create mode 100644 panels/background/check-icon.svg
 create mode 100644 panels/background/color-check-icon.svg
 create mode 100644 panels/background/style.css
 create mode 100644 panels/themes/cc-themes-theme.c
 create mode 100644 panels/themes/cc-themes-theme.h
 create mode 100644 panels/themes/check-icon.svg
 create mode 100644 panels/themes/style.css
 create mode 100644 panels/themes/themes-theme.ui

diff --git a/panels/background/background-chooser.ui b/panels/background/background-chooser.ui
new file mode 100644
index 0000000..4612a1a
--- /dev/null
+++ b/panels/background/background-chooser.ui
@@ -0,0 +1,180 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.22.1 -->
+<interface>
+  <requires lib="gtk+" version="3.20"/>
+  <object class="GtkListStore" id="type-liststore">
+    <columns>
+      <!-- column-name column1 -->
+      <column type="gchararray"/>
+      <!-- column-name gint1 -->
+      <column type="gint"/>
+    </columns>
+    <data>
+      <row>
+        <col id="0" translatable="yes">Image</col>
+        <col id="1">0</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">Single Colors</col>
+        <col id="1">1</col>
+      </row>
+    </data>
+  </object>
+  <template class="CcBackgroundChooser" parent="GtkBox">
+    <property name="visible">True</property>
+    <property name="can_focus">False</property>
+    <property name="orientation">vertical</property>
+    <property name="spacing">20</property>
+    <child>
+      <object class="GtkBox">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="orientation">vertical</property>
+        <property name="spacing">10</property>
+        <child>
+          <object class="GtkLabel" id="background_label">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="halign">start</property>
+            <property name="label" translatable="yes">Select Background</property>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkBox">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="spacing">1</property>
+            <child>
+              <object class="GtkComboBoxText" id="background_select_combobox">
+                <property name="width_request">300</property>
+                <property name="height_request">34</property>
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="halign">start</property>
+                <property name="model">type-liststore</property>
+                <signal name="changed" handler="on_background_changed" object="CcBackgroundChooser" swapped="no"/>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="chooser_button">
+                <property name="label" translatable="yes">Add Image</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <signal name="clicked" handler="on_clicked_add_image" object="CcBackgroundChooser" swapped="no"/>
+                <style>
+                  <class name="chooser-button"/>
+                </style>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
+            <property name="position">1</property>
+          </packing>
+        </child>
+      </object>
+      <packing>
+        <property name="expand">False</property>
+        <property name="fill">True</property>
+        <property name="position">0</property>
+      </packing>
+    </child>
+    <child>
+      <object class="GtkStack" id="background_stack">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="hhomogeneous">False</property>
+        <property name="vhomogeneous">False</property>
+        <child>
+          <object class="GtkBox">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="halign">start</property>
+            <property name="orientation">vertical</property>
+            <child>
+              <object class="GtkFlowBox" id="recent_flowbox">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="halign">start</property>
+                <property name="min_children_per_line">3</property>
+                <property name="max_children_per_line">3</property>
+                <signal name="child-activated" handler="on_background_item_activated" object="CcBackgroundChooser" swapped="no"/>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkFlowBox" id="wallpaper_flowbox">
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="min_children_per_line">3</property>
+                <property name="max_children_per_line">3</property>
+                <signal name="child-activated" handler="on_background_item_activated" object="CcBackgroundChooser" swapped="no"/>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="name">wallpaper</property>
+            <property name="title" translatable="yes">page0</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkBox">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="halign">start</property>
+            <child>
+              <object class="GtkFlowBox" id="color_flowbox">
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="min_children_per_line">10</property>
+                <property name="max_children_per_line">10</property>
+                <signal name="child-activated" handler="on_background_item_activated" object="CcBackgroundChooser" swapped="no"/>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="name">single-color</property>
+            <property name="title" translatable="yes">page1</property>
+            <property name="position">1</property>
+          </packing>
+        </child>
+      </object>
+      <packing>
+        <property name="expand">True</property>
+        <property name="fill">True</property>
+        <property name="position">1</property>
+      </packing>
+    </child>
+  </template>
+</interface>
diff --git a/panels/background/background.gresource.xml b/panels/background/background.gresource.xml
index e8e4ff3..3374a40 100644
--- a/panels/background/background.gresource.xml
+++ b/panels/background/background.gresource.xml
@@ -2,5 +2,9 @@
 <gresources>
   <gresource prefix="/org/gnome/control-center/background">
     <file preprocess="xml-stripblanks">background.ui</file>
+    <file preprocess="xml-stripblanks">background-chooser.ui</file>
+    <file alias="color_check_icon">color-check-icon.svg</file>
+    <file alias="check_icon">check-icon.svg</file>
+    <file>style.css</file>
   </gresource>
 </gresources>
diff --git a/panels/background/background.ui b/panels/background/background.ui
index abf79ea..b94baee 100644
--- a/panels/background/background.ui
+++ b/panels/background/background.ui
@@ -1,123 +1,30 @@
 <?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.22.1 -->
 <interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkBox" id="background-panel">
+  <requires lib="gtk+" version="3.20"/>
+  <template class="CcBackgroundPanel" parent="CcPanel">
     <property name="visible">True</property>
     <property name="can_focus">False</property>
-    <property name="margin">32</property>
-    <property name="spacing">12</property>
-    <property name="valign">center</property>
     <child>
-      <object class="GtkBox" id="box1">
+      <placeholder/>
+    </child>
+    <child>
+      <object class="GtkBox">
         <property name="visible">True</property>
         <property name="can_focus">False</property>
-        <property name="spacing">24</property>
+        <property name="margin_left">30</property>
+        <property name="orientation">vertical</property>
+        <property name="spacing">40</property>
         <child>
-          <object class="GtkBox" id="vbox3">
+          <object class="GtkLabel" id="background_label">
             <property name="visible">True</property>
             <property name="can_focus">False</property>
-            <property name="halign">end</property>
-            <property name="valign">center</property>
-            <property name="orientation">vertical</property>
-            <child>
-              <object class="GtkButton" id="background-set-button">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <child>
-                  <object class="GtkBox" id="box2">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="margin">6</property>
-                    <property name="spacing">6</property>
-                    <property name="orientation">vertical</property>
-                    <child>
-                      <object class="GtkDrawingArea" id="background-desktop-drawingarea">
-                        <property name="width_request">310</property>
-                        <property name="height_request">170</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="valign">center</property>
-                        <property name="hexpand">True</property>
-                        <property name="vexpand">True</property>
-                      </object>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="label1">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="label" translatable="yes">_Background</property>
-                        <property name="use_underline">True</property>
-                        <property name="mnemonic_widget">background-set-button</property>
-                      </object>
-                    </child>
-                  </object>
-                </child>
-              </object>
-            </child>
-            <child>
-              <object class="GtkBox" id="bottom-hbox">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="spacing">12</property>
-                <child>
-                  <object class="GtkBox" id="hbox2">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="halign">center</property>
-                    <property name="margin_top">12</property>
-                    <property name="spacing">2</property>
-                    <child>
-                      <object class="GtkImage" id="slide_image">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="icon_name">slideshow-symbolic</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="strut">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="label"> </property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="slide-label">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="xalign">0</property>
-                        <property name="label" translatable="yes" comments="This refers to a slideshow background">Changes throughout the day</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">2</property>
-              </packing>
-            </child>
+            <property name="halign">start</property>
+            <property name="margin_top">20</property>
+            <property name="label" translatable="yes">Background</property>
+            <style>
+              <class name="main-label"/>
+            </style>
           </object>
           <packing>
             <property name="expand">False</property>
@@ -126,65 +33,238 @@
           </packing>
         </child>
         <child>
-          <object class="GtkBox" id="vbox1">
+          <object class="GtkScrolledWindow" id="scrolled_view">
             <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="orientation">vertical</property>
-            <property name="halign">start</property>
-            <property name="valign">center</property>
-            <child>
-              <object class="GtkButton" id="background-lock-set-button">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <child>
-                  <object class="GtkBox" id="box3">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="margin">6</property>
-                    <property name="spacing">6</property>
-                    <property name="orientation">vertical</property>
-                    <child>
-                      <object class="GtkDrawingArea" id="background-lock-drawingarea">
-                        <property name="width_request">310</property>
-                        <property name="height_request">170</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="valign">center</property>
-                        <property name="hexpand">True</property>
-                        <property name="vexpand">True</property>
-                      </object>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="label2">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="label" translatable="yes" comments="To translators: This is a noun, not a verb">_Lock Screen</property>
-                        <property name="use_underline">True</property>
-                        <property name="mnemonic_widget">background-lock-set-button</property>
-                      </object>
-                    </child>
-                  </object>
-                </child>
-              </object>
-            </child>
+            <property name="can_focus">True</property>
+            <property name="shadow_type">in</property>
             <child>
-              <object class="GtkBox" id="bottom-hbox1">
+              <object class="GtkViewport">
                 <property name="visible">True</property>
                 <property name="can_focus">False</property>
-                <property name="spacing">12</property>
                 <child>
-                  <object class="GtkBox" id="hbox1">
+                  <object class="GtkBox">
                     <property name="visible">True</property>
                     <property name="can_focus">False</property>
-                    <property name="halign">center</property>
-                    <property name="margin_top">12</property>
-                    <property name="spacing">2</property>
+                    <property name="orientation">vertical</property>
+                    <property name="spacing">40</property>
                     <child>
-                      <object class="GtkImage" id="slide_image1">
+                      <object class="GtkBox">
                         <property name="visible">True</property>
                         <property name="can_focus">False</property>
-                        <property name="icon_name">slideshow-symbolic</property>
+                        <property name="orientation">vertical</property>
+                        <property name="spacing">40</property>
+                        <child>
+                          <object class="GtkBox">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="orientation">vertical</property>
+                            <property name="spacing">10</property>
+                            <child>
+                              <object class="GtkLabel" id="type_label">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="halign">start</property>
+                                <property name="label" translatable="yes">Background Type</property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="position">0</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkComboBoxText" id="type_select_combobox">
+                                <property name="width_request">300</property>
+                                <property name="height_request">34</property>
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="halign">start</property>
+                                <property name="model">type-liststore</property>
+                                <signal name="changed" handler="on_type_changed" object="CcBackgroundPanel" swapped="no"/>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="position">1</property>
+                              </packing>
+                            </child>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkBox">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="spacing">10</property>
+                            <child>
+                              <object class="GtkBox">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="orientation">vertical</property>
+                                <child>
+                                  <object class="GtkBox" id="desktop_thumbnail_box">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="orientation">vertical</property>
+                                    <child>
+                                      <object class="GtkEventBox" id="desktop_eventbox">
+                                        <property name="visible">True</property>
+                                        <property name="can_focus">False</property>
+                                        <property name="margin_left">3</property>
+                                        <property name="margin_right">3</property>
+                                        <property name="margin_top">3</property>
+                                        <property name="margin_bottom">3</property>
+                                        <child>
+                                          <object class="GtkOverlay" id="desktop_overlay">
+                                            <property name="visible">True</property>
+                                            <property name="can_focus">False</property>
+                                            <child>
+                                              <object class="GtkImage" id="desktop_image">
+                                                <property name="width_request">300</property>
+                                                <property name="height_request">188</property>
+                                                <property name="visible">True</property>
+                                                <property name="can_focus">False</property>
+                                              </object>
+                                              <packing>
+                                                <property name="index">-1</property>
+                                              </packing>
+                                            </child>
+                                          </object>
+                                        </child>
+                                      </object>
+                                      <packing>
+                                        <property name="expand">False</property>
+                                        <property name="fill">True</property>
+                                        <property name="position">0</property>
+                                      </packing>
+                                    </child>
+                                    <style>
+                                      <class name="thumbnail-box"/>
+                                    </style>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">0</property>
+                                  </packing>
+                                </child>
+                                <child>
+                                  <object class="GtkLabel" id="desktop_label">
+                                    <property name="width_request">300</property>
+                                    <property name="height_request">36</property>
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">True</property>
+                                    <property name="margin_left">3</property>
+                                    <property name="margin_right">3</property>
+                                    <property name="margin_top">3</property>
+                                    <property name="label" translatable="yes">Home Background</property>
+                                    <style>
+                                      <class name="mode-label"/>
+                                    </style>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">1</property>
+                                  </packing>
+                                </child>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="position">0</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkBox" id="lock_box">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="orientation">vertical</property>
+                                <child>
+                                  <object class="GtkBox" id="lock_thumbnail_box">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="orientation">vertical</property>
+                                    <child>
+                                      <object class="GtkEventBox" id="lock_eventbox">
+                                        <property name="visible">True</property>
+                                        <property name="can_focus">False</property>
+                                        <property name="margin_left">3</property>
+                                        <property name="margin_right">3</property>
+                                        <property name="margin_top">3</property>
+                                        <property name="margin_bottom">3</property>
+                                        <child>
+                                          <object class="GtkOverlay" id="lock_overlay">
+                                            <property name="visible">True</property>
+                                            <property name="can_focus">False</property>
+                                            <child>
+                                              <object class="GtkImage" id="lock_image">
+                                                <property name="width_request">300</property>
+                                                <property name="height_request">188</property>
+                                                <property name="visible">True</property>
+                                                <property name="can_focus">False</property>
+                                              </object>
+                                              <packing>
+                                                <property name="index">-1</property>
+                                              </packing>
+                                            </child>
+                                          </object>
+                                        </child>
+                                      </object>
+                                      <packing>
+                                        <property name="expand">False</property>
+                                        <property name="fill">True</property>
+                                        <property name="position">0</property>
+                                      </packing>
+                                    </child>
+                                    <style>
+                                      <class name="thumbnail-box"/>
+                                    </style>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">0</property>
+                                  </packing>
+                                </child>
+                                <child>
+                                  <object class="GtkLabel" id="lock_label">
+                                    <property name="width_request">300</property>
+                                    <property name="height_request">36</property>
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">True</property>
+                                    <property name="margin_left">3</property>
+                                    <property name="margin_right">3</property>
+                                    <property name="margin_top">3</property>
+                                    <property name="label" translatable="yes">Lock Background</property>
+                                    <style>
+                                      <class name="mode-label"/>
+                                    </style>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">1</property>
+                                  </packing>
+                                </child>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="position">1</property>
+                              </packing>
+                            </child>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">1</property>
+                          </packing>
+                        </child>
                       </object>
                       <packing>
                         <property name="expand">False</property>
@@ -193,58 +273,51 @@
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkLabel" id="strut1">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="label"> </property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="slide-label1">
+                      <object class="CcBackgroundChooser" id="chooser">
                         <property name="visible">True</property>
                         <property name="can_focus">False</property>
-                        <property name="xalign">0</property>
-                        <property name="label" translatable="yes" comments="This refers to a slideshow background">Changes throughout the day</property>
+                        <signal name="select-background" handler="on_select_background" object="CcBackgroundPanel" swapped="no"/>
                       </object>
                       <packing>
                         <property name="expand">False</property>
                         <property name="fill">True</property>
-                        <property name="position">1</property>
+                        <property name="position">2</property>
                       </packing>
                     </child>
                   </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
                 </child>
               </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">2</property>
-              </packing>
             </child>
           </object>
           <packing>
-            <property name="expand">False</property>
+            <property name="expand">True</property>
             <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
       </object>
-      <packing>
-        <property name="expand">True</property>
-        <property name="fill">True</property>
-        <property name="position">0</property>
-      </packing>
     </child>
+  </template>
+  <object class="GtkListStore" id="image_liststore">
+    <columns>
+      <!-- column-name column1 -->
+      <column type="gchararray"/>
+      <!-- column-name gint1 -->
+      <column type="gint"/>
+    </columns>
+    <data>
+      <row>
+        <col id="0" translatable="yes">Image</col>
+        <col id="1">0</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">Color</col>
+        <col id="1">1</col>
+      </row>
+    </data>
+  </object>
+  <object class="GtkSizeGroup" id="sizegroup">
+    <property name="mode">vertical</property>
   </object>
   <object class="GtkListStore" id="sources-liststore">
     <columns>
@@ -290,11 +363,22 @@
       </row>
     </data>
   </object>
-  <object class="GtkSizeGroup" id="sizegroup">
-    <property name="mode">vertical</property>
-    <widgets>
-      <widget name="slide-label"/>
-      <widget name="strut"/>
-    </widgets>
+  <object class="GtkListStore" id="type-liststore">
+    <columns>
+      <!-- column-name column1 -->
+      <column type="gchararray"/>
+      <!-- column-name gint1 -->
+      <column type="gint"/>
+    </columns>
+    <data>
+      <row>
+        <col id="0" translatable="yes">Apply each of home and lock screen</col>
+        <col id="1">0</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">Apply same all screen</col>
+        <col id="1">1</col>
+      </row>
+    </data>
   </object>
 </interface>
diff --git a/panels/background/bg-colors-source.c b/panels/background/bg-colors-source.c
index 95725b1..48f832d 100644
--- a/panels/background/bg-colors-source.c
+++ b/panels/background/bg-colors-source.c
@@ -71,21 +71,11 @@ get_colors_dir (void)
 
 static void
 bg_colors_source_add_color (BgColorsSource               *self,
-                            GnomeDesktopThumbnailFactory *thumb_factory,
-                            GtkListStore                 *store,
-                            const char                   *color,
-                            GtkTreeRowReference         **ret_row_ref)
+                            GListStore                   *store,
+                            const char                   *color)
 {
   CcBackgroundItemFlags flags;
   g_autoptr(CcBackgroundItem) item = NULL;
-  g_autoptr(GdkPixbuf) pixbuf = NULL;
-  cairo_surface_t *surface;
-  int scale_factor;
-  int thumbnail_height, thumbnail_width;
-  GtkTreeIter iter;
-
-  thumbnail_height = bg_source_get_thumbnail_height (BG_SOURCE (self));
-  thumbnail_width = bg_source_get_thumbnail_width (BG_SOURCE (self));
 
   item = cc_background_item_new (NULL);
   flags = CC_BACKGROUND_ITEM_HAS_PCOLOR |
@@ -100,53 +90,30 @@ bg_colors_source_add_color (BgColorsSource               *self,
                 "primary-color", color,
                 "secondary-color", color,
                 "shading", G_DESKTOP_BACKGROUND_SHADING_SOLID,
-                "placement", G_DESKTOP_BACKGROUND_STYLE_ZOOM,
+                "placement", G_DESKTOP_BACKGROUND_STYLE_WALLPAPER,
                 "flags", flags,
                 NULL);
   cc_background_item_load (item, NULL);
 
   /* insert the item into the liststore */
-  scale_factor = bg_source_get_scale_factor (BG_SOURCE (self));
-  pixbuf = cc_background_item_get_thumbnail (item,
-                                             thumb_factory,
-                                             thumbnail_width, thumbnail_height,
-                                             scale_factor);
-  surface = gdk_cairo_surface_create_from_pixbuf (pixbuf, scale_factor, NULL);
-  gtk_list_store_insert_with_values (store, &iter, 0,
-                                     0, surface,
-                                     1, item,
-                                     -1);
-  cairo_surface_destroy (surface);
-
-  if (ret_row_ref)
-    {
-      GtkTreePath *path;
-
-      path = gtk_tree_model_get_path (GTK_TREE_MODEL (store), &iter);
-      *ret_row_ref = gtk_tree_row_reference_new (GTK_TREE_MODEL (store), path);
-      gtk_tree_path_free (path);
-    }
+  g_list_store_append (store, item);
 }
 
 static void
 bg_colors_source_constructed (GObject *object)
 {
   BgColorsSource *self = BG_COLORS_SOURCE (object);
-  g_autoptr(GnomeDesktopThumbnailFactory) thumb_factory = NULL;
   guint i;
-  GtkListStore *store;
+  GListStore *store;
   g_autoptr(GKeyFile) keyfile = NULL;
   g_autofree gchar *path = NULL;
 
   G_OBJECT_CLASS (bg_colors_source_parent_class)->constructed (object);
 
   store = bg_source_get_liststore (BG_SOURCE (self));
-  thumb_factory = gnome_desktop_thumbnail_factory_new (GNOME_DESKTOP_THUMBNAIL_SIZE_LARGE);
 
   for (i = 0; i < G_N_ELEMENTS (items); i++)
-    {
-      bg_colors_source_add_color (self, thumb_factory, store, items[i].pcolor, NULL);
-    }
+    bg_colors_source_add_color (self, store, items[i].pcolor);
 
   keyfile = g_key_file_new ();
   path = get_colors_path ();
@@ -156,9 +123,7 @@ bg_colors_source_constructed (GObject *object)
 
       colors = g_key_file_get_string_list (keyfile, "Colors", "custom-colors", NULL, NULL);
       for (i = 0; colors != NULL && colors[i] != NULL; i++)
-        {
-          bg_colors_source_add_color (self, thumb_factory, store, colors[i], NULL);
-        }
+        bg_colors_source_add_color (self, store, colors[i]);
     }
 }
 
@@ -167,8 +132,7 @@ bg_colors_source_add (BgColorsSource       *self,
                       GdkRGBA              *rgba,
                       GtkTreeRowReference **ret_row_ref)
 {
-  g_autoptr(GnomeDesktopThumbnailFactory) thumb_factory = NULL;
-  GtkListStore *store;
+  GListStore *store;
   g_autofree gchar *c = NULL;
   g_auto(GStrv) colors = NULL;
   gsize len;
@@ -182,10 +146,9 @@ bg_colors_source_add (BgColorsSource       *self,
                        (int)(255*rgba->green),
                        (int)(255*rgba->blue));
 
-  thumb_factory = gnome_desktop_thumbnail_factory_new (GNOME_DESKTOP_THUMBNAIL_SIZE_LARGE);
   store = bg_source_get_liststore (BG_SOURCE (self));
 
-  bg_colors_source_add_color (self, thumb_factory, store, c, ret_row_ref);
+  bg_colors_source_add_color (self, store, c);
 
   /* Save to the keyfile */
   dir = get_colors_dir ();
@@ -238,6 +201,8 @@ bg_colors_source_add (BgColorsSource       *self,
 static void
 bg_colors_source_init (BgColorsSource *self)
 {
+  bg_source_set_thumbnail_width (BG_SOURCE (self), 48);
+  bg_source_set_thumbnail_height (BG_SOURCE (self), 48);
 }
 
 static void
@@ -249,8 +214,8 @@ bg_colors_source_class_init (BgColorsSourceClass *klass)
 }
 
 BgColorsSource *
-bg_colors_source_new (GtkWindow *window)
+bg_colors_source_new (GtkWidget *widget)
 {
-  return g_object_new (BG_TYPE_COLORS_SOURCE, "window", window, NULL);
+  return g_object_new (BG_TYPE_COLORS_SOURCE, "widget", widget, NULL);
 }
 
diff --git a/panels/background/bg-colors-source.h b/panels/background/bg-colors-source.h
index de1d93c..8e2575d 100644
--- a/panels/background/bg-colors-source.h
+++ b/panels/background/bg-colors-source.h
@@ -19,8 +19,7 @@
  *
  */
 
-#ifndef _BG_COLORS_SOURCE_H
-#define _BG_COLORS_SOURCE_H
+#pragma once
 
 #include <gtk/gtk.h>
 #include "bg-source.h"
@@ -30,12 +29,10 @@ G_BEGIN_DECLS
 #define BG_TYPE_COLORS_SOURCE (bg_colors_source_get_type ())
 G_DECLARE_FINAL_TYPE (BgColorsSource, bg_colors_source, BG, COLORS_SOURCE, BgSource)
 
-BgColorsSource *bg_colors_source_new (GtkWindow *window);
+BgColorsSource *bg_colors_source_new (GtkWidget *widget);
 
 gboolean bg_colors_source_add        (BgColorsSource       *self,
                                       GdkRGBA              *rgba,
                                       GtkTreeRowReference **ret_row_ref);
 
 G_END_DECLS
-
-#endif /* _BG_COLORS_SOURCE_H */
diff --git a/panels/background/bg-pictures-source.c b/panels/background/bg-pictures-source.c
index a37682d..3a3027b 100644
--- a/panels/background/bg-pictures-source.c
+++ b/panels/background/bg-pictures-source.c
@@ -45,8 +45,6 @@ struct _BgPicturesSource
 
   CcBackgroundGriloMiner *grl_miner;
 
-  GnomeDesktopThumbnailFactory *thumb_factory;
-
   GFileMonitor *picture_dir_monitor;
   GFileMonitor *cache_dir_monitor;
 
@@ -86,7 +84,6 @@ bg_pictures_source_dispose (GObject *object)
     }
 
   g_clear_object (&source->grl_miner);
-  g_clear_object (&source->thumb_factory);
 
   G_OBJECT_CLASS (bg_pictures_source_parent_class)->dispose (object);
 }
@@ -96,8 +93,6 @@ bg_pictures_source_finalize (GObject *object)
 {
   BgPicturesSource *bg_source = BG_PICTURES_SOURCE (object);
 
-  g_clear_object (&bg_source->thumb_factory);
-
   g_clear_pointer (&bg_source->known_items, g_hash_table_destroy);
 
   g_clear_object (&bg_source->picture_dir_monitor);
@@ -116,23 +111,26 @@ bg_pictures_source_class_init (BgPicturesSourceClass *klass)
 }
 
 static void
-remove_placeholder (BgPicturesSource *bg_source, CcBackgroundItem *item)
+remove_placeholder (BgPicturesSource *bg_source,
+                    CcBackgroundItem *item)
 {
-  GtkListStore *store;
-  GtkTreeIter iter;
-  GtkTreePath *path;
-  GtkTreeRowReference *row_ref;
+  GListStore *store;
+  guint i;
 
   store = bg_source_get_liststore (BG_SOURCE (bg_source));
-  row_ref = g_object_get_data (G_OBJECT (item), "row-ref");
-  if (row_ref == NULL)
-    return;
 
-  path = gtk_tree_row_reference_get_path (row_ref);
-  if (!gtk_tree_model_get_iter (GTK_TREE_MODEL (store), &iter, path))
-    return;
+  for (i = 0; i < g_list_model_get_n_items (G_LIST_MODEL (store)); i++)
+    {
+      g_autoptr(CcBackgroundItem) item_n = NULL;
+
+      item_n = g_list_model_get_item (G_LIST_MODEL (store), i);
 
-  gtk_list_store_remove (store, &iter);
+      if (item_n == item)
+        {
+          g_list_store_remove (store, i);
+          break;
+        }
+    }
 }
 
 static gboolean
@@ -163,6 +161,27 @@ swap_rotated_pixbuf (GdkPixbuf *pixbuf)
   return tmp_pixbuf;
 }
 
+static int
+sort_func (gconstpointer a,
+           gconstpointer b,
+           gpointer      user_data)
+{
+  CcBackgroundItem *item_a;
+  CcBackgroundItem *item_b;
+  guint64 modified_a;
+  guint64 modified_b;
+  int retval;
+
+  item_a = (CcBackgroundItem *) a;
+  item_b = (CcBackgroundItem *) b;
+  modified_a = cc_background_item_get_modified (item_a);
+  modified_b = cc_background_item_get_modified (item_b);
+
+  retval = modified_b - modified_a;
+
+  return retval;
+}
+
 static void
 picture_scaled (GObject *source_object,
                 GAsyncResult *res,
@@ -174,10 +193,7 @@ picture_scaled (GObject *source_object,
   g_autoptr(GdkPixbuf) pixbuf = NULL;
   const char *software;
   const char *uri;
-  GtkTreeIter iter;
-  GtkTreePath *path;
-  GtkTreeRowReference *row_ref;
-  GtkListStore *store;
+  GListStore *store;
   cairo_surface_t *surface = NULL;
   int scale_factor;
   gboolean rotation_applied;
@@ -238,32 +254,14 @@ picture_scaled (GObject *source_object,
   surface = gdk_cairo_surface_create_from_pixbuf (pixbuf, scale_factor, NULL);
   cc_background_item_load (item, NULL);
 
-  row_ref = g_object_get_data (G_OBJECT (item), "row-ref");
-  if (row_ref == NULL)
-    {
-      /* insert the item into the liststore if it did not exist */
-      gtk_list_store_insert_with_values (store, NULL, -1,
-                                         0, surface,
-                                         1, item,
-                                         -1);
-    }
-  else
-    {
-      path = gtk_tree_row_reference_get_path (row_ref);
-      if (gtk_tree_model_get_iter (GTK_TREE_MODEL (store), &iter, path))
-        {
-          /* otherwise update the thumbnail */
-          gtk_list_store_set (store, &iter,
-                              0, surface,
-                              -1);
-        }
-    }
+  /* insert the item into the liststore */
+  g_list_store_insert_sorted (store, item, sort_func, bg_source);
 
   g_hash_table_insert (bg_source->known_items,
                        bg_pictures_source_get_unique_filename (uri),
                        GINT_TO_POINTER (TRUE));
 
-  g_clear_pointer (&surface, (GDestroyNotify) cairo_surface_destroy);
+  g_clear_pointer (&surface, cairo_surface_destroy);
 }
 
 static void
@@ -367,67 +365,6 @@ in_content_types (const char *content_type)
 	return FALSE;
 }
 
-static gboolean
-in_screenshot_types (const char *content_type)
-{
-	guint i;
-	for (i = 0; screenshot_types[i]; i++)
-		if (g_str_equal (screenshot_types[i], content_type))
-			return TRUE;
-	return FALSE;
-}
-
-static cairo_surface_t *
-get_content_loading_icon (BgSource *source)
-{
-  GtkIconTheme *theme;
-  g_autoptr(GtkIconInfo) icon_info = NULL;
-  g_autoptr(GdkPixbuf) pixbuf = NULL;
-  g_autoptr(GdkPixbuf) ret = NULL;
-  g_autoptr(GError) error = NULL;
-  int scale_factor;
-  cairo_surface_t *surface;
-  int thumbnail_height;
-  int thumbnail_width;
-
-  theme = gtk_icon_theme_get_default ();
-  icon_info = gtk_icon_theme_lookup_icon (theme,
-                                          "content-loading-symbolic",
-                                          16,
-                                          GTK_ICON_LOOKUP_FORCE_SIZE | GTK_ICON_LOOKUP_GENERIC_FALLBACK);
-  if (icon_info == NULL)
-    {
-      g_warning ("Failed to find placeholder icon");
-      return NULL;
-    }
-
-  pixbuf = gtk_icon_info_load_icon (icon_info, &error);
-  if (pixbuf == NULL)
-    {
-      g_warning ("Failed to load placeholder icon: %s", error->message);
-      return NULL;
-    }
-
-  thumbnail_height = bg_source_get_thumbnail_height (source);
-  thumbnail_width = bg_source_get_thumbnail_width (source);
-  ret = gdk_pixbuf_new (GDK_COLORSPACE_RGB,
-                        TRUE,
-                        8, thumbnail_width, thumbnail_height);
-  gdk_pixbuf_fill (ret, 0x00000000);
-
-  /* Put the icon in the middle */
-  gdk_pixbuf_copy_area (pixbuf, 0, 0,
-			gdk_pixbuf_get_width (pixbuf), gdk_pixbuf_get_height (pixbuf),
-			ret,
-			(thumbnail_width - gdk_pixbuf_get_width (pixbuf)) / 2,
-			(thumbnail_height - gdk_pixbuf_get_height (pixbuf)) / 2);
-
-  scale_factor = bg_source_get_scale_factor (source);
-  surface = gdk_cairo_surface_create_from_pixbuf (ret, scale_factor, NULL);
-
-  return surface;
-}
-
 static GFile *
 bg_pictures_source_get_cache_file (void)
 {
@@ -444,20 +381,15 @@ static gboolean
 add_single_file (BgPicturesSource     *bg_source,
                  GFile                *file,
                  const gchar          *content_type,
-                 guint64               mtime,
-                 GtkTreeRowReference **ret_row_ref)
+                 guint64               mtime)
 {
   g_autoptr(CcBackgroundItem) item = NULL;
   CcBackgroundItemFlags flags = 0;
-  GtkListStore *store;
-  GtkTreeIter iter;
-  GtkTreePath *path = NULL;
-  GtkTreeRowReference *row_ref = NULL;
-  cairo_surface_t *surface = NULL;
   g_autofree gchar *source_uri = NULL;
   g_autofree gchar *uri = NULL;
   gboolean needs_download;
   gboolean retval = FALSE;
+  const gchar *pictures_path;
   g_autoptr(GFile) pictures_dir = NULL;
   g_autoptr(GFile) cache_dir = NULL;
   GrlMedia *media;
@@ -471,7 +403,10 @@ add_single_file (BgPicturesSource     *bg_source,
   /* create a new CcBackgroundItem */
   uri = g_file_get_uri (file);
 
-  pictures_dir = g_file_new_for_path (g_get_user_special_dir (G_USER_DIRECTORY_PICTURES));
+  pictures_path = g_get_user_special_dir (G_USER_DIRECTORY_PICTURES);
+  if (pictures_path == NULL)
+    pictures_path = g_get_home_dir ();
+  pictures_dir = g_file_new_for_path (pictures_path);
   cache_dir = bg_pictures_source_get_cache_file ();
   needs_download = !g_file_has_parent (file, pictures_dir) &&
           !g_file_has_parent (file, cache_dir);
@@ -497,25 +432,6 @@ add_single_file (BgPicturesSource     *bg_source,
                 "source-url", source_uri,
 		NULL);
 
-  if (!ret_row_ref && in_screenshot_types (content_type))
-    goto read_file;
-
-  surface = get_content_loading_icon (BG_SOURCE (bg_source));
-  store = bg_source_get_liststore (BG_SOURCE (bg_source));
-
-  /* insert the item into the liststore */
-  gtk_list_store_insert_with_values (store, &iter, -1,
-                                     0, surface,
-                                     1, item,
-                                     -1);
-
-  path = gtk_tree_model_get_path (GTK_TREE_MODEL (store), &iter);
-  row_ref = gtk_tree_row_reference_new (GTK_TREE_MODEL (store), path);
-  g_object_set_data_full (G_OBJECT (item), "row-ref", row_ref, (GDestroyNotify) gtk_tree_row_reference_free);
-
-
- read_file:
-
   media = g_object_get_data (G_OBJECT (file), "grl-media");
   if (media == NULL)
     {
@@ -564,30 +480,20 @@ add_single_file (BgPicturesSource     *bg_source,
   retval = TRUE;
 
  out:
-  if (ret_row_ref)
-    {
-      if (row_ref && retval != FALSE)
-        *ret_row_ref = gtk_tree_row_reference_copy (row_ref);
-      else
-        *ret_row_ref = NULL;
-    }
-  gtk_tree_path_free (path);
-  g_clear_pointer (&surface, (GDestroyNotify) cairo_surface_destroy);
   return retval;
 }
 
 static gboolean
-add_single_file_from_info (BgPicturesSource     *bg_source,
-                           GFile                *file,
-                           GFileInfo            *info,
-                           GtkTreeRowReference **ret_row_ref)
+add_single_file_from_info (BgPicturesSource *bg_source,
+                           GFile            *file,
+                           GFileInfo        *info)
 {
   const gchar *content_type;
   guint64 mtime;
 
   content_type = g_file_info_get_content_type (info);
   mtime = g_file_info_get_attribute_uint64 (info, G_FILE_ATTRIBUTE_TIME_MODIFIED);
-  return add_single_file (bg_source, file, content_type, mtime, ret_row_ref);
+  return add_single_file (bg_source, file, content_type, mtime);
 }
 
 static gboolean
@@ -612,7 +518,7 @@ add_single_file_from_media (BgPicturesSource *bg_source,
   else
     mtime_unix = g_get_real_time () / G_USEC_PER_SEC;
 
-  return add_single_file (bg_source, file, content_type, (guint64) mtime_unix, NULL);
+  return add_single_file (bg_source, file, content_type, (guint64) mtime_unix);
 }
 
 gboolean
@@ -629,7 +535,7 @@ bg_pictures_source_add (BgPicturesSource     *bg_source,
   if (info == NULL)
     return FALSE;
 
-  retval = add_single_file_from_info (bg_source, file, info, ret_row_ref);
+  retval = add_single_file_from_info (bg_source, file, info);
 
   return retval;
 }
@@ -638,21 +544,19 @@ gboolean
 bg_pictures_source_remove (BgPicturesSource *bg_source,
                            const char       *uri)
 {
-  GtkTreeModel *model;
-  GtkTreeIter iter;
-  gboolean cont;
+  GListStore *store;
   gboolean retval;
+  guint i;
 
   retval = FALSE;
-  model = GTK_TREE_MODEL (bg_source_get_liststore (BG_SOURCE (bg_source)));
+  store = bg_source_get_liststore (BG_SOURCE (bg_source));
 
-  cont = gtk_tree_model_get_iter_first (model, &iter);
-  while (cont)
+  for (i = 0; i < g_list_model_get_n_items (G_LIST_MODEL (store)); i++)
     {
       g_autoptr(CcBackgroundItem) tmp_item = NULL;
       const char *tmp_uri;
 
-      gtk_tree_model_get (model, &iter, 1, &tmp_item, -1);
+      tmp_item = g_list_model_get_item (G_LIST_MODEL (store), i);
       tmp_uri = cc_background_item_get_uri (tmp_item);
       if (g_str_equal (tmp_uri, uri))
         {
@@ -661,11 +565,10 @@ bg_pictures_source_remove (BgPicturesSource *bg_source,
           g_hash_table_insert (bg_source->known_items,
 			       uuid, NULL);
 
-          gtk_list_store_remove (GTK_LIST_STORE (model), &iter);
+          g_list_store_remove (store, i);
           retval = TRUE;
           break;
         }
-      cont = gtk_tree_model_iter_next (model, &iter);
     }
   return retval;
 }
@@ -722,7 +625,7 @@ file_info_async_ready (GObject      *source,
 
       file = g_file_get_child (parent, g_file_info_get_name (info));
 
-      add_single_file_from_info (bg_source, file, info, NULL);
+      add_single_file_from_info (bg_source, file, info);
     }
 
   g_list_foreach (files, (GFunc) g_object_unref, NULL);
@@ -806,33 +709,6 @@ bg_pictures_source_is_known (BgPicturesSource *bg_source,
   return GPOINTER_TO_INT (g_hash_table_lookup (bg_source->known_items, uuid));
 }
 
-static int
-sort_func (GtkTreeModel *model,
-           GtkTreeIter *a,
-           GtkTreeIter *b,
-           BgPicturesSource *bg_source)
-{
-  g_autoptr(CcBackgroundItem) item_a = NULL;
-  g_autoptr(CcBackgroundItem) item_b = NULL;
-  guint64 modified_a;
-  guint64 modified_b;
-  int retval;
-
-  gtk_tree_model_get (model, a,
-                      1, &item_a,
-                      -1);
-  gtk_tree_model_get (model, b,
-                      1, &item_b,
-                      -1);
-
-  modified_a = cc_background_item_get_modified (item_a);
-  modified_b = cc_background_item_get_modified (item_b);
-
-  retval = modified_b - modified_a;
-
-  return retval;
-}
-
 static void
 file_info_ready (GObject      *object,
                  GAsyncResult *res,
@@ -852,7 +728,7 @@ file_info_ready (GObject      *object,
       return;
     }
 
-  add_single_file_from_info (BG_PICTURES_SOURCE (user_data), file, info, NULL);
+  add_single_file_from_info (BG_PICTURES_SOURCE (user_data), file, info);
 }
 
 static void
@@ -875,13 +751,11 @@ file_added (GFile            *file,
 }
 
 static void
-files_changed_cb (GFileMonitor      *monitor,
+files_changed_cb (BgPicturesSource  *self,
                   GFile             *file,
                   GFile             *other_file,
-                  GFileMonitorEvent  event_type,
-                  gpointer           user_data)
+                  GFileMonitorEvent  event_type)
 {
-  BgPicturesSource *self = BG_PICTURES_SOURCE (user_data);
   g_autofree gchar *uri = NULL;
 
   switch (event_type)
@@ -922,10 +796,10 @@ monitor_path (BgPicturesSource *self,
                                       NULL);
 
   if (monitor)
-    g_signal_connect (monitor,
-                      "changed",
-                      G_CALLBACK (files_changed_cb),
-                      self);
+    g_signal_connect_object (monitor,
+                             "changed",
+                             G_CALLBACK (files_changed_cb),
+                             self, G_CONNECT_SWAPPED);
 
   return monitor;
 }
@@ -947,7 +821,6 @@ bg_pictures_source_init (BgPicturesSource *self)
 {
   const gchar *pictures_path;
   g_autofree gchar *cache_path = NULL;
-  GtkListStore *store;
 
   self->cancellable = g_cancellable_new ();
   self->known_items = g_hash_table_new_full (g_str_hash,
@@ -965,29 +838,14 @@ bg_pictures_source_init (BgPicturesSource *self)
   self->cache_dir_monitor = monitor_path (self, cache_path);
 
   self->grl_miner = cc_background_grilo_miner_new ();
-  g_signal_connect_swapped (self->grl_miner, "media-found", G_CALLBACK (media_found_cb), self);
+  g_signal_connect_object (self->grl_miner, "media-found", G_CALLBACK (media_found_cb), self, G_CONNECT_SWAPPED);
   cc_background_grilo_miner_start (self->grl_miner);
-
-  self->thumb_factory =
-    gnome_desktop_thumbnail_factory_new (GNOME_DESKTOP_THUMBNAIL_SIZE_LARGE);
-
-  store = bg_source_get_liststore (BG_SOURCE (self));
-
-  gtk_tree_sortable_set_sort_func (GTK_TREE_SORTABLE (store),
-                                   1,
-                                   (GtkTreeIterCompareFunc)sort_func,
-                                   self,
-                                   NULL);
-
-  gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (store),
-                                        1,
-                                        GTK_SORT_ASCENDING);
 }
 
 BgPicturesSource *
-bg_pictures_source_new (GtkWindow *window)
+bg_pictures_source_new (GtkWidget *widget)
 {
-  return g_object_new (BG_TYPE_PICTURES_SOURCE, "window", window, NULL);
+  return g_object_new (BG_TYPE_PICTURES_SOURCE, "widget", widget, NULL);
 }
 
 const char * const *
diff --git a/panels/background/bg-pictures-source.h b/panels/background/bg-pictures-source.h
index 476ecb7..f62cbe5 100644
--- a/panels/background/bg-pictures-source.h
+++ b/panels/background/bg-pictures-source.h
@@ -19,9 +19,7 @@
  *
  */
 
-
-#ifndef _BG_PICTURES_SOURCE_H
-#define _BG_PICTURES_SOURCE_H
+#pragma once
 
 #include <gtk/gtk.h>
 #include "bg-source.h"
@@ -32,7 +30,7 @@ G_BEGIN_DECLS
 #define BG_TYPE_PICTURES_SOURCE (bg_pictures_source_get_type ())
 G_DECLARE_FINAL_TYPE (BgPicturesSource, bg_pictures_source, BG, PICTURES_SOURCE, BgSource)
 
-BgPicturesSource *bg_pictures_source_new            (GtkWindow *window);
+BgPicturesSource *bg_pictures_source_new            (GtkWidget *widget);
 char             *bg_pictures_source_get_cache_path (void);
 char             *bg_pictures_source_get_unique_path(const char *uri);
 gboolean          bg_pictures_source_add            (BgPicturesSource     *bg_source,
@@ -46,5 +44,3 @@ gboolean          bg_pictures_source_is_known       (BgPicturesSource *bg_source
 const char * const * bg_pictures_get_support_content_types (void);
 
 G_END_DECLS
-
-#endif /* _BG_PICTURES_SOURCE_H */
diff --git a/panels/background/bg-recent-source.c b/panels/background/bg-recent-source.c
new file mode 100644
index 0000000..1177327
--- /dev/null
+++ b/panels/background/bg-recent-source.c
@@ -0,0 +1,470 @@
+/* bg-recent-source.c
+ *
+ * Copyright 2019 Georges Basile Stavracas Neto <georges.stavracas@gmail.com>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ */
+
+#undef G_LOG_DOMAIN
+#define G_LOG_DOMAIN "bg-recent-source"
+
+#include "bg-recent-source.h"
+#include "cc-background-item.h"
+
+#define ATTRIBUTES G_FILE_ATTRIBUTE_STANDARD_NAME "," \
+                   G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE "," \
+                   G_FILE_ATTRIBUTE_TIME_MODIFIED
+
+struct _BgRecentSource
+{
+  BgSource      parent;
+
+  GFile        *backgrounds_folder;
+  GFileMonitor *monitor;
+
+  GCancellable *cancellable;
+  GHashTable   *items;
+};
+
+G_DEFINE_TYPE (BgRecentSource, bg_recent_source, BG_TYPE_SOURCE)
+
+
+static const gchar * const content_types[] = {
+	"image/png",
+	"image/jp2",
+	"image/jpeg",
+	"image/bmp",
+	"image/svg+xml",
+	"image/x-portable-anymap",
+	NULL
+};
+
+static int
+sort_func (gconstpointer a,
+           gconstpointer b,
+           gpointer      user_data)
+{
+  CcBackgroundItem *item_a;
+  CcBackgroundItem *item_b;
+  guint64 modified_a;
+  guint64 modified_b;
+  int retval;
+
+  item_a = (CcBackgroundItem *) a;
+  item_b = (CcBackgroundItem *) b;
+  modified_a = cc_background_item_get_modified (item_a);
+  modified_b = cc_background_item_get_modified (item_b);
+
+  retval = modified_b - modified_a;
+
+  return retval;
+}
+
+static void
+add_file_from_info (BgRecentSource *self,
+                    GFile          *file,
+                    GFileInfo      *info)
+{
+  g_autoptr(CcBackgroundItem) item = NULL;
+  CcBackgroundItemFlags flags = 0;
+  g_autofree gchar *source_uri = NULL;
+  g_autofree gchar *uri = NULL;
+  GListStore *store;
+  const gchar *content_type;
+  guint64 mtime;
+
+  content_type = g_file_info_get_content_type (info);
+  mtime = g_file_info_get_attribute_uint64 (info, G_FILE_ATTRIBUTE_TIME_MODIFIED);
+
+  if (!content_type || !g_strv_contains (content_types, content_type))
+    return;
+
+  uri = g_file_get_uri (file);
+  item = cc_background_item_new (uri);
+  flags |= CC_BACKGROUND_ITEM_HAS_SHADING | CC_BACKGROUND_ITEM_HAS_PLACEMENT;
+  g_object_set (G_OBJECT (item),
+                "flags", flags,
+                "shading", G_DESKTOP_BACKGROUND_SHADING_SOLID,
+                "placement", G_DESKTOP_BACKGROUND_STYLE_ZOOM,
+                "modified", mtime,
+                "needs-download", FALSE,
+                "source-url", source_uri,
+                NULL);
+
+  store = bg_source_get_liststore (BG_SOURCE (self));
+  g_list_store_insert_sorted (store, item, sort_func, self);
+
+  g_hash_table_insert (self->items, g_strdup (uri), g_object_ref (item));
+}
+
+static void
+remove_item (BgRecentSource   *self,
+             CcBackgroundItem *item)
+{
+  GListStore *store;
+  const gchar *uri;
+  guint i;
+
+  g_return_if_fail (BG_IS_RECENT_SOURCE (self));
+  g_return_if_fail (CC_IS_BACKGROUND_ITEM (item));
+
+  uri = cc_background_item_get_uri (item);
+  store = bg_source_get_liststore (BG_SOURCE (self));
+
+  g_debug ("Removing wallpaper %s", uri);
+
+  for (i = 0; i < g_list_model_get_n_items (G_LIST_MODEL (store)); i++)
+    {
+      g_autoptr(CcBackgroundItem) tmp = NULL;
+
+      tmp = g_list_model_get_item (G_LIST_MODEL (store), i);
+
+      if (tmp == item)
+        {
+          g_list_store_remove (store, i);
+          break;
+        }
+    }
+
+  g_hash_table_remove (self->items, cc_background_item_get_uri (item));
+}
+
+static void
+query_info_finished_cb (GObject      *source,
+                        GAsyncResult *result,
+                        gpointer      user_data)
+{
+  BgRecentSource *self;
+  g_autoptr(GFileInfo) file_info = NULL;
+  g_autoptr(GError) error = NULL;
+  GFile *file = NULL;
+
+  file = G_FILE (source);
+  file_info = g_file_query_info_finish (file, result, &error);
+  if (error)
+    {
+      if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        g_warning ("Could not get pictures file information: %s", error->message);
+      return;
+    }
+
+  self = BG_RECENT_SOURCE (user_data);
+
+  g_debug ("Adding wallpaper %s (%d)",
+           g_file_info_get_name (file_info),
+           G_IS_FILE (self->backgrounds_folder));
+
+  add_file_from_info (self, file, file_info);
+}
+
+static void
+on_file_changed_cb (BgRecentSource    *self,
+                    GFile             *file,
+                    GFile             *other_file,
+                    GFileMonitorEvent  event_type)
+{
+  g_autofree gchar *uri = NULL;
+
+  switch (event_type)
+    {
+    case G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT:
+      g_file_query_info_async (file,
+                               ATTRIBUTES,
+                               G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,
+                               G_PRIORITY_DEFAULT,
+                               self->cancellable,
+                               query_info_finished_cb,
+                               self);
+      break;
+
+    case G_FILE_MONITOR_EVENT_DELETED:
+      uri = g_file_get_uri (file);
+      remove_item (self, g_hash_table_lookup (self->items, uri));
+      break;
+
+    default:
+      return;
+    }
+}
+
+static int
+file_sort_func (gconstpointer a,
+                gconstpointer b)
+{
+  GFileInfo *file_a = G_FILE_INFO (a);
+  GFileInfo *file_b = G_FILE_INFO (b);
+  guint64 modified_a, modified_b;
+
+  modified_a = g_file_info_get_attribute_uint64 (file_a, G_FILE_ATTRIBUTE_TIME_MODIFIED);
+  modified_b = g_file_info_get_attribute_uint64 (file_b, G_FILE_ATTRIBUTE_TIME_MODIFIED);
+
+  return modified_b - modified_a;
+}
+
+static void
+file_info_async_ready_cb (GObject      *source,
+                          GAsyncResult *result,
+                          gpointer      user_data)
+{
+  BgRecentSource *self;
+  g_autolist(GFileInfo) file_infos = NULL;
+  g_autoptr(GError) error = NULL;
+  GFile *parent = NULL;
+  GList *l;
+
+  file_infos = g_file_enumerator_next_files_finish (G_FILE_ENUMERATOR (source),
+                                                    result,
+                                                    &error);
+  if (error)
+    {
+      if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        g_warning ("Could not get pictures file information: %s", error->message);
+      return;
+    }
+
+  self = BG_RECENT_SOURCE (user_data);
+  parent = g_file_enumerator_get_container (G_FILE_ENUMERATOR (source));
+
+  file_infos = g_list_sort (file_infos, file_sort_func);
+
+  for (l = file_infos; l; l = l->next)
+    {
+      g_autoptr(GFile) file = NULL;
+      GFileInfo *info;
+
+      info = l->data;
+      file = g_file_get_child (parent, g_file_info_get_name (info));
+
+      g_debug ("Found recent wallpaper %s", g_file_info_get_name (info));
+
+      add_file_from_info (self, file, info);
+    }
+
+  g_file_enumerator_close (G_FILE_ENUMERATOR (source), self->cancellable, &error);
+
+  if (error)
+    g_warning ("Error closing file enumerator: %s", error->message);
+}
+
+static void
+enumerate_children_finished_cb (GObject      *source,
+                                GAsyncResult *result,
+                                gpointer      user_data)
+{
+  BgRecentSource *self;
+  g_autoptr(GFileEnumerator) enumerator = NULL;
+  g_autoptr(GError) error = NULL;
+
+  enumerator = g_file_enumerate_children_finish (G_FILE (source), result, &error);
+
+  if (error)
+    {
+      if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        g_warning ("Could not fill pictures source: %s", error->message);
+      return;
+    }
+
+  self = BG_RECENT_SOURCE (user_data);
+  g_file_enumerator_next_files_async (enumerator,
+                                      G_MAXINT,
+                                      G_PRIORITY_DEFAULT,
+                                      self->cancellable,
+                                      file_info_async_ready_cb,
+                                      self);
+}
+
+static void
+load_backgrounds (BgRecentSource *self)
+{
+  g_autofree gchar *backgrounds_path = NULL;
+  g_autoptr(GError) error = NULL;
+
+  if (!g_file_make_directory_with_parents (self->backgrounds_folder, self->cancellable, &error) &&
+      !g_error_matches (error, G_IO_ERROR, G_IO_ERROR_EXISTS))
+    {
+      g_critical ("Failed to create local background directory: %s", error->message);
+      return;
+    }
+
+  backgrounds_path = g_file_get_path (self->backgrounds_folder);
+  g_debug ("Enumerating wallpapers under %s", backgrounds_path);
+
+  g_file_enumerate_children_async (self->backgrounds_folder,
+                                   ATTRIBUTES,
+                                   G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,
+                                   G_PRIORITY_DEFAULT,
+                                   self->cancellable,
+                                   enumerate_children_finished_cb,
+                                   self);
+
+  self->monitor = g_file_monitor_directory (self->backgrounds_folder,
+                                            G_FILE_MONITOR_WATCH_MOVES,
+                                            self->cancellable,
+                                            &error);
+
+  if (!self->monitor)
+    {
+      g_critical ("Failed to monitor background directory: %s", error->message);
+      return;
+    }
+
+  g_signal_connect_object (self->monitor, "changed", G_CALLBACK (on_file_changed_cb), self, G_CONNECT_SWAPPED);
+}
+
+/* Callbacks */
+
+static void
+on_file_copied_cb (GObject      *source,
+                   GAsyncResult *result,
+                   gpointer      user_data)
+{
+  g_autoptr(BgRecentSource) self = BG_RECENT_SOURCE (user_data);
+  g_autofree gchar *original_file = NULL;
+  g_autoptr(GError) error = NULL;
+
+  g_file_copy_finish (G_FILE (source), result, &error);
+
+  if (error)
+    {
+      if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        g_critical ("Failed to copy file: %s", error->message);
+      return;
+    }
+
+   original_file = g_file_get_path (G_FILE (source));
+   g_debug ("Successfully copied wallpaper: %s", original_file);
+}
+
+static void
+on_file_deleted_cb (GObject      *source,
+                    GAsyncResult *result,
+                    gpointer      user_data)
+{
+  g_autoptr(BgRecentSource) self = BG_RECENT_SOURCE (user_data);
+  g_autofree gchar *original_file = NULL;
+  g_autoptr(GError) error = NULL;
+
+  g_file_delete_finish (G_FILE (source), result, &error);
+
+  if (error)
+    {
+      if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        g_critical ("Failed to delete wallpaper: %s", error->message);
+      return;
+    }
+
+  original_file = g_file_get_path (G_FILE (source));
+  g_debug ("Successfully deleted wallpaper: %s", original_file);
+}
+
+/* GObject overrides */
+
+static void
+bg_recent_source_finalize (GObject *object)
+{
+  BgRecentSource *self = (BgRecentSource *)object;
+
+  g_cancellable_cancel (self->cancellable);
+  g_clear_object (&self->cancellable);
+  g_clear_object (&self->monitor);
+
+  G_OBJECT_CLASS (bg_recent_source_parent_class)->finalize (object);
+}
+
+static void
+bg_recent_source_class_init (BgRecentSourceClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  object_class->finalize = bg_recent_source_finalize;
+}
+
+static void
+bg_recent_source_init (BgRecentSource *self)
+{
+  g_autofree gchar *backgrounds_path = NULL;
+
+  backgrounds_path = g_build_filename (g_get_user_data_dir (), "backgrounds", NULL);
+
+  self->items = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, g_object_unref);
+  self->cancellable = g_cancellable_new ();
+  self->backgrounds_folder = g_file_new_for_path (backgrounds_path);
+
+  load_backgrounds (self);
+}
+
+BgRecentSource*
+bg_recent_source_new (GtkWidget *widget)
+{
+  return g_object_new (BG_TYPE_RECENT_SOURCE,
+                       "widget", widget,
+                       NULL);
+}
+
+void
+bg_recent_source_add_file (BgRecentSource *self,
+                           const gchar    *path)
+{
+  g_autoptr(GDateTime) now = NULL;
+  g_autofree gchar *destination_name = NULL;
+  g_autofree gchar *formatted_now = NULL;
+  g_autofree gchar *basename = NULL;
+  g_autoptr(GFile) destination = NULL;
+  g_autoptr(GFile) file = NULL;
+
+  g_return_if_fail (BG_IS_RECENT_SOURCE (self));
+  g_return_if_fail (path && *path);
+
+  g_debug ("Importing wallpaper %s", path);
+
+  now = g_date_time_new_now_local ();
+  formatted_now = g_date_time_format (now, "%Y-%m-%d-%H-%M-%S");
+
+  file = g_file_new_for_path (path);
+
+  basename = g_file_get_basename (file);
+  destination_name = g_strdup_printf ("%s-%s", formatted_now, basename);
+  destination = g_file_get_child (self->backgrounds_folder, destination_name);
+
+  g_file_copy_async (file,
+                     destination,
+                     G_FILE_COPY_NONE,
+                     G_PRIORITY_DEFAULT,
+                     self->cancellable,
+                     NULL, NULL,
+                     on_file_copied_cb,
+                     g_object_ref (self));
+}
+
+void
+bg_recent_source_remove_item (BgRecentSource   *self,
+                              CcBackgroundItem *item)
+{
+  g_autoptr(GFile) file = NULL;
+  const gchar *uri;
+
+  g_return_if_fail (BG_IS_RECENT_SOURCE (self));
+  g_return_if_fail (CC_IS_BACKGROUND_ITEM (item));
+
+  uri = cc_background_item_get_uri (item);
+  file = g_file_new_for_uri (uri);
+
+  g_file_delete_async (file,
+                       G_PRIORITY_DEFAULT,
+                       self->cancellable,
+                       on_file_deleted_cb,
+                       g_object_ref (self));
+}
diff --git a/panels/background/bg-recent-source.h b/panels/background/bg-recent-source.h
new file mode 100644
index 0000000..58d4c04
--- /dev/null
+++ b/panels/background/bg-recent-source.h
@@ -0,0 +1,39 @@
+/* bg-recent-source.h
+ *
+ * Copyright 2019 Georges Basile Stavracas Neto <georges.stavracas@gmail.com>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ */
+
+#pragma once
+
+#include "bg-source.h"
+#include "cc-background-item.h"
+
+G_BEGIN_DECLS
+
+#define BG_TYPE_RECENT_SOURCE (bg_recent_source_get_type())
+G_DECLARE_FINAL_TYPE (BgRecentSource, bg_recent_source, BG, RECENT_SOURCE, BgSource)
+
+BgRecentSource* bg_recent_source_new         (GtkWidget        *widget);
+
+void            bg_recent_source_add_file    (BgRecentSource   *self,
+                                              const gchar      *path);
+
+void            bg_recent_source_remove_item (BgRecentSource   *self,
+                                              CcBackgroundItem *item);
+
+G_END_DECLS
diff --git a/panels/background/bg-source.c b/panels/background/bg-source.c
index e48daf0..dad6f85 100644
--- a/panels/background/bg-source.c
+++ b/panels/background/bg-source.c
@@ -23,13 +23,14 @@
 
 #include <cairo-gobject.h>
 
-#define THUMBNAIL_WIDTH 256
-#define THUMBNAIL_HEIGHT (THUMBNAIL_WIDTH * 3 / 4)
+#define THUMBNAIL_WIDTH 200
+#define THUMBNAIL_HEIGHT 125
 
 typedef struct
 {
-  GtkListStore *store;
-  GtkWidget *window;
+  GnomeDesktopThumbnailFactory *thumbnail_factory;
+  GListStore *store;
+  GtkWidget *widget;
   gint thumbnail_height;
   gint thumbnail_width;
 } BgSourcePrivate;
@@ -39,7 +40,7 @@ G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE (BgSource, bg_source, G_TYPE_OBJECT)
 enum
 {
   PROP_LISTSTORE = 1,
-  PROP_WINDOW
+  PROP_WIDGET
 };
 
 
@@ -49,13 +50,15 @@ bg_source_calculate_thumbnail_dimensions (BgSource *source)
   BgSourcePrivate *priv = bg_source_get_instance_private (source);
   gint scale_factor;
 
-  priv->thumbnail_height = THUMBNAIL_HEIGHT;
-  priv->thumbnail_width = THUMBNAIL_WIDTH;
+  if (priv->thumbnail_height == 0)
+    priv->thumbnail_height = THUMBNAIL_HEIGHT;
+  if (priv->thumbnail_width == 0)
+    priv->thumbnail_width = THUMBNAIL_WIDTH;
 
-  if (priv->window == NULL)
+  if (priv->widget == NULL)
     return;
 
-  scale_factor = gtk_widget_get_scale_factor (priv->window);
+  scale_factor = gtk_widget_get_scale_factor (priv->widget);
   if (scale_factor > 1)
     {
       priv->thumbnail_height *= scale_factor;
@@ -101,8 +104,8 @@ bg_source_set_property (GObject      *object,
 
   switch (property_id)
     {
-    case PROP_WINDOW:
-      priv->window = GTK_WIDGET (g_value_get_object (value));
+    case PROP_WIDGET:
+      priv->widget = GTK_WIDGET (g_value_get_object (value));
       break;
 
     default:
@@ -116,6 +119,7 @@ bg_source_dispose (GObject *object)
   BgSource *source = BG_SOURCE (object);
   BgSourcePrivate *priv = bg_source_get_instance_private (source);
 
+  g_clear_object (&priv->thumbnail_factory);
   g_clear_object (&priv->store);
 
   G_OBJECT_CLASS (bg_source_parent_class)->dispose (object);
@@ -135,26 +139,29 @@ bg_source_class_init (BgSourceClass *klass)
   pspec = g_param_spec_object ("liststore",
                                "Liststore",
                                "Liststore used in the source",
-                               GTK_TYPE_LIST_STORE,
+                               G_TYPE_LIST_STORE,
                                G_PARAM_READABLE | G_PARAM_STATIC_STRINGS);
   g_object_class_install_property (object_class, PROP_LISTSTORE, pspec);
 
-  pspec = g_param_spec_object ("window",
-                               "Window",
-                               "Toplevel window used to view the source",
-                               GTK_TYPE_WINDOW,
+  pspec = g_param_spec_object ("widget",
+                               "Widget",
+                               "Widget used to view the source",
+                               GTK_TYPE_WIDGET,
                                G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY | G_PARAM_STATIC_STRINGS);
-  g_object_class_install_property (object_class, PROP_WINDOW, pspec);
+  g_object_class_install_property (object_class, PROP_WIDGET, pspec);
 }
 
 static void
 bg_source_init (BgSource *self)
 {
   BgSourcePrivate *priv = bg_source_get_instance_private (self);
-  priv->store = gtk_list_store_new (3, CAIRO_GOBJECT_TYPE_SURFACE, G_TYPE_OBJECT, G_TYPE_STRING);
+  priv->store = g_list_store_new (CC_TYPE_BACKGROUND_ITEM);
+  priv->thumbnail_factory = gnome_desktop_thumbnail_factory_new (GNOME_DESKTOP_THUMBNAIL_SIZE_LARGE);
+  priv->thumbnail_height = 0;
+  priv->thumbnail_width = 0;
 }
 
-GtkListStore*
+GListStore*
 bg_source_get_liststore (BgSource *source)
 {
   BgSourcePrivate *priv;
@@ -173,7 +180,7 @@ bg_source_get_scale_factor (BgSource *source)
   g_return_val_if_fail (BG_IS_SOURCE (source), 1);
 
   priv = bg_source_get_instance_private (source);
-  return gtk_widget_get_scale_factor (priv->window);
+  return gtk_widget_get_scale_factor (priv->widget);
 }
 
 gint
@@ -197,3 +204,34 @@ bg_source_get_thumbnail_width (BgSource *source)
   priv = bg_source_get_instance_private (source);
   return priv->thumbnail_width;
 }
+
+GnomeDesktopThumbnailFactory*
+bg_source_get_thumbnail_factory (BgSource *source)
+{
+  BgSourcePrivate *priv;
+
+  g_return_val_if_fail (BG_IS_SOURCE (source), NULL);
+
+  priv = bg_source_get_instance_private (source);
+  return priv->thumbnail_factory;
+}
+
+void
+bg_source_set_thumbnail_height (BgSource *source, gint height)
+{
+  BgSourcePrivate *priv;
+  g_return_val_if_fail (BG_IS_SOURCE (source), 1);
+
+  priv = bg_source_get_instance_private (source);
+  priv->thumbnail_height = height;
+}
+
+void
+bg_source_set_thumbnail_width (BgSource *source, gint width)
+{
+  BgSourcePrivate *priv;
+  g_return_val_if_fail (BG_IS_SOURCE (source), 1);
+
+  priv = bg_source_get_instance_private (source);
+  priv->thumbnail_width = width; 
+}
diff --git a/panels/background/bg-source.h b/panels/background/bg-source.h
index c6f9b40..5421d27 100644
--- a/panels/background/bg-source.h
+++ b/panels/background/bg-source.h
@@ -18,10 +18,10 @@
  *
  */
 
-#ifndef _BG_SOURCE_H
-#define _BG_SOURCE_H
+#pragma once
 
 #include <gtk/gtk.h>
+#include <libgnome-desktop/gnome-desktop-thumbnail.h>
 
 G_BEGIN_DECLS
 
@@ -33,7 +33,7 @@ struct _BgSourceClass
   GObjectClass parent_class;
 };
 
-GtkListStore* bg_source_get_liststore (BgSource *source);
+GListStore* bg_source_get_liststore (BgSource *source);
 
 gint bg_source_get_scale_factor (BgSource *source);
 
@@ -41,6 +41,10 @@ gint bg_source_get_thumbnail_height (BgSource *source);
 
 gint bg_source_get_thumbnail_width (BgSource *source);
 
-G_END_DECLS
+void bg_source_set_thumbnail_height (BgSource *source, gint height);
+
+void bg_source_set_thumbnail_width (BgSource *source, gint width);
 
-#endif /* _BG_SOURCE_H */
+GnomeDesktopThumbnailFactory* bg_source_get_thumbnail_factory (BgSource *source);
+
+G_END_DECLS
diff --git a/panels/background/bg-wallpapers-source.c b/panels/background/bg-wallpapers-source.c
index a1fb460..d423e48 100644
--- a/panels/background/bg-wallpapers-source.c
+++ b/panels/background/bg-wallpapers-source.c
@@ -25,13 +25,11 @@
 #include "cc-background-xml.h"
 
 #include <cairo-gobject.h>
-#include <libgnome-desktop/gnome-desktop-thumbnail.h>
 #include <gio/gio.h>
 
 struct _BgWallpapersSource
 {
   BgSource parent_instance;
-  GnomeDesktopThumbnailFactory *thumb_factory;
   CcBackgroundXml *xml;
 };
 
@@ -42,38 +40,15 @@ load_wallpapers (gchar              *key,
                  CcBackgroundItem   *item,
                  BgWallpapersSource *source)
 {
-  GtkTreeIter iter;
-  g_autoptr(GdkPixbuf) pixbuf = NULL;
-  GtkListStore *store = bg_source_get_liststore (BG_SOURCE (source));
-  cairo_surface_t *surface;
+  GListStore *store = bg_source_get_liststore (BG_SOURCE (source));
   gboolean deleted;
-  gint scale_factor;
-  gint thumbnail_height;
-  gint thumbnail_width;
 
   g_object_get (G_OBJECT (item), "is-deleted", &deleted, NULL);
 
   if (deleted)
     return;
 
-  gtk_list_store_append (store, &iter);
-
-  scale_factor = bg_source_get_scale_factor (BG_SOURCE (source));
-  thumbnail_height = bg_source_get_thumbnail_height (BG_SOURCE (source));
-  thumbnail_width = bg_source_get_thumbnail_width (BG_SOURCE (source));
-  pixbuf = cc_background_item_get_thumbnail (item, source->thumb_factory,
-					     thumbnail_width, thumbnail_height,
-					     scale_factor);
-  if (pixbuf == NULL)
-    return;
-
-  surface = gdk_cairo_surface_create_from_pixbuf (pixbuf, scale_factor, NULL);
-  gtk_list_store_set (store, &iter,
-                      0, surface,
-                      1, item,
-                      2, cc_background_item_get_name (item),
-                      -1);
-  g_clear_pointer (&surface, (GDestroyNotify) cairo_surface_destroy);
+  g_list_store_append (store, item);
 }
 
 static void
@@ -87,9 +62,8 @@ list_load_cb (GObject *source_object,
 }
 
 static void
-item_added (CcBackgroundXml    *xml,
-	    CcBackgroundItem   *item,
-	    BgWallpapersSource *self)
+item_added (BgWallpapersSource *self,
+            CcBackgroundItem   *item)
 {
   load_wallpapers (NULL, item, self);
 }
@@ -122,8 +96,8 @@ bg_wallpapers_source_constructed (GObject *object)
 
   G_OBJECT_CLASS (bg_wallpapers_source_parent_class)->constructed (object);
 
-  g_signal_connect (G_OBJECT (self->xml), "added",
-		    G_CALLBACK (item_added), self);
+  g_signal_connect_object (G_OBJECT (self->xml), "added",
+                           G_CALLBACK (item_added), self, G_CONNECT_SWAPPED);
 
   /* Try adding the default background first */
   load_default_bg (self);
@@ -136,17 +110,17 @@ bg_wallpapers_source_dispose (GObject *object)
 {
   BgWallpapersSource *self = BG_WALLPAPERS_SOURCE (object);
 
-  g_clear_object (&self->thumb_factory);
   g_clear_object (&self->xml);
 
+  bg_source_set_thumbnail_height (BG_SOURCE (self), 125);
+  bg_source_set_thumbnail_width (BG_SOURCE (self), 200);
+
   G_OBJECT_CLASS (bg_wallpapers_source_parent_class)->dispose (object);
 }
 
 static void
 bg_wallpapers_source_init (BgWallpapersSource *self)
 {
-  self->thumb_factory =
-    gnome_desktop_thumbnail_factory_new (GNOME_DESKTOP_THUMBNAIL_SIZE_LARGE);
   self->xml = cc_background_xml_new ();
 }
 
@@ -160,8 +134,8 @@ bg_wallpapers_source_class_init (BgWallpapersSourceClass *klass)
 }
 
 BgWallpapersSource *
-bg_wallpapers_source_new (GtkWindow *window)
+bg_wallpapers_source_new (GtkWidget *widget)
 {
-  return g_object_new (BG_TYPE_WALLPAPERS_SOURCE, "window", window, NULL);
+  return g_object_new (BG_TYPE_WALLPAPERS_SOURCE, "widget", widget, NULL);
 }
 
diff --git a/panels/background/bg-wallpapers-source.h b/panels/background/bg-wallpapers-source.h
index 129c249..3ca222b 100644
--- a/panels/background/bg-wallpapers-source.h
+++ b/panels/background/bg-wallpapers-source.h
@@ -19,9 +19,7 @@
  *
  */
 
-
-#ifndef _BG_WALLPAPERS_SOURCE_H
-#define _BG_WALLPAPERS_SOURCE_H
+#pragma once
 
 #include <gtk/gtk.h>
 #include "bg-source.h"
@@ -31,8 +29,6 @@ G_BEGIN_DECLS
 #define BG_TYPE_WALLPAPERS_SOURCE (bg_wallpapers_source_get_type ())
 G_DECLARE_FINAL_TYPE (BgWallpapersSource, bg_wallpapers_source, BG, WALLPAPERS_SOURCE, BgSource)
 
-BgWallpapersSource *bg_wallpapers_source_new (GtkWindow *window);
+BgWallpapersSource *bg_wallpapers_source_new (GtkWidget *widget);
 
 G_END_DECLS
-
-#endif /* _BG_WALLPAPERS_SOURCE_H */
diff --git a/panels/background/cc-background-chooser.c b/panels/background/cc-background-chooser.c
new file mode 100644
index 0000000..f2015f7
--- /dev/null
+++ b/panels/background/cc-background-chooser.c
@@ -0,0 +1,344 @@
+#include <config.h>
+
+#include <glib/gi18n-lib.h>
+
+#include "cc-background-chooser.h"
+#include "cc-background-item.h"
+#include "bg-wallpapers-source.h"
+#include "bg-recent-source.h"
+#include "bg-colors-source.h"
+
+#define COLOR_CHECK_ICON "/org/gnome/control-center/background/color_check_icon"
+#define CHECK_ICON       "/org/gnome/control-center/background/check_icon"
+
+
+typedef enum {
+  IMAGE_WALLPAPER = 0,
+  IMAGE_SINGLECOLOR,
+}BackgroundImage;
+
+struct _CcBackgroundChooser
+{
+  GtkBox        parent;
+
+  GtkWidget     *background_select_combobox;
+  GtkStack      *background_stack;
+  GtkWidget     *chooser_button;
+
+  GtkFlowBox    *wallpaper_flowbox;
+  GtkFlowBox    *recent_flowbox;
+  GtkFlowBox    *color_flowbox;
+
+  GtkWidget     *selected_icon;
+
+  BackgroundImage      selected_background;
+
+  BgWallpapersSource  *wallpapers_source;
+  BgRecentSource      *recent_source;
+  BgColorsSource      *colors_source;
+};
+
+G_DEFINE_TYPE (CcBackgroundChooser, cc_background_chooser, GTK_TYPE_BOX)
+
+enum
+{
+  SELECT_BACKGROUND,
+  N_SIGNALS,
+};
+
+static guint signals [N_SIGNALS];
+
+static void
+on_delete_background_clicked_cb (GtkButton *button,
+                                 BgRecentSource  *source)
+{
+  GtkWidget *parent;
+  CcBackgroundItem *item;
+
+  parent = gtk_widget_get_parent (gtk_widget_get_parent (GTK_WIDGET (button)));
+  g_assert (GTK_IS_FLOW_BOX_CHILD (parent));
+
+  item = g_object_get_data (G_OBJECT (parent), "item");
+
+  bg_recent_source_remove_item (source, item);
+}
+
+static void
+on_file_dialog_response_cb (GtkDialog           *dialog,
+                            gint                 response,
+                            CcBackgroundChooser *chooser)
+{
+  if (response == GTK_RESPONSE_ACCEPT) {
+    g_autofree gchar *filename = NULL;
+
+    filename = gtk_file_chooser_get_filename (GTK_FILE_CHOOSER (dialog));
+    bg_recent_source_add_file (chooser->recent_source, filename);
+  }
+  
+  gtk_widget_destroy (GTK_WIDGET (dialog));
+}
+
+static void
+on_background_item_activated (GtkFlowBox          *flowbox,
+                   GtkFlowBoxChild     *child,
+                   CcBackgroundChooser *chooser)
+{
+  g_autoptr(GList) list = NULL;
+  GtkFlowBox *current_flowbox;
+  GtkWidget *selected_icon;
+  CcBackgroundItem *item;
+
+  if (flowbox == chooser->wallpaper_flowbox) {
+    current_flowbox = chooser->wallpaper_flowbox;
+
+    gtk_flow_box_unselect_all (chooser->recent_flowbox);
+    gtk_flow_box_unselect_all (chooser->color_flowbox);
+  }
+  else if (flowbox == chooser->recent_flowbox) {
+    current_flowbox = chooser->recent_flowbox;
+
+    gtk_flow_box_unselect_all (chooser->wallpaper_flowbox);
+    gtk_flow_box_unselect_all (chooser->color_flowbox);
+  }
+  else {
+    current_flowbox = chooser->color_flowbox;
+
+    gtk_flow_box_unselect_all (chooser->wallpaper_flowbox);
+    gtk_flow_box_unselect_all (chooser->recent_flowbox);
+  }
+
+  list = gtk_flow_box_get_selected_children (current_flowbox);
+  selected_icon = g_object_get_data (list->data, "selected-icon");
+
+  if (chooser->selected_icon)
+    gtk_widget_set_visible (chooser->selected_icon, FALSE);
+  gtk_widget_set_visible (selected_icon, TRUE);
+
+  chooser->selected_icon = selected_icon;
+
+  /* set item.. */
+  item = g_object_get_data (list->data, "item");
+  g_signal_emit (chooser, signals[SELECT_BACKGROUND], 0, item);
+}
+
+static void
+on_background_changed (GtkComboBox         *combobox,
+                       CcBackgroundChooser *chooser)
+{
+  gint selected_background = gtk_combo_box_get_active (combobox);
+
+  if (selected_background == IMAGE_WALLPAPER) {
+    gtk_stack_set_visible_child_name (GTK_STACK (chooser->background_stack), "wallpaper");
+    gtk_widget_set_visible (chooser->chooser_button, TRUE);
+  }
+  else if (selected_background == IMAGE_SINGLECOLOR) {
+    gtk_stack_set_visible_child_name (GTK_STACK (chooser->background_stack), "single-color");
+    gtk_widget_set_visible (chooser->chooser_button, FALSE);
+  }
+}
+
+static void
+on_clicked_add_image (GtkButton           *button,
+                      CcBackgroundChooser *chooser)
+{
+  GtkWidget *dlg;
+  GtkWidget *dialog;
+  GtkFileFilter *filter;
+
+  dialog = gtk_file_chooser_dialog_new (_("Add Image"),
+                                        NULL,
+                                        GTK_FILE_CHOOSER_ACTION_OPEN,
+                                        _("Calcel"), GTK_RESPONSE_CANCEL,
+                                        _("Open"), GTK_RESPONSE_ACCEPT,
+                                        NULL);
+
+  gtk_window_set_modal (GTK_WINDOW (dialog), TRUE);
+
+  filter = gtk_file_filter_new ();
+  gtk_file_filter_add_pixbuf_formats (filter);
+  gtk_file_chooser_set_filter (GTK_FILE_CHOOSER (dialog), filter);
+
+  gtk_file_chooser_set_current_folder (GTK_FILE_CHOOSER (dialog),
+                                      g_get_user_special_dir (G_USER_DIRECTORY_PICTURES));
+
+  g_signal_connect_object (dialog,
+                         "response",
+                         G_CALLBACK (on_file_dialog_response_cb),
+                         chooser,
+                         0);
+
+  gtk_window_present (GTK_WINDOW (dialog));
+}
+
+static GtkWidget*
+create_flowbox_child (gpointer model_item,
+                      gpointer data)
+{
+  g_autoptr(GdkPixbuf) pixbuf = NULL;
+  CcBackgroundItem *item;
+  GtkWidget *overlay;
+  GtkWidget *child;
+  GtkWidget *image, *selected_icon;
+  BgSource  *source;
+  GtkWidget *button_image = NULL;
+  GtkWidget *button = NULL;
+
+  source = BG_SOURCE (data);
+  item = CC_BACKGROUND_ITEM (model_item);
+  pixbuf = cc_background_item_get_thumbnail (item,
+                                             bg_source_get_thumbnail_factory (source),
+                                             bg_source_get_thumbnail_width (source),
+                                             bg_source_get_thumbnail_height (source),
+                                             bg_source_get_scale_factor (source));
+
+  image = gtk_image_new_from_pixbuf (pixbuf);
+  gtk_widget_show (image);
+
+  /* setup single-color selected image */
+  if (BG_IS_COLORS_SOURCE (source)) {
+    selected_icon = g_object_new (GTK_TYPE_IMAGE,
+                                  "resource", COLOR_CHECK_ICON,
+                                  "pixel-size", 24,
+                                  "margin", 12,
+                                  "halign", GTK_ALIGN_CENTER,
+                                  "valign", GTK_ALIGN_CENTER,
+                                  "visible", FALSE, NULL);
+  }
+  /* wallpaper or recent source */
+  else {
+    selected_icon = g_object_new (GTK_TYPE_IMAGE,
+                                  "resource", CHECK_ICON,
+                                  "pixel-size", 32,
+                                  "halign", GTK_ALIGN_END,
+                                  "valign", GTK_ALIGN_START,
+                                  "visible", FALSE, NULL);
+
+    //if (BG_IS_RECENT_SOURCE (source)) {
+    //  button_image = gtk_image_new_from_icon_name ("window-close-symbolic", GTK_ICON_SIZE_BUTTON);
+    //  button = g_object_new (GTK_TYPE_BUTTON,
+    //                         "image", button_image,
+    //                         "halign", GTK_ALIGN_END,
+    //                         "valign", GTK_ALIGN_START,
+    //                         "margin", 6,
+    //                         "visible",TRUE, NULL);
+
+    //  //gtk_style_context_add_class (gtk_widget_get_style_context (button), "osd");
+    //  //gtk_style_context_add_class (gtk_widget_get_style_context (button), "remove-button");
+
+    //  g_signal_connect (button,
+    //                    "clicked",
+    //                    G_CALLBACK (on_delete_background_clicked_cb),
+    //                    source);
+    //}
+  }
+
+  child = g_object_new (GTK_TYPE_FLOW_BOX_CHILD,
+                        "halign", GTK_ALIGN_CENTER,
+                        "valign", GTK_ALIGN_CENTER, NULL);
+
+  overlay = gtk_overlay_new ();
+  gtk_container_add (GTK_CONTAINER (overlay), image);
+  gtk_overlay_add_overlay (GTK_OVERLAY(overlay), selected_icon);
+  if (button)
+    gtk_overlay_add_overlay (GTK_OVERLAY(overlay), button);
+  gtk_widget_show (overlay);
+
+  gtk_container_add (GTK_CONTAINER (child), overlay);
+  gtk_widget_show (child);
+
+  g_object_set_data_full (G_OBJECT (child), "item", g_object_ref (item), g_object_unref);
+  g_object_set_data_full (G_OBJECT (child), "selected-icon", g_object_ref (selected_icon),
+                          g_object_unref);
+
+  return child;
+}
+
+static void
+setup_flowbox (CcBackgroundChooser *chooser)
+{
+  GListStore *store;
+
+  store = bg_source_get_liststore (BG_SOURCE (chooser->colors_source));
+  gtk_flow_box_bind_model (chooser->color_flowbox,
+                           G_LIST_MODEL (store),
+                           create_flowbox_child,
+                           chooser->colors_source, NULL);
+
+  store = bg_source_get_liststore (BG_SOURCE (chooser->recent_source));
+  gtk_flow_box_bind_model (chooser->recent_flowbox,
+                           G_LIST_MODEL (store),
+                           create_flowbox_child,
+                           chooser->recent_source, NULL);
+
+  store = bg_source_get_liststore (BG_SOURCE (chooser->wallpapers_source));
+  gtk_flow_box_bind_model (chooser->wallpaper_flowbox,
+                           G_LIST_MODEL (store),
+                           create_flowbox_child,
+                           chooser->wallpapers_source, NULL);
+}
+
+static void
+cc_background_chooser_constructed (GObject *object)
+{
+  CcBackgroundChooser *chooser = CC_BACKGROUND_CHOOSER (object);
+
+  G_OBJECT_CLASS (cc_background_chooser_parent_class)->constructed (object);
+
+  gtk_combo_box_set_active (GTK_COMBO_BOX (chooser->background_select_combobox), IMAGE_WALLPAPER);
+}
+
+static void
+cc_background_chooser_finalize (GObject *object)
+{
+  CcBackgroundChooser *chooser = CC_BACKGROUND_CHOOSER (object);
+
+  g_clear_object (&chooser->wallpapers_source);
+  g_clear_object (&chooser->recent_source);
+  g_clear_object (&chooser->colors_source);
+
+  G_OBJECT_CLASS (cc_background_chooser_parent_class)->finalize (object);
+}
+
+static void
+cc_background_chooser_class_init (CcBackgroundChooserClass *klass)
+{
+  GObjectClass   *object_class = G_OBJECT_CLASS (klass);
+  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);;
+
+  object_class->constructed = cc_background_chooser_constructed;
+  object_class->finalize = cc_background_chooser_finalize;
+
+  signals[SELECT_BACKGROUND] = g_signal_new ("select-background",
+                                             CC_TYPE_BACKGROUND_CHOOSER,
+                                             G_SIGNAL_RUN_FIRST,
+                                             0, NULL, NULL, NULL,
+                                             G_TYPE_NONE,
+                                             1,
+                                             CC_TYPE_BACKGROUND_ITEM);
+
+  gtk_widget_class_set_template_from_resource (widget_class, "/org/gnome/control-center/background/background-chooser.ui");
+
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundChooser, background_select_combobox);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundChooser, background_stack);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundChooser, wallpaper_flowbox);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundChooser, recent_flowbox);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundChooser, color_flowbox);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundChooser, chooser_button);
+
+  gtk_widget_class_bind_template_callback (widget_class, on_background_item_activated);
+  gtk_widget_class_bind_template_callback (widget_class, on_background_changed);
+  gtk_widget_class_bind_template_callback (widget_class, on_clicked_add_image);
+}
+
+static void
+cc_background_chooser_init (CcBackgroundChooser *chooser)
+{
+  gtk_widget_init_template (GTK_WIDGET (chooser));
+
+  chooser->selected_icon = NULL;
+  chooser->wallpapers_source = bg_wallpapers_source_new (GTK_WIDGET (chooser));
+  chooser->recent_source = bg_recent_source_new (GTK_WIDGET (chooser));
+  chooser->colors_source = bg_colors_source_new (GTK_WIDGET (chooser));
+
+  setup_flowbox (chooser);
+}
diff --git a/panels/background/cc-background-chooser.h b/panels/background/cc-background-chooser.h
new file mode 100644
index 0000000..b8741d6
--- /dev/null
+++ b/panels/background/cc-background-chooser.h
@@ -0,0 +1,12 @@
+#ifndef __CC_BACKGROUND_CHOOSER_H__
+#define __CC_BACKGROUND_CHOOSER_H__
+
+#include <gtk/gtk.h>
+G_BEGIN_DECLS
+
+#define CC_TYPE_BACKGROUND_CHOOSER (cc_background_chooser_get_type ())
+G_DECLARE_FINAL_TYPE (CcBackgroundChooser, cc_background_chooser, CC, BACKGROUND_CHOOSER, GtkBox)
+
+G_END_DECLS
+
+#endif /* __CC_BACKGROUND_CHOOSER_H__ */
diff --git a/panels/background/cc-background-item.c b/panels/background/cc-background-item.c
index c547cb1..cb6bea2 100644
--- a/panels/background/cc-background-item.c
+++ b/panels/background/cc-background-item.c
@@ -52,11 +52,18 @@ struct _CcBackgroundItem
         guint64          modified;
 
         /* internal */
-        GdkPixbuf       *slideshow_emblem;
         GnomeBG         *bg;
         char            *mime_type;
         int              width;
         int              height;
+
+        struct {
+                int        width;
+                int        height;
+                int        frame;
+                int        scale_factor;
+                GdkPixbuf *thumbnail;
+        } cached_thumbnail;
 };
 
 enum {
@@ -80,64 +87,6 @@ static void     cc_background_item_finalize       (GObject               *object
 
 G_DEFINE_TYPE (CcBackgroundItem, cc_background_item, G_TYPE_OBJECT)
 
-static GdkPixbuf *slideshow_emblem = NULL;
-
-static GdkPixbuf *
-get_emblemed_pixbuf (CcBackgroundItem *item, GdkPixbuf *pixbuf, gint scale_factor)
-{
-        int eh;
-        int ew;
-        int h;
-        int w;
-        int x;
-        int y;
-
-        if (item->slideshow_emblem == NULL) {
-                if (slideshow_emblem == NULL) {
-                        g_autoptr(GIcon) icon = NULL;
-                        GtkIconTheme *theme;
-                        g_autoptr(GtkIconInfo) icon_info = NULL;
-                        g_autoptr(GError) error = NULL;
-
-                        icon = g_themed_icon_new ("slideshow-emblem");
-                        theme = gtk_icon_theme_get_default ();
-                        icon_info = gtk_icon_theme_lookup_by_gicon_for_scale (theme,
-                                                                              icon,
-                                                                              16,
-                                                                              scale_factor,
-                                                                              GTK_ICON_LOOKUP_FORCE_SIZE |
-                                                                              GTK_ICON_LOOKUP_USE_BUILTIN);
-                        if (icon_info == NULL) {
-                                g_warning ("Your icon theme is missing the slideshow-emblem icon, "
-                                           "please file a bug against it");
-                                return g_object_ref (pixbuf);
-                        }
-
-                        slideshow_emblem = gtk_icon_info_load_icon (icon_info, &error);
-                        if (slideshow_emblem == NULL) {
-                                g_warning ("Failed to load slideshow emblem: %s", error->message);
-                                return g_object_ref (pixbuf);
-                        }
-
-                        g_object_add_weak_pointer (G_OBJECT (slideshow_emblem), (gpointer *) (&slideshow_emblem));
-                        item->slideshow_emblem = slideshow_emblem;
-                } else {
-                        item->slideshow_emblem = g_object_ref (slideshow_emblem);
-                }
-        }
-
-        eh = gdk_pixbuf_get_height (slideshow_emblem);
-        ew = gdk_pixbuf_get_width (slideshow_emblem);
-        h = gdk_pixbuf_get_height (pixbuf);
-        w = gdk_pixbuf_get_width (pixbuf);
-        x = w - ew;
-        y = h - eh;
-
-        gdk_pixbuf_composite (slideshow_emblem, pixbuf, x, y, ew, eh, x, y, 1.0, 1.0, GDK_INTERP_BILINEAR, 255);
-
-        return g_object_ref (pixbuf);
-}
-
 static void
 set_bg_properties (CcBackgroundItem *item)
 {
@@ -207,7 +156,11 @@ render_at_size (GnomeBG *bg,
         GdkPixbuf *pixbuf;
 
         pixbuf = gdk_pixbuf_new (GDK_COLORSPACE_RGB, FALSE, 8, width, height);
+#ifdef GNOME_DESKTOP_BG_API_BREAK
+        gnome_bg_draw (bg, pixbuf);
+#else
         gnome_bg_draw (bg, pixbuf, gdk_screen_get_default (), FALSE);
+#endif
 
         return pixbuf;
 }
@@ -227,6 +180,14 @@ cc_background_item_get_frame_thumbnail (CcBackgroundItem             *item,
 	g_return_val_if_fail (CC_IS_BACKGROUND_ITEM (item), NULL);
 	g_return_val_if_fail (width > 0 && height > 0, NULL);
 
+        /* Use the cached thumbnail if the sizes match */
+        if (item->cached_thumbnail.thumbnail &&
+            item->cached_thumbnail.width == width &&
+            item->cached_thumbnail.height == height &&
+            item->cached_thumbnail.scale_factor == scale_factor &&
+            item->cached_thumbnail.frame == frame)
+                    return g_object_ref (item->cached_thumbnail.thumbnail);
+
         set_bg_properties (item);
 
         if (force_size) {
@@ -255,13 +216,7 @@ cc_background_item_get_frame_thumbnail (CcBackgroundItem             *item,
                 }
         }
 
-        if (pixbuf != NULL
-            && frame != -2
-            && gnome_bg_changes_with_time (item->bg)) {
-                retval = get_emblemed_pixbuf (item, pixbuf, scale_factor);
-        } else {
-                retval = g_steal_pointer (&pixbuf);
-	}
+        retval = g_steal_pointer (&pixbuf);
 
         gnome_bg_get_image_size (item->bg,
                                  thumbs,
@@ -272,6 +227,13 @@ cc_background_item_get_frame_thumbnail (CcBackgroundItem             *item,
 
         update_size (item);
 
+        /* Cache the new thumbnail */
+        g_set_object (&item->cached_thumbnail.thumbnail, retval);
+        item->cached_thumbnail.width = width;
+        item->cached_thumbnail.height = height;
+        item->cached_thumbnail.scale_factor = scale_factor;
+        item->cached_thumbnail.frame = frame;
+
         return g_steal_pointer (&retval);
 }
 
@@ -820,6 +782,7 @@ cc_background_item_finalize (GObject *object)
 
         g_return_if_fail (item != NULL);
 
+        g_clear_object (&item->cached_thumbnail.thumbnail);
         g_free (item->name);
         g_free (item->uri);
         g_free (item->primary_color);
@@ -832,8 +795,6 @@ cc_background_item_finalize (GObject *object)
         if (item->bg != NULL)
                 g_object_unref (item->bg);
 
-        g_clear_object (&item->slideshow_emblem);
-
         G_OBJECT_CLASS (cc_background_item_parent_class)->finalize (object);
 }
 
diff --git a/panels/background/cc-background-item.h b/panels/background/cc-background-item.h
index b97c7a0..b7b8df6 100644
--- a/panels/background/cc-background-item.h
+++ b/panels/background/cc-background-item.h
@@ -17,8 +17,7 @@
  *
  */
 
-#ifndef __CC_BACKGROUND_ITEM_H
-#define __CC_BACKGROUND_ITEM_H
+#pragma once
 
 #include <glib-object.h>
 #include <gdk-pixbuf/gdk-pixbuf.h>
@@ -82,5 +81,3 @@ gboolean                  cc_background_item_compare        (CcBackgroundItem *s
 void                      cc_background_item_dump           (CcBackgroundItem *item);
 
 G_END_DECLS
-
-#endif /* __CC_BACKGROUND_ITEM_H */
diff --git a/panels/background/cc-background-panel.c b/panels/background/cc-background-panel.c
index 8d54d56..9e2f808 100644
--- a/panels/background/cc-background-panel.c
+++ b/panels/background/cc-background-panel.c
@@ -21,6 +21,7 @@
 #include <config.h>
 
 #include <string.h>
+#include <gtk/gtk.h>
 #include <glib.h>
 #include <glib/gi18n-lib.h>
 #include <glib/gstdio.h>
@@ -29,12 +30,13 @@
 
 #include "cc-background-panel.h"
 
-#include "cc-background-chooser-dialog.h"
 #include "cc-background-item.h"
 #include "cc-background-resources.h"
 #include "cc-background-xml.h"
+#include "cc-background-chooser.h"
 
-#include "bg-pictures-source.h"
+#include "bg-colors-source.h"
+//#include "bg-pictures-source.h"
 
 #define WP_PATH_ID "org.gnome.desktop.background"
 #define WP_LOCK_PATH_ID "org.gnome.desktop.screensaver"
@@ -44,11 +46,29 @@
 #define WP_PCOLOR_KEY "primary-color"
 #define WP_SCOLOR_KEY "secondary-color"
 
+#define CHECK_ICON       "/org/gnome/control-center/background/check_icon"
+
+enum {
+  COMBO_BOX_MODEL_TEXT,
+  COMBO_BOX_MODEL_VALUE,
+  N_COLUMNS
+};
+
+typedef enum {
+  MODE_EACH = 0,
+  MODE_ALL,
+}BackgroundMode;
+
+typedef enum {
+  APPLY_DESKTOP,
+  APPLY_LOCK,
+  APPLY_ALL,
+}BackgroundApply;
+
 struct _CcBackgroundPanel
 {
-  CcPanel parent_instance;
+  CcPanel                   parent_instance;
 
-  GtkBuilder *builder;
   GDBusConnection *connection;
 
   GSettings *settings;
@@ -63,80 +83,97 @@ struct _CcBackgroundPanel
 
   GtkWidget *spinner;
   GtkWidget *chooser;
+
+  GtkCssProvider  *provider;
+  GtkCssProvider  *selected_prov;
+  GtkCssProvider  *default_prov;
+
+  /* from ui */
+  GtkWidget       *scrolled_view;
+  GtkWidget       *type_label;
+  GtkWidget       *type_select_combobox;
+
+  GtkWidget       *desktop_thumbnail_box;
+  GtkWidget       *desktop_eventbox;
+  GtkWidget       *desktop_overlay;
+  GtkWidget       *desktop_image;
+  GtkWidget       *desktop_label;
+
+  GtkWidget       *lock_box;            // need for vislble,disable
+  GtkWidget       *lock_thumbnail_box;
+  GtkWidget       *lock_eventbox;
+  GtkWidget       *lock_overlay;
+  GtkWidget       *lock_image;
+  GtkWidget       *lock_label;
+
+  BackgroundMode      background_mode;
+  BackgroundApply     applied_background;
 };
 
 CC_PANEL_REGISTER (CcBackgroundPanel, cc_background_panel)
 
-#define WID(y) (GtkWidget *) gtk_builder_get_object (panel->builder, y)
-
 static const char *
 cc_background_panel_get_help_uri (CcPanel *panel)
 {
   return "help:gnome-help/look-background";
 }
 
-static void
-cc_background_panel_dispose (GObject *object)
+static CcBackgroundItem *
+get_current_background (CcBackgroundPanel *panel, GSettings *settings)
 {
-  CcBackgroundPanel *panel = CC_BACKGROUND_PANEL (object);
-
-  g_clear_object (&panel->builder);
-
-  /* destroying the builder object will also destroy the spinner */
-  panel->spinner = NULL;
-
-  g_clear_object (&panel->settings);
-  g_clear_object (&panel->lock_settings);
-
-  if (panel->copy_cancellable)
-    {
-      /* cancel any copy operation */
-      g_cancellable_cancel (panel->copy_cancellable);
-
-      g_clear_object (&panel->copy_cancellable);
-    }
-
-  if (panel->chooser)
-    {
-      gtk_widget_destroy (panel->chooser);
-      panel->chooser = NULL;
-    }
-
-  g_clear_object (&panel->thumb_factory);
-
-  G_OBJECT_CLASS (cc_background_panel_parent_class)->dispose (object);
+  if (settings == panel->settings)
+    return panel->current_background;
+  else
+    return panel->current_lock_background;
 }
 
-static void
-cc_background_panel_finalize (GObject *object)
+static gchar *
+get_save_path (CcBackgroundPanel *panel, GSettings *settings)
 {
-  CcBackgroundPanel *panel = CC_BACKGROUND_PANEL (object);
-
-  g_clear_object (&panel->current_background);
-  g_clear_object (&panel->current_lock_background);
-
-  G_OBJECT_CLASS (cc_background_panel_parent_class)->finalize (object);
+  return g_build_filename (g_get_user_config_dir (),
+                           "gnome-control-center",
+                           "backgrounds",
+                           settings == panel->settings ? "last-edited.xml" : "last-edited-lock.xml",
+                           NULL);
 }
 
-static void
-cc_background_panel_class_init (CcBackgroundPanelClass *klass)
+static GdkPixbuf*
+get_or_create_cached_pixbuf (CcBackgroundPanel *panel,
+                             GtkWidget         *widget,
+                             CcBackgroundItem  *background)
 {
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
-  CcPanelClass *panel_class = CC_PANEL_CLASS (klass);
+  GtkAllocation allocation;
+  const gint preview_width = 300;
+  const gint preview_height = 188;
+  gint scale_factor;
+  GdkPixbuf *pixbuf;
 
-  panel_class->get_help_uri = cc_background_panel_get_help_uri;
+  pixbuf = g_object_get_data (G_OBJECT (background), "pixbuf");
+  if (pixbuf == NULL)
+    {
+      gtk_widget_get_allocation (widget, &allocation);
+      scale_factor = gtk_widget_get_scale_factor (widget);
+      pixbuf = cc_background_item_get_frame_thumbnail (background,
+                                                       panel->thumb_factory,
+                                                       preview_width,
+                                                       preview_height,
+                                                       scale_factor,
+                                                       -2, TRUE);
+      g_object_set_data_full (G_OBJECT (background), "pixbuf", pixbuf, g_object_unref);
+    }
 
-  object_class->dispose = cc_background_panel_dispose;
-  object_class->finalize = cc_background_panel_finalize;
+  return pixbuf;
 }
 
-static CcBackgroundItem *
-get_current_background (CcBackgroundPanel *panel, GSettings *settings)
+static void
+set_preview_image (CcBackgroundPanel *panel,
+                   GtkWidget         *widget,
+                   CcBackgroundItem  *item)
 {
-  if (settings == panel->settings)
-    return panel->current_background;
-  else
-    return panel->current_lock_background;
+  GdkPixbuf *pixbuf;
+
+  pixbuf = get_or_create_cached_pixbuf (panel, widget, item);
+  gtk_image_set_from_pixbuf (GTK_IMAGE (widget), pixbuf);
 }
 
 static void
@@ -169,56 +206,14 @@ update_preview (CcBackgroundPanel *panel,
 
   if (settings == panel->settings)
     {
-      gtk_widget_set_visible (WID ("slide_image"), changes_with_time);
-      gtk_widget_set_visible (WID ("slide-label"), changes_with_time);
-
-      gtk_widget_queue_draw (WID ("background-desktop-drawingarea"));
+      set_preview_image (panel, panel->desktop_image,
+                         item == NULL ? panel->current_background : item);
     }
   else
     {
-      gtk_widget_set_visible (WID ("slide_image1"), changes_with_time);
-      gtk_widget_set_visible (WID ("slide-label1"), changes_with_time);
-
-      gtk_widget_queue_draw (WID ("background-lock-drawingarea"));
-    }
-}
-
-static gchar *
-get_save_path (CcBackgroundPanel *panel, GSettings *settings)
-{
-  return g_build_filename (g_get_user_config_dir (),
-                           "gnome-control-center",
-                           "backgrounds",
-                           settings == panel->settings ? "last-edited.xml" : "last-edited-lock.xml",
-                           NULL);
-}
-
-static GdkPixbuf*
-get_or_create_cached_pixbuf (CcBackgroundPanel *panel,
-                             GtkWidget         *widget,
-                             CcBackgroundItem  *background)
-{
-  GtkAllocation allocation;
-  const gint preview_width = 309;
-  const gint preview_height = 168;
-  gint scale_factor;
-  GdkPixbuf *pixbuf;
-
-  pixbuf = g_object_get_data (G_OBJECT (background), "pixbuf");
-  if (pixbuf == NULL)
-    {
-      gtk_widget_get_allocation (widget, &allocation);
-      scale_factor = gtk_widget_get_scale_factor (widget);
-      pixbuf = cc_background_item_get_frame_thumbnail (background,
-                                                       panel->thumb_factory,
-                                                       preview_width,
-                                                       preview_height,
-                                                       scale_factor,
-                                                       -2, TRUE);
-      g_object_set_data_full (G_OBJECT (background), "pixbuf", pixbuf, g_object_unref);
+      set_preview_image (panel, panel->lock_image,
+                         item == NULL ? panel->current_lock_background : item);
     }
-
-  return pixbuf;
 }
 
 static void
@@ -228,6 +223,27 @@ update_display_preview (CcBackgroundPanel *panel,
 {
   GdkPixbuf *pixbuf;
   cairo_t *cr;
+  GdkRGBA color;
+  cairo_region_t *cairo_region;
+  GdkDrawingContext *drawing_context;
+  GdkWindow *window;
+
+//  color.red = 1.0;
+//  color.green = 1.0;
+//  color.blue = 1.0;
+//  color.alpha = 1.0;
+//
+//  cairo_region = cairo_region_create ();
+//  window = gtk_widget_get_window (widget);
+//  drawing_context = gdk_window_begin_draw_frame (window, cairo_region);
+//
+//  cr = gdk_drawing_context_get_cairo_context (drawing_context);
+//
+//  gdk_cairo_set_source_rgba (cr, &color);
+
+//  cairo_paint (cr);
+//  gdk_window_end_draw_frame (window, drawing_context);
+//  cairo_region_destroy (cairo_region);
 
   pixbuf = get_or_create_cached_pixbuf (panel, widget, background);
 
@@ -239,25 +255,6 @@ update_display_preview (CcBackgroundPanel *panel,
   cairo_destroy (cr);
 }
 
-static gboolean
-on_preview_draw (GtkWidget         *widget,
-                 cairo_t           *cr,
-                 CcBackgroundPanel *panel)
-{
-  update_display_preview (panel, widget, panel->current_background);
-
-  return TRUE;
-}
-
-static gboolean
-on_lock_preview_draw (GtkWidget         *widget,
-                      cairo_t           *cr,
-                      CcBackgroundPanel *panel)
-{
-  update_display_preview (panel, widget, panel->current_lock_background);
-  return TRUE;
-}
-
 static void
 reload_current_bg (CcBackgroundPanel *panel,
                    GSettings         *settings)
@@ -376,7 +373,6 @@ copy_finished_cb (GObject      *source_object,
   if (current_background)
     cc_background_item_load (current_background, NULL);
 
-  if (panel->builder)
     {
       g_autofree gchar *filename = NULL;
 
@@ -411,77 +407,77 @@ set_background (CcBackgroundPanel *panel,
       g_settings_set_enum (settings, WP_OPTIONS_KEY, G_DESKTOP_BACKGROUND_STYLE_NONE);
       g_settings_set_string (settings, WP_URI_KEY, "");
     }
-  else if (cc_background_item_get_source_url (item) != NULL &&
-           cc_background_item_get_needs_download (item))
-    {
-      g_autoptr(GFile) source = NULL;
-      g_autoptr(GFile) dest = NULL;
-      g_autofree gchar *cache_path = NULL;
-      g_autofree gchar *basename = NULL;
-      g_autofree gchar *display_name = NULL;
-      g_autofree gchar *dest_path = NULL;
-      g_autofree gchar *dest_uri = NULL;
-      g_autoptr(GdkPixbuf) pixbuf = NULL;
-
-      cache_path = bg_pictures_source_get_cache_path ();
-      if (g_mkdir_with_parents (cache_path, USER_DIR_MODE) < 0)
-        {
-          g_warning ("Failed to create directory '%s'", cache_path);
-          return;
-        }
-
-      dest_path = bg_pictures_source_get_unique_path (cc_background_item_get_source_url (item));
-      dest = g_file_new_for_path (dest_path);
-      source = g_file_new_for_uri (cc_background_item_get_source_url (item));
-      basename = g_file_get_basename (source);
-      display_name = g_filename_display_name (basename);
-      dest_path = g_file_get_path (dest);
-
-      /* create a blank image to use until the source image is ready */
-      pixbuf = gdk_pixbuf_new (GDK_COLORSPACE_RGB, TRUE, 8, 1, 1);
-      gdk_pixbuf_fill (pixbuf, 0x00000000);
-      gdk_pixbuf_save (pixbuf, dest_path, "png", NULL, NULL);
-
-      if (panel->copy_cancellable)
-        {
-          g_cancellable_cancel (panel->copy_cancellable);
-          g_cancellable_reset (panel->copy_cancellable);
-        }
-
-      if (panel->spinner)
-        {
-          gtk_widget_destroy (GTK_WIDGET (panel->spinner));
-          panel->spinner = NULL;
-        }
-
-      /* create a spinner while the file downloads */
-      panel->spinner = gtk_spinner_new ();
-      gtk_spinner_start (GTK_SPINNER (panel->spinner));
-      gtk_box_pack_start (GTK_BOX (WID ("bottom-hbox")), panel->spinner, FALSE,
-                          FALSE, 6);
-      gtk_widget_show (panel->spinner);
-
-      /* reference the panel in case it is removed before the copy is
-       * finished */
-      g_object_ref (panel);
-      g_object_set_data_full (G_OBJECT (source), "item", g_object_ref (item), g_object_unref);
-      g_object_set_data (G_OBJECT (source), "settings", settings);
-      g_file_copy_async (source, dest, G_FILE_COPY_OVERWRITE,
-                         G_PRIORITY_DEFAULT, panel->copy_cancellable,
-                         NULL, NULL,
-                         copy_finished_cb, panel);
-      dest_uri = g_file_get_uri (dest);
-
-      g_settings_set_string (settings, WP_URI_KEY, dest_uri);
-      g_object_set (G_OBJECT (item),
-                    "uri", dest_uri,
-                    "needs-download", FALSE,
-                    "name", display_name,
-                    NULL);
-
-      /* delay the updated drawing of the preview until the copy finishes */
-      save_settings = FALSE;
-    }
+//  else if (cc_background_item_get_source_url (item) != NULL &&
+//           cc_background_item_get_needs_download (item))
+//    {
+//      g_autoptr(GFile) source = NULL;
+//      g_autoptr(GFile) dest = NULL;
+//      g_autofree gchar *cache_path = NULL;
+//      g_autofree gchar *basename = NULL;
+//      g_autofree gchar *display_name = NULL;
+//      g_autofree gchar *dest_path = NULL;
+//      g_autofree gchar *dest_uri = NULL;
+//      g_autoptr(GdkPixbuf) pixbuf = NULL;
+//
+//      cache_path = bg_pictures_source_get_cache_path ();
+//      if (g_mkdir_with_parents (cache_path, USER_DIR_MODE) < 0)
+//        {
+//          g_warning ("Failed to create directory '%s'", cache_path);
+//          return;
+//        }
+//
+//      dest_path = bg_pictures_source_get_unique_path (cc_background_item_get_source_url (item));
+//      dest = g_file_new_for_path (dest_path);
+//      source = g_file_new_for_uri (cc_background_item_get_source_url (item));
+//      basename = g_file_get_basename (source);
+//      display_name = g_filename_display_name (basename);
+//      dest_path = g_file_get_path (dest);
+//
+//      /* create a blank image to use until the source image is ready */
+//      pixbuf = gdk_pixbuf_new (GDK_COLORSPACE_RGB, TRUE, 8, 1, 1);
+//      gdk_pixbuf_fill (pixbuf, 0x00000000);
+//      gdk_pixbuf_save (pixbuf, dest_path, "png", NULL, NULL);
+//
+//      if (panel->copy_cancellable)
+//        {
+//          g_cancellable_cancel (panel->copy_cancellable);
+//          g_cancellable_reset (panel->copy_cancellable);
+//        }
+//
+//      if (panel->spinner)
+//        {
+//          gtk_widget_destroy (GTK_WIDGET (panel->spinner));
+//          panel->spinner = NULL;
+//        }
+//
+//      /* create a spinner while the file downloads */
+////      panel->spinner = gtk_spinner_new ();
+////      gtk_spinner_start (GTK_SPINNER (panel->spinner));
+////      gtk_box_pack_start (GTK_BOX (WID ("bottom-hbox")), panel->spinner, FALSE,
+////                          FALSE, 6);
+////      gtk_widget_show (panel->spinner);
+//
+//      /* reference the panel in case it is removed before the copy is
+//       * finished */
+//      g_object_ref (panel);
+//      g_object_set_data_full (G_OBJECT (source), "item", g_object_ref (item), g_object_unref);
+//      g_object_set_data (G_OBJECT (source), "settings", settings);
+//      g_file_copy_async (source, dest, G_FILE_COPY_OVERWRITE,
+//                         G_PRIORITY_DEFAULT, panel->copy_cancellable,
+//                         NULL, NULL,
+//                         copy_finished_cb, panel);
+//      dest_uri = g_file_get_uri (dest);
+//
+//      g_settings_set_string (settings, WP_URI_KEY, dest_uri);
+//      g_object_set (G_OBJECT (item),
+//                    "uri", dest_uri,
+//                    "needs-download", FALSE,
+//                    "name", display_name,
+//                    NULL);
+//
+//      /* delay the updated drawing of the preview until the copy finishes */
+//      save_settings = FALSE;
+//    }
   else
     {
       g_settings_set_string (settings, WP_URI_KEY, uri);
@@ -520,51 +516,143 @@ set_background (CcBackgroundPanel *panel,
     }
 }
 
-static void
-on_chooser_dialog_response (GtkDialog         *dialog,
-                            int                response_id,
-                            CcBackgroundPanel *panel)
+static gboolean
+on_preview_draw (GtkWidget         *widget,
+                 cairo_t           *cr,
+                 CcBackgroundPanel *panel)
 {
-  if (response_id == GTK_RESPONSE_OK)
-    {
-      g_autoptr(CcBackgroundItem) item = NULL;
+  update_display_preview (panel, widget, panel->current_background);
 
-      item = cc_background_chooser_dialog_get_item (CC_BACKGROUND_CHOOSER_DIALOG (dialog));
-      if (item != NULL)
-          set_background (panel, g_object_get_data (G_OBJECT (dialog), "settings"), item);
-    }
+  return TRUE;
+}
 
-  gtk_widget_destroy (GTK_WIDGET (dialog));
+static gboolean
+on_lock_preview_draw (GtkWidget         *widget,
+                      cairo_t           *cr,
+                      CcBackgroundPanel *panel)
+{
+  update_display_preview (panel, widget, panel->current_lock_background);
+  return TRUE;
 }
 
 static void
-launch_chooser (CcBackgroundPanel *panel,
-                GSettings         *settings)
+on_select_background (CcBackgroundChooser     *chooser,
+                      CcBackgroundItem        *item,
+                      CcBackgroundPanel       *panel)
 {
-  GtkWidget *dialog;
-
-  dialog = cc_background_chooser_dialog_new (GTK_WINDOW (gtk_widget_get_toplevel (WID ("background-panel"))));
-  g_object_set_data (G_OBJECT (dialog), "settings", settings);
-  gtk_widget_show (dialog);
-  g_signal_connect (dialog, "response", G_CALLBACK (on_chooser_dialog_response), panel);
-  panel->chooser = dialog;
-  g_object_add_weak_pointer (G_OBJECT (dialog), (gpointer *) &panel->chooser);
+  switch (panel->applied_background) {
+    case APPLY_DESKTOP:
+      set_background (panel, panel->settings, item);
+    break;
+    case APPLY_LOCK:
+      set_background (panel, panel->lock_settings, item);
+    break;
+    default: // APPLY_ALL
+      set_background (panel, panel->settings, item);
+      set_background (panel, panel->lock_settings, item);
+  }
 }
 
 static void
-on_background_button_clicked (GtkButton         *button,
-                              CcBackgroundPanel *panel)
+set_visible_checked_icon (GtkWidget *thumbnail_box, GtkCssProvider *css, GtkWidget *overlay, gboolean visible)
 {
-  launch_chooser (panel, panel->settings);
+  GtkWidget *icon;
+
+  gtk_style_context_add_provider (gtk_widget_get_style_context (thumbnail_box),
+                                  GTK_STYLE_PROVIDER (css),
+                                  GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
+
+  icon = g_object_get_data (G_OBJECT (overlay), "selected-icon");
+  gtk_widget_set_visible (icon, visible);
 }
 
 static void
-on_lock_button_clicked (GtkButton         *button,
-                        CcBackgroundPanel *panel)
+on_type_changed (GtkComboBox       *combo_box,
+                 CcBackgroundPanel *panel)
+{
+  GtkWidget *stack, *box;
+
+  panel->background_mode = gtk_combo_box_get_active (combo_box);
+
+  box = panel->lock_box;
+  if (panel->background_mode == MODE_EACH) {
+    gtk_widget_set_visible (box, TRUE);
+
+    set_visible_checked_icon (panel->desktop_thumbnail_box,
+                              panel->selected_prov,
+                              panel->desktop_overlay,
+                              TRUE);
+
+    set_visible_checked_icon (panel->lock_thumbnail_box,
+                              panel->default_prov,
+                              panel->lock_overlay,
+                              FALSE);
+
+    panel->background_mode = MODE_EACH;
+    panel->applied_background = APPLY_DESKTOP;
+  }
+  else if (panel->background_mode == MODE_ALL) {
+    set_visible_checked_icon (panel->desktop_thumbnail_box,
+                              panel->default_prov,
+                              panel->desktop_overlay,
+                              FALSE);
+    set_visible_checked_icon (panel->lock_thumbnail_box,
+                              panel->default_prov,
+                              panel->lock_overlay,
+                              FALSE);
+
+    gtk_widget_set_visible (box, FALSE);
+
+    panel->applied_background = APPLY_ALL;
+  }
+}
+
+static gboolean
+on_desktop_press (GtkWidget         *widget,
+                  GdkEvent          *event,
+                  CcBackgroundPanel *panel)
+{
+  if (panel->background_mode == MODE_EACH) {
+    set_visible_checked_icon (panel->desktop_thumbnail_box,
+                              panel->selected_prov,
+                              panel->desktop_overlay,
+                              TRUE);
+    set_visible_checked_icon (panel->lock_thumbnail_box,
+                              panel->default_prov,
+                              panel->lock_overlay,
+                              FALSE);
+
+    panel->applied_background = APPLY_DESKTOP;
+  }
+
+  return FALSE;
+}
+
+static gboolean
+on_lock_press (GtkWidget         *widget,
+               GdkEvent          *event,
+               CcBackgroundPanel *panel)
 {
-  launch_chooser (panel, panel->lock_settings);
+  set_visible_checked_icon (panel->desktop_thumbnail_box,
+                            panel->default_prov,
+                            panel->desktop_overlay,
+                            FALSE);
+  set_visible_checked_icon (panel->lock_thumbnail_box,
+                            panel->selected_prov,
+                            panel->lock_overlay,
+                            TRUE);
+
+    gtk_style_context_add_provider (gtk_widget_get_style_context (panel->lock_thumbnail_box),
+                                    GTK_STYLE_PROVIDER (panel->selected_prov),
+                                    GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
+
+  panel->applied_background = APPLY_LOCK;
+
+  return FALSE;
 }
 
+
+
 static void
 on_settings_changed (GSettings         *settings,
                      gchar             *key,
@@ -574,62 +662,188 @@ on_settings_changed (GSettings         *settings,
   update_preview (panel, settings, NULL);
 }
 
+static GtkWidget*
+create_selected_icon_in_overlay (GtkOverlay *overlay, const gchar *icon_name)
+{
+  GtkWidget* icon;
+  icon = g_object_new (GTK_TYPE_IMAGE,
+                       "resource", CHECK_ICON,
+                       "pixel-size", 32,
+                       "halign", GTK_ALIGN_END,
+                       "valign", GTK_ALIGN_START,
+                       "visible", FALSE, NULL);
+
+  gtk_overlay_add_overlay (overlay, icon);
+  g_object_set_data_full (G_OBJECT (overlay), "selected-icon", g_object_ref (icon), g_object_unref);
+
+  return icon;
+}
+
 static void
-cc_background_panel_init (CcBackgroundPanel *panel)
+cc_background_panel_dispose (GObject *object)
 {
-  gchar *objects[] = {"background-panel", NULL };
-  g_autoptr(GError) err = NULL;
-  GtkWidget *widget;
+  CcBackgroundPanel *panel = CC_BACKGROUND_PANEL (object);
 
-  panel->connection = g_application_get_dbus_connection (g_application_get_default ());
-  g_resources_register (cc_background_get_resource ());
+  /* destroying the builder object will also destroy the spinner */
+  panel->spinner = NULL;
 
-  panel->builder = gtk_builder_new ();
-  gtk_builder_add_objects_from_resource (panel->builder,
-                                         "/org/gnome/control-center/background/background.ui",
-                                         objects, &err);
+  g_clear_object (&panel->settings);
+  g_clear_object (&panel->lock_settings);
 
-  if (err)
+  if (panel->copy_cancellable)
     {
-      g_warning ("Could not load ui: %s", err->message);
-      return;
+      /* cancel any copy operation */
+      g_cancellable_cancel (panel->copy_cancellable);
+
+      g_clear_object (&panel->copy_cancellable);
     }
 
+  if (panel->chooser)
+    {
+      gtk_widget_destroy (panel->chooser);
+      panel->chooser = NULL;
+    }
+
+  g_clear_object (&panel->thumb_factory);
+
+  g_clear_object (&panel->provider);
+  g_clear_object (&panel->selected_prov);
+  g_clear_object (&panel->default_prov);
+
+  G_OBJECT_CLASS (cc_background_panel_parent_class)->dispose (object);
+}
+
+static void
+cc_background_panel_finalize (GObject *object)
+{
+  CcBackgroundPanel *panel = CC_BACKGROUND_PANEL (object);
+
+  g_clear_object (&panel->current_background);
+  g_clear_object (&panel->current_lock_background);
+
+  G_OBJECT_CLASS (cc_background_panel_parent_class)->finalize (object);
+}
+
+static void
+cc_background_panel_constructed (GObject *object)
+{
+  CcBackgroundPanel *panel = CC_BACKGROUND_PANEL (object);
+
+  G_OBJECT_CLASS (cc_background_panel_parent_class)->constructed (object);
+
+  /* Add check icon */
+  create_selected_icon_in_overlay (GTK_OVERLAY (panel->desktop_overlay),
+                                   "control-center-checked");
+
+
+  create_selected_icon_in_overlay (GTK_OVERLAY (panel->lock_overlay),
+                                   "control-center-checked");
+
+//  gtk_style_context_add_class (gtk_widget_get_style_context (panel->desktop_label), "mode-label");
+
+  /* Add press event to overlay */
+  gtk_widget_add_events (panel->desktop_eventbox, GDK_BUTTON_PRESS_MASK);
+  gtk_widget_add_events (panel->lock_eventbox, GDK_BUTTON_PRESS_MASK);
+
+  g_signal_connect (panel->desktop_eventbox, "button-press-event", G_CALLBACK (on_desktop_press), panel);
+  g_signal_connect (panel->lock_eventbox, "button-press-event", G_CALLBACK (on_lock_press), panel);
+
+  gtk_combo_box_set_active (GTK_COMBO_BOX (panel->type_select_combobox), MODE_EACH);
+}
+
+static void
+cc_background_panel_class_init (CcBackgroundPanelClass *klass)
+{
+  GObjectClass   *object_class = G_OBJECT_CLASS (klass);
+  CcPanelClass   *panel_class  = CC_PANEL_CLASS (klass);
+  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);
+
+  g_type_ensure (CC_TYPE_BACKGROUND_CHOOSER);
+
+  panel_class->get_help_uri = cc_background_panel_get_help_uri;
+
+  object_class->constructed = cc_background_panel_constructed;
+  object_class->dispose = cc_background_panel_dispose;
+  object_class->finalize = cc_background_panel_finalize;
+
+  gtk_widget_class_set_template_from_resource (widget_class, "/org/gnome/control-center/background/background.ui");
+
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundPanel, scrolled_view);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundPanel, type_label);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundPanel, type_select_combobox);
+
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundPanel, desktop_thumbnail_box);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundPanel, desktop_eventbox);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundPanel, desktop_overlay);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundPanel, desktop_image);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundPanel, desktop_label);
+
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundPanel, lock_box);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundPanel, lock_thumbnail_box);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundPanel, lock_eventbox);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundPanel, lock_overlay);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundPanel, lock_image);
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundPanel, lock_label);
+
+  gtk_widget_class_bind_template_child (widget_class, CcBackgroundPanel, chooser);
+
+  gtk_widget_class_bind_template_callback (widget_class, on_type_changed);
+  gtk_widget_class_bind_template_callback (widget_class, on_select_background);
+}
+
+static void
+cc_background_panel_init (CcBackgroundPanel *panel)
+{
+  GFile *file = NULL;
+
+  g_resources_register (cc_background_get_resource ());
+
+  gtk_widget_init_template (GTK_WIDGET (panel));
+
+  /* set provider */
+  panel->provider = gtk_css_provider_new ();
+  gtk_style_context_add_provider_for_screen (gdk_screen_get_default (),
+                  GTK_STYLE_PROVIDER (panel->provider),
+                  GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
+
+  panel->selected_prov = gtk_css_provider_new ();
+  gtk_css_provider_load_from_data (panel->selected_prov,
+".thumbnail-box {"
+"background-color: #3986e1;"
+"}", -1, NULL);
+
+  panel->default_prov = gtk_css_provider_new ();
+  gtk_css_provider_load_from_data (panel->default_prov,
+".thumbnail-box {"
+"background-color: rgba(201,201,201,0.0);"
+"}", -1, NULL);
+
+  file = g_file_new_for_uri ("resource:///org/gnome/control-center/background/style.css");
+  gtk_css_provider_load_from_file (panel->provider, file, NULL);
+  g_object_unref (file);
+
+  panel->background_mode = MODE_EACH;
+  panel->applied_background = APPLY_DESKTOP;
+
+  panel->connection = g_application_get_dbus_connection (g_application_get_default ());
+  g_resources_register (cc_background_get_resource ());
+
   panel->settings = g_settings_new (WP_PATH_ID);
   g_settings_delay (panel->settings);
 
   panel->lock_settings = g_settings_new (WP_LOCK_PATH_ID);
   g_settings_delay (panel->lock_settings);
 
-  /* add the top level widget */
-  widget = WID ("background-panel");
-
-  gtk_container_add (GTK_CONTAINER (panel), widget);
-  gtk_widget_show_all (GTK_WIDGET (panel));
-
-  /* setup preview area */
-  widget = WID ("background-desktop-drawingarea");
-  g_signal_connect (widget, "draw", G_CALLBACK (on_preview_draw), panel);
-  widget = WID ("background-lock-drawingarea");
-  g_signal_connect (widget, "draw", G_CALLBACK (on_lock_preview_draw), panel);
-
   panel->copy_cancellable = g_cancellable_new ();
-
   panel->thumb_factory = gnome_desktop_thumbnail_factory_new (GNOME_DESKTOP_THUMBNAIL_SIZE_LARGE);
 
+  /* Background settings */
+  g_signal_connect (panel->settings, "changed", G_CALLBACK (on_settings_changed), panel);
+  g_signal_connect (panel->lock_settings, "changed", G_CALLBACK (on_settings_changed), panel);
+
   /* Load the backgrounds */
   reload_current_bg (panel, panel->settings);
   update_preview (panel, panel->settings, NULL);
   reload_current_bg (panel, panel->lock_settings);
   update_preview (panel, panel->lock_settings, NULL);
-
-  /* Background settings */
-  g_signal_connect (panel->settings, "changed", G_CALLBACK (on_settings_changed), panel);
-  g_signal_connect (panel->lock_settings, "changed", G_CALLBACK (on_settings_changed), panel);
-
-  /* Background buttons */
-  widget = WID ("background-set-button");
-  g_signal_connect (widget, "clicked", G_CALLBACK (on_background_button_clicked), panel);
-  widget = WID ("background-lock-set-button");
-  g_signal_connect (widget, "clicked", G_CALLBACK (on_lock_button_clicked), panel);
 }
diff --git a/panels/background/check-icon.svg b/panels/background/check-icon.svg
new file mode 100644
index 0000000..7df3f10
--- /dev/null
+++ b/panels/background/check-icon.svg
@@ -0,0 +1,6 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
+    <g fill="none" fill-rule="evenodd">
+        <path fill="#3986E1" d="M0 0H32V32H0z"/>
+        <path fill="#FFF" d="M24 9.333L25.172 10.505 12.586 23.104 6.667 17.172 7.839 16 12.586 20.734z"/>
+    </g>
+</svg>
diff --git a/panels/background/color-check-icon.svg b/panels/background/color-check-icon.svg
new file mode 100644
index 0000000..c8e6c6c
--- /dev/null
+++ b/panels/background/color-check-icon.svg
@@ -0,0 +1,6 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
+    <g fill="none" fill-rule="evenodd">
+        <path d="M0 0H24V24H0z"/>
+        <path fill="#FFF" d="M21 4.5L22.318 5.818 8.159 19.992 1.5 13.318 2.818 12 8.159 17.326z"/>
+    </g>
+</svg>
diff --git a/panels/background/meson.build b/panels/background/meson.build
index bb34b69..1e2100e 100644
--- a/panels/background/meson.build
+++ b/panels/background/meson.build
@@ -59,7 +59,13 @@ common_sources += gnome.mkenums(
   vtail: '      { 0, NULL, NULL }\n    };\n    etype = g_@type@_register_static ("@EnumName@", values);\n  }\n  return etype;\n}\n'
 )
 
-resource_data = files('background.ui')
+resource_data = files(
+  'background-chooser.ui',
+  'background.ui',
+  'color-check-icon.svg',
+  'check-icon.svg',
+  'style.css',
+)
 
 common_sources += gnome.compile_resources(
   'cc-@0@-resources'.format(cappletname),
@@ -70,14 +76,16 @@ common_sources += gnome.compile_resources(
 )
 
 sources = common_sources + files(
-  'bg-colors-source.c',
-  'bg-pictures-source.c',
   'bg-source.c',
   'bg-wallpapers-source.c',
-  'cc-background-chooser-dialog.c',
+  'bg-recent-source.c',
+  'bg-colors-source.c',
+  'bg-pictures-source.c',
+#  'cc-background-chooser-dialog.c',
+  'cc-background-chooser.c',
   'cc-background-grilo-miner.c',
   'cc-background-item.c',
-  'cc-background-xml.c'
+  'cc-background-xml.c',
 )
 
 deps = common_deps + [
@@ -114,13 +122,13 @@ panels_libs += static_library(
   link_with: libbackground_chooser
 )
 
-test_name = 'test-chooser-dialog'
-
-executable(
-  test_name,
-  test_name + '.c',
-  include_directories: top_inc,
-  dependencies: deps,
-  c_args: cflags,
-  link_with: libbackground_chooser
-)
+#test_name = 'test-chooser-dialog'
+#
+#executable(
+#  test_name,
+#  test_name + '.c',
+#  include_directories: top_inc,
+#  dependencies: deps,
+#  c_args: cflags,
+#  link_with: libbackground_chooser
+#)
diff --git a/panels/background/style.css b/panels/background/style.css
new file mode 100644
index 0000000..4b6abd9
--- /dev/null
+++ b/panels/background/style.css
@@ -0,0 +1,24 @@
+.mode-label {
+  font-family: NotoSansCJKkr;
+  font-size: 13px;
+
+  background-color: #eaeaea;
+}
+
+.main-label {
+  font-family: NotoSansCJKkr;
+  font-size: 20px;
+  font-weight: bold;
+}
+
+scrolledwindow {
+  border-width: 0px;
+}
+
+.chooser-button {
+  border-width: 0px;
+  font-family: NotoSansCJKkr;
+  color: #1b6ed0;
+
+  background-color: rgba(0, 0, 0, 0);
+}
diff --git a/panels/themes/cc-themes-panel.c b/panels/themes/cc-themes-panel.c
index afb365a..23fbff2 100644
--- a/panels/themes/cc-themes-panel.c
+++ b/panels/themes/cc-themes-panel.c
@@ -18,24 +18,24 @@
  *
  */
 
-#include "cc-themes-panel.h"
-#include "cc-themes-resources.h"
-
 #include <config.h>
 #include <gtk/gtk.h>
 
 #include <glib/gi18n.h>
 #include <glib/gstdio.h>
 
+#include "cc-themes-resources.h"
+#include "cc-themes-panel.h"
+#include "cc-themes-theme.h"
+
 #define DEFAULT_GTK_THEME   "Default"
 #define DEFAULT_WM_THEME    "Default"
 #define DEFAULT_ICON_THEME  "Rodent"
 
 #define DEFAULT_THEME_DIR    "/usr/share/icons"
 #define DEFAULT_THEMES_INI   "/usr/share/gnome-control-center/themes/gooroom-themes.ini"
+#define ROW_LENGTH            2
 
-#define WID(y) (GtkWidget *) gtk_builder_get_object (panel->builder, y)
- 
 enum
 {
   COL_THUMBNAIL,
@@ -50,19 +50,13 @@ struct _CcThemesPanel
 {
   CcPanel           parent_instance;
 
-  GtkBuilder        *builder;
+  GtkWidget         *themes_box;
+
+  CcThemesTheme     *current_theme;
 
   GSettings         *interface_settings;
   GSettings         *bg_settings;
   GSettings         *screensaver_settings;
-
-  GtkIconView       *icon_view;
-  GtkListStore      *themes_liststore;
-  GtkWidget         *current_theme_label;
-
-  GdkPixbuf         *current_theme_thumbnail;
-  gchar             *icon;
-  gchar             *background;
 };
 
 CC_PANEL_REGISTER (CcThemesPanel, cc_themes_panel)
@@ -74,213 +68,155 @@ cc_themes_panel_get_help_uri (CcPanel *panel)
 }
 
 static void
-set_thumbnail (CcThemesPanel *panel, gchar *thumb_path)
+cc_themes_panel_selected_theme (CcThemesTheme *theme,
+                                GdkEvent *event,
+                                CcThemesPanel *panel)
 {
-  GdkPixbuf *old_pixbuf;
-  old_pixbuf = panel->current_theme_thumbnail;
-  gint width;
-  gint height;
+  gchar *icon;
+  gchar *background;
 
-  if (panel->current_theme_thumbnail != NULL)
-  {
-    g_clear_object (&panel->current_theme_thumbnail);
-    panel->current_theme_thumbnail = NULL;
-  }
+  if (panel->current_theme == theme)
+    return;
 
-  panel->current_theme_thumbnail = gdk_pixbuf_new_from_file (thumb_path, NULL);
-}
+  g_object_get (G_OBJECT (theme), "icon", &icon, NULL);
+  g_object_get (G_OBJECT (theme), "background", &background, NULL);
 
-static GtkListStore*
-create_store (void)
-{
-  GtkListStore *store;
-
-  store = gtk_list_store_new (NUM_COLS,
-                              GDK_TYPE_PIXBUF,
-                              G_TYPE_STRING,
-                              G_TYPE_STRING,
-                              G_TYPE_STRING,
-                              G_TYPE_STRING);
-  return store;
+  g_settings_set_string (panel->bg_settings, "picture-uri", background);
+  g_settings_set_string (panel->interface_settings, "icon-theme", icon);
+
+  if (panel->current_theme)
+    g_object_set (G_OBJECT (panel->current_theme), "active", FALSE, NULL);
+
+  g_object_set (G_OBJECT (theme), "active", TRUE, NULL);
+
+  panel->current_theme = theme;
 }
 
-static void
-set_theme_liststore (GtkListStore *store, GKeyFile *keyfile, gchar *group)
+static CcThemesTheme*
+create_theme (CcThemesPanel *panel, GKeyFile *keyfile, gchar *group)
 {
   gchar *name;
   gchar *background;
   gchar *icon;
-  gchar *thumb_path;
+  gchar *thumbnail;
   g_autoptr(GError) error = NULL;
   GtkTreeIter iter;
-  
+  CcThemesTheme *theme;
 
-  name = g_key_file_get_locale_string (keyfile, group, "Name", NULL, NULL);
-  background = g_key_file_get_value (keyfile, group, "Background", NULL);
-  icon = g_key_file_get_value (keyfile, group, "Icon", &error);
-  if (icon == NULL) {
-    g_warning ("Error icon:%s", error->message);
-    return;
+  name = g_key_file_get_locale_string (keyfile, group, "Name", NULL, &error);
+  if (error) {
+    g_warning ("Empty Name in ini file: %s", error->message);
+    return NULL;
   }
 
-  thumb_path = g_strdup_printf ("%s/%s/thumbnail.png", DEFAULT_THEME_DIR, icon);
-
-  gtk_list_store_append (store, &iter);
-  gtk_list_store_set (store, &iter,
-                      COL_THUMBNAIL, gdk_pixbuf_new_from_file_at_size (thumb_path, 180, 110, NULL),
-                      COL_NAME, name ? name : NULL,
-                      COL_ICON, icon ? icon : NULL,
-                      COL_BACKGROUND, background ? background : NULL,
-                      COL_THUMB_PATH, thumb_path, -1);
-}
-
-static GtkListStore *
-load_themes_liststore (CcThemesPanel *panel)
-{
-  GtkListStore *store;
-  g_autoptr(GError) error = NULL;
-  g_autoptr(GKeyFile) keyfile = g_key_file_new ();
-  gchar **groups = NULL;
-  gsize group_length;
-
-  if (!g_key_file_load_from_file (keyfile, DEFAULT_THEMES_INI, G_KEY_FILE_KEEP_TRANSLATIONS, &error))
-  {
-    g_warning ("Error loading default-themes.ini: %s", error->message);
+  background = g_key_file_get_value (keyfile, group, "Background", &error);
+  if (error) {
+    g_warning ("Empty Background in ini file: %s", error->message);
     return NULL;
   }
 
-  store = create_store ();
-
-  groups = g_key_file_get_groups (keyfile, &group_length);
-  for (int i = 0; i < group_length; i++)
-  {
-    set_theme_liststore (store, keyfile, groups[i]);
+  icon = g_key_file_get_value (keyfile, group, "Icon", &error);
+  if (error) {
+    g_warning ("Empty Icon in ini file: %s", error->message);
+    return NULL;
   }
 
-  return store;
-}
-
-static gboolean
-cc_themes_panel_draw_theme (GtkWidget *widget, cairo_t *cr, gpointer data)
-{
-  GdkPixbuf *pixbuf;
-  CcThemesPanel *panel = CC_THEMES_PANEL (data);
-  cairo_t *_cr;
-  GdkRGBA color;
-
-  color.red = 1.0;
-  color.green = 1.0;
-  color.blue = 1.0;
-  color.alpha = 1.0;
- 
-  _cr = gdk_cairo_create (gtk_widget_get_window (widget));
-
-  /* border color */
-  gdk_cairo_set_source_rgba (_cr, &color);
+  thumbnail = g_strdup_printf ("%s/%s/thumbnail.png", DEFAULT_THEME_DIR, icon);
 
-  if (panel->current_theme_thumbnail)
-  {
-    pixbuf = gdk_pixbuf_scale_simple (panel->current_theme_thumbnail, 302, 181, GDK_INTERP_BILINEAR);
-    gdk_cairo_set_source_pixbuf (_cr, pixbuf, 20, 22);
-  }
+  theme = cc_themes_theme_new ();
+  g_object_set (G_OBJECT (theme),
+                "label-text", name,
+                "icon", icon,
+                "background", background,
+                "thumbnail", thumbnail, NULL);
 
-  cairo_paint (_cr);
-  cairo_destroy (_cr);
+  g_signal_connect (theme, "button-press-event", G_CALLBACK (cc_themes_panel_selected_theme), panel);
 
-  return FALSE;
+  return theme;
 }
 
-static void 
-cc_themes_panel_selected_theme (GtkIconView *icon_view,
-                                CcThemesPanel *panel)
+static GtkWidget *
+create_child_box ()
 {
-  GList *list;
-  GtkTreeModel *model;
-  GtkTreeIter iter;
-  gchar *icon_name;
-  gchar *background;
-  gchar *thumb_path;
+  GtkWidget *child_box;
 
-  list = gtk_icon_view_get_selected_items (icon_view);
-  if (list == NULL)
-    return;
+  child_box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 10);
+  gtk_widget_set_halign (child_box, GTK_ALIGN_START);
 
-  model = gtk_icon_view_get_model (icon_view);
-
-  if (gtk_tree_model_get_iter (model, &iter, (GtkTreePath*)list->data) == FALSE)
-    goto bail;
-
-  gtk_tree_model_get (model, &iter,
-                      COL_ICON, &icon_name,
-                      COL_BACKGROUND, &background,
-                      COL_THUMB_PATH, &thumb_path, -1);
-
-  set_thumbnail (panel, thumb_path);
-
-  g_settings_set_string (panel->interface_settings, "icon-theme", icon_name);
-  g_settings_set_string (panel->bg_settings, "picture-uri", background);
-
-bail:
-  g_list_free_full (list, (GDestroyNotify) gtk_tree_path_free);
+  gtk_widget_show (child_box);
 
+  return child_box;
 }
 
-static gboolean
-cc_themes_panel_apply_theme (GtkButton *button, CcThemesPanel *panel)
+static void
+load_themes (CcThemesPanel *panel)
 {
-  GList *list;
-  GtkTreeModel *model;
-  GtkTreeIter iter;
-  gchar *icon;
-  gchar *icon_name;
-  gchar *background;
+  GtkWidget *child_box;
+  g_autofree gchar *icon;
+  gchar **groups = NULL;
+  gsize group_length;
+  gint row = ROW_LENGTH;
+  g_autoptr(GError) error = NULL;
+  g_autoptr(GKeyFile) keyfile = g_key_file_new ();
 
-  list = gtk_icon_view_get_selected_items (panel->icon_view);
-  if (list == NULL)
-    return FALSE;
+  if (!g_key_file_load_from_file (keyfile, DEFAULT_THEMES_INI, G_KEY_FILE_KEEP_TRANSLATIONS, &error))
+  {
+    g_warning ("Error loading default-themes.ini: %s", error->message);
+    return;
+  }
 
-  model = gtk_icon_view_get_model (panel->icon_view);
-  if (gtk_tree_model_get_iter (GTK_TREE_MODEL (model), &iter, (GtkTreePath*)list->data) == FALSE)
-    goto bail;
+  icon = g_settings_get_string (panel->interface_settings, "icon-theme");
 
-  gtk_tree_model_get (GTK_TREE_MODEL (model), &iter,
-                      COL_NAME, &icon_name,
-                      COL_ICON, &icon,
-                      COL_BACKGROUND, &background, -1);
+  child_box = create_child_box ();
+  groups = g_key_file_get_groups (keyfile, &group_length);
+  for (int i = 1; i <= group_length; i++)
+  {
+    CcThemesTheme *theme= create_theme (panel, keyfile, groups[i - 1]);
+    if (!theme)
+      continue;
 
-  panel->icon = icon;
-  panel->background =  background;
+    gtk_box_pack_start (GTK_BOX (child_box), GTK_WIDGET (theme), TRUE, FALSE, 0);
+    if (i %  row == 0) {
+      gtk_box_pack_start (GTK_BOX (panel->themes_box), child_box, TRUE, FALSE, 0);
 
-  g_settings_set_string (panel->screensaver_settings, "picture-uri", background);
+      child_box = create_child_box ();
+      gtk_widget_set_margin_top (child_box, 20);
+    }
 
-  //gtk_label_set_text (WID ("current-theme-label"), icon_name);
-  gtk_label_set_text (GTK_LABEL (panel->current_theme_label), icon_name);
+    if (g_strcmp0 (icon, cc_themes_theme_get_icon (theme)) == 0) {
+      g_object_set (G_OBJECT (theme), "active", TRUE, NULL);
+      panel->current_theme = theme;
+    }
+  }
 
-bail:
-  g_list_free_full (list, (GDestroyNotify) gtk_tree_path_free);
+  gtk_box_pack_start (GTK_BOX (panel->themes_box), child_box, TRUE, FALSE, 0);
 
-return FALSE;
+  g_strfreev (groups);
 }
 
-static void
-cc_themes_panel_constructed (GObject *object)
+static GtkWidget *
+theme_item_widget_new (CcThemesPanel *panel, gchar *name, gchar *path)
 {
-  CcThemesPanel *panel = CC_THEMES_PANEL (object);
-  CcShell *shell;
-  GtkWidget *button;
+  GtkWidget *box;
+  GtkWidget *image;
+  GtkWidget *label;
+  GdkPixbuf *pixbuf;
+  g_autoptr(GError)  error = NULL;
 
-  G_OBJECT_CLASS (cc_themes_panel_parent_class)->constructed (object);
+  pixbuf = gdk_pixbuf_new_from_file_at_size (path, 300, 188, &error);
+  if (error) {
+    g_warning ("Error pixbuf new: %s", error->message);
+    return NULL;
+  }
 
-  button = (GtkWidget *)gtk_button_new_with_mnemonic (_("_Apply"));
-  gtk_widget_set_visible (button, TRUE);
+  image = gtk_image_new_from_pixbuf (pixbuf);
+  label = gtk_label_new (name);
+  box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 4);
 
-  shell = cc_panel_get_shell (CC_PANEL (panel));
-  cc_shell_embed_widget_in_header (shell, button);
+  gtk_box_pack_start (GTK_BOX (box), image, TRUE, TRUE, 0);
+  gtk_box_pack_start (GTK_BOX (box), label, FALSE, TRUE, 0);
 
-  g_signal_connect (button,
-                    "clicked",
-                    G_CALLBACK (cc_themes_panel_apply_theme),
-                    panel);
+  return box;
 }
 
 static void
@@ -288,129 +224,48 @@ cc_themes_panel_dispose (GObject *object)
 {
   CcThemesPanel *panel = CC_THEMES_PANEL (object);
 
-  if (panel->interface_settings)
-    g_settings_set_string (panel->interface_settings, "icon-theme", panel->icon);
-  if (panel->bg_settings)
-    g_settings_set_string (panel->bg_settings, "picture-uri", panel->background);
-
   g_clear_object (&panel->interface_settings);
   g_clear_object (&panel->bg_settings);
   g_clear_object (&panel->screensaver_settings);
-  g_clear_object (&panel->builder);
-
-  g_clear_object (&panel->current_theme_thumbnail);
 
   G_OBJECT_CLASS (cc_themes_panel_parent_class)->dispose (object);
 }
 
+static void
+cc_themes_panel_constructed (GObject *object)
+{
+  CcThemesPanel *panel = CC_THEMES_PANEL (object);
+
+  load_themes (panel);
+}
+
 static void
 cc_themes_panel_class_init (CcThemesPanelClass *klass)
 {
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
-  CcPanelClass *panel_class = CC_PANEL_CLASS (klass);
+  GObjectClass   *object_class = G_OBJECT_CLASS (klass);
+  CcPanelClass   *panel_class  = CC_PANEL_CLASS (klass);
+  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);
+
+  panel_class->get_help_uri = cc_themes_panel_get_help_uri;
 
-  object_class->constructed = cc_themes_panel_constructed;
   object_class->dispose = cc_themes_panel_dispose;
+  object_class->constructed = cc_themes_panel_constructed;
 
-  panel_class->get_help_uri = cc_themes_panel_get_help_uri;
+  gtk_widget_class_set_template_from_resource (widget_class, "/org/gnome/control-center/themes/themes.ui");
+
+  gtk_widget_class_bind_template_child (widget_class, CcThemesPanel, themes_box);
 }
 
 static void
 cc_themes_panel_init (CcThemesPanel *panel)
 {
-  gchar *objects[] = {"themes-main-scrolled-window", NULL};
-  g_autoptr(GError) err = NULL;
-  GtkWidget *w;
-  gint button_val;
-  gdouble i_val;
-  GtkWidget *themes_list_sw;
-  GtkTreeIter iter;
-  gchar *icon;
-  gchar *icon_name;
-  gchar *thumb_path;
-  gboolean ret = FALSE;
-
-  panel->current_theme_thumbnail = NULL;
-
   g_resources_register (cc_themes_get_resource ());
 
-  panel->builder = gtk_builder_new ();
-  gtk_builder_add_objects_from_resource (panel->builder,
-                                         "/org/gnome/control-center/themes/themes.ui",
-                                         objects, &err);
-
-  panel->current_theme_label = WID ("current-theme-label");
-
-  if (err)
-  {
-    g_warning ("Could not load ui: %s", err->message);
-    return;
-  }
+  gtk_widget_init_template (GTK_WIDGET (panel));
 
   panel->interface_settings = g_settings_new ("org.gnome.desktop.interface");
   panel->bg_settings = g_settings_new ("org.gnome.desktop.background");
   panel->screensaver_settings = g_settings_new ("org.gnome.desktop.screensaver");
 
-  panel->icon = g_settings_get_string (panel->interface_settings, "icon-theme");
-  panel->background = g_settings_get_string (panel->bg_settings, "picture-uri");
-
-  panel->themes_liststore = load_themes_liststore (panel);
-
-  /* init current thumbnail and current label */
-  ret = gtk_tree_model_get_iter_first (GTK_TREE_MODEL (panel->themes_liststore), &iter);
-  do
-  {
-    gtk_tree_model_get (GTK_TREE_MODEL (panel->themes_liststore), &iter,
-                        COL_NAME, &icon_name,
-                        COL_ICON, &icon,
-                        COL_THUMB_PATH, &thumb_path, -1);
-  
-    if (g_strcmp0 (panel->icon, icon) == 0)
-    {
-      set_thumbnail (panel, thumb_path); // /usr/.../.png
-      //gtk_label_set_text (WID ("current-theme-label"), icon_name);
-      gtk_label_set_text (GTK_LABEL (panel->current_theme_label), icon_name);
-
-      break;
-    }
-  
-  }
-  while (ret && gtk_tree_model_iter_next (GTK_TREE_MODEL (panel->themes_liststore), &iter));
-
-  /* create icon view from list store */
-  panel->icon_view = GTK_ICON_VIEW (gtk_icon_view_new_with_model (GTK_TREE_MODEL (panel->themes_liststore)));
-  gtk_icon_view_set_selection_mode (panel->icon_view,
-                                    GTK_SELECTION_SINGLE);
-
-  gtk_icon_view_set_text_column (panel->icon_view, COL_NAME);
-
-  gtk_icon_view_set_pixbuf_column (panel->icon_view, COL_THUMBNAIL);
-  gtk_icon_view_set_columns (panel->icon_view, 3);
-  gtk_icon_view_set_item_width (panel->icon_view, 120);
-  gtk_icon_view_set_column_spacing (panel->icon_view, 10);
-  gtk_icon_view_set_margin (panel->icon_view, 10);
-
-  g_signal_connect (WID ("current-theme-drawingarea"),
-                    "draw",
-                    G_CALLBACK(cc_themes_panel_draw_theme),
-                    panel);
-  g_signal_connect (panel->icon_view,
-                    "selection-changed",
-                    G_CALLBACK (cc_themes_panel_selected_theme),
-                    panel);
-
-  themes_list_sw = WID ("themes-list-sw");
-
-  gtk_scrolled_window_set_shadow_type (GTK_SCROLLED_WINDOW (themes_list_sw), GTK_SHADOW_ETCHED_IN);
-  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (themes_list_sw),
-                                  GTK_POLICY_AUTOMATIC,
-                                  GTK_POLICY_AUTOMATIC);
-
-  gtk_container_add (GTK_CONTAINER (themes_list_sw), GTK_WIDGET (panel->icon_view));
-  //gtk_widget_grab_focus (panel->icon_view);
-
-  w = WID ("themes-main-scrolled-window");
-
-  gtk_container_add (GTK_CONTAINER (panel), w);
-  gtk_widget_show_all (GTK_WIDGET (panel));
+  panel->current_theme = NULL;
 }
diff --git a/panels/themes/cc-themes-theme.c b/panels/themes/cc-themes-theme.c
new file mode 100644
index 0000000..fe4c1c2
--- /dev/null
+++ b/panels/themes/cc-themes-theme.c
@@ -0,0 +1,276 @@
+#include <config.h>
+
+#include "cc-themes-resources.h"
+#include "cc-themes-theme.h"
+
+#define CHECK_ICON  "/org/gnome/control-center/themes/check_icon"
+#define THUMBNAIL_WIDTH 300
+#define THUMBNAIL_HEIGHT 188
+
+struct _CcThemesTheme
+{
+  GtkBox       parent;
+
+  GtkCssProvider *provider;
+  GtkCssProvider *selected_prov;
+  GtkCssProvider *default_prov;
+
+  GtkWidget   *overlay;
+  GtkWidget   *thumbnail_box;
+  GtkWidget   *thumbnail_image;
+  GtkWidget   *label;
+
+  gchar       *icon;
+  gchar       *background;
+  gchar       *thumbnail_path;
+};
+
+enum {
+  PROP_LABEL = 1,
+  PROP_ICON,
+  PROP_BACKGROUND,
+  PROP_THUMBNAIL,
+  PROP_ACTIVE,
+};
+
+G_DEFINE_TYPE (CcThemesTheme, cc_themes_theme, GTK_TYPE_BOX)
+
+gchar *
+cc_themes_theme_get_icon (CcThemesTheme *self)
+{
+  return self->icon;
+}
+
+static void
+set_active (CcThemesTheme *self, gboolean active)
+{
+  GtkWidget *icon;
+  icon = g_object_get_data (G_OBJECT (self->overlay), "selected-icon");
+
+  if (active) {
+    gtk_style_context_add_provider (gtk_widget_get_style_context (self->thumbnail_box),
+                                    GTK_STYLE_PROVIDER (self->selected_prov),
+                                    GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
+  }
+  else {
+    gtk_style_context_add_provider (gtk_widget_get_style_context (self->thumbnail_box),
+                                    GTK_STYLE_PROVIDER (self->default_prov),
+                                    GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
+  }
+
+  gtk_widget_set_visible (icon, active);
+}
+
+static void
+set_name (CcThemesTheme *self, const gchar *value)
+{
+  gtk_label_set_text (GTK_LABEL (self->label), value);
+}
+
+static void
+set_icon (CcThemesTheme *self, const gchar *value)
+{
+  self->icon = g_strdup (value);
+}
+
+static void
+set_background_path (CcThemesTheme *self, const gchar *value)
+{
+  self->background = g_strdup (value);
+}
+
+static void
+set_thumbnail (CcThemesTheme *self, const gchar *value)
+{
+  GdkPixbuf *pixbuf;
+  GtkWidget *icon;
+  g_autoptr(GError)  error = NULL;
+
+  pixbuf = gdk_pixbuf_new_from_file_at_size (value, THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT, &error);
+  if (error) {
+    g_warning ("Error pixbuf new: %s", error->message);
+    return;
+  }
+
+  gtk_image_set_from_pixbuf (GTK_IMAGE (self->thumbnail_image), pixbuf);
+  self->thumbnail_path = g_strdup (value);
+
+  /* selection icon */
+  icon = g_object_new (GTK_TYPE_IMAGE,
+                       "resource", CHECK_ICON,
+                       "pixel-size", 32,
+                       "halign", GTK_ALIGN_END,
+                       "valign", GTK_ALIGN_START,
+                       "visible", FALSE, NULL);
+
+  gtk_overlay_add_overlay (GTK_OVERLAY (self->overlay), icon);
+  g_object_set_data_full (G_OBJECT (self->overlay), "selected-icon", g_object_ref (icon), g_object_unref);
+}
+
+static void
+cc_themes_theme_set_property (GObject       *object,
+                            guint          prop_id,
+                            const GValue  *value,
+                            GParamSpec    *pspec)
+{
+  CcThemesTheme *self = CC_THEMES_THEME (object);
+
+  switch (prop_id) {
+    case PROP_LABEL:
+      set_name (self, g_value_get_string (value));
+    break;
+    case PROP_ICON:
+      set_icon (self, g_value_get_string (value));
+    break;
+    case PROP_BACKGROUND:
+      set_background_path (self, g_value_get_string (value));
+    break;
+    case PROP_THUMBNAIL:
+      set_thumbnail (self, g_value_get_string (value));
+    break;
+    case PROP_ACTIVE:
+      set_active (self, g_value_get_boolean (value));
+    break;
+  }
+}
+
+static void
+cc_themes_theme_get_property (GObject       *object,
+                              guint          prop_id,
+                              GValue  *value,
+                              GParamSpec    *pspec)
+{
+  CcThemesTheme *self = CC_THEMES_THEME (object);
+
+  switch (prop_id) {
+    case PROP_ICON:
+      g_value_set_string (value, self->icon);
+    break;
+    case PROP_BACKGROUND:
+      g_value_set_string (value, self->background);
+    break;
+    case PROP_THUMBNAIL:
+      g_value_set_string (value, self->thumbnail_path);
+    break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+    break;
+  }
+}
+
+static void
+cc_themes_theme_finalize (GObject *object)
+{
+  CcThemesTheme *self = CC_THEMES_THEME (object);
+
+  g_free (self->icon);
+  g_free (self->background);
+  g_free (self->thumbnail_path);
+
+  g_clear_object (&self->provider);
+  g_clear_object (&self->selected_prov);
+  g_clear_object (&self->default_prov);
+}
+
+static void
+cc_themes_theme_constructed (GObject *object)
+{
+  CcThemesTheme *self = CC_THEMES_THEME (object);
+}
+
+static void
+cc_themes_theme_class_init (CcThemesThemeClass *klass)
+{
+  GObjectClass   *object_class = G_OBJECT_CLASS (klass);
+  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);
+
+  object_class->get_property = cc_themes_theme_get_property;
+  object_class->set_property = cc_themes_theme_set_property;
+  object_class->finalize = cc_themes_theme_finalize;
+  object_class->constructed = cc_themes_theme_constructed;
+
+  gtk_widget_class_set_template_from_resource (widget_class, "/org/gnome/control-center/themes/themes-theme.ui");
+
+  gtk_widget_class_bind_template_child (widget_class, CcThemesTheme, thumbnail_box);
+  gtk_widget_class_bind_template_child (widget_class, CcThemesTheme, overlay);
+  gtk_widget_class_bind_template_child (widget_class, CcThemesTheme, thumbnail_image);
+  gtk_widget_class_bind_template_child (widget_class, CcThemesTheme, label);
+
+  g_object_class_install_property (object_class,
+                                   PROP_LABEL,
+                                   g_param_spec_string ("label-text",
+                                                        "label-text",
+                                                        "label-text",
+                                                        NULL,
+                                                        G_PARAM_WRITABLE));
+
+  g_object_class_install_property (object_class,
+                                   PROP_ICON,
+                                   g_param_spec_string ("icon",
+                                                        "icon",
+                                                        "icon",
+                                                        NULL,
+                                                        G_PARAM_READWRITE));
+
+  g_object_class_install_property (object_class,
+                                   PROP_BACKGROUND,
+                                   g_param_spec_string ("background",
+                                                        "background",
+                                                        "background",
+                                                        NULL,
+                                                        G_PARAM_READWRITE));
+
+  g_object_class_install_property (object_class,
+                                   PROP_THUMBNAIL,
+                                   g_param_spec_string ("thumbnail",
+                                                        "thumbnail",
+                                                        "thumbnail",
+                                                        NULL,
+                                                        G_PARAM_READWRITE));
+
+  g_object_class_install_property (object_class,
+                                   PROP_ACTIVE,
+                                   g_param_spec_boolean ("active",
+                                                         "active",
+                                                         "active",
+                                                         FALSE,
+                                                         G_PARAM_WRITABLE));
+}
+
+static void
+cc_themes_theme_init (CcThemesTheme *self)
+{
+  GFile *file = NULL;
+  g_resources_register (cc_themes_get_resource ());
+
+  gtk_widget_init_template (GTK_WIDGET (self));
+
+  self->icon = NULL;
+  self->background = NULL;
+  self->provider = gtk_css_provider_new ();
+  gtk_style_context_add_provider_for_screen (gdk_screen_get_default (),
+                                             GTK_STYLE_PROVIDER (self->provider),
+                                             GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
+
+  self->selected_prov = gtk_css_provider_new ();
+  gtk_css_provider_load_from_data (self->selected_prov,
+".theme-box {"
+"background-color: #3986e1;"
+"}", -1, NULL);
+
+  self->default_prov = gtk_css_provider_new ();
+  gtk_css_provider_load_from_data (self->default_prov,
+".theme-box {"
+"background-color: rgba(201,201,201,0.0);"
+"}", -1, NULL);
+
+  file = g_file_new_for_uri ("resource://org/gnome/control-center/themes/style.css");
+  gtk_css_provider_load_from_file (self->provider, file, NULL);
+  g_object_unref (file);
+}
+
+CcThemesTheme *
+cc_themes_theme_new ()
+{
+  return CC_THEMES_THEME (g_object_new (CC_TYPE_THEMES_THEME, NULL));
+}
diff --git a/panels/themes/cc-themes-theme.h b/panels/themes/cc-themes-theme.h
new file mode 100644
index 0000000..2ebc679
--- /dev/null
+++ b/panels/themes/cc-themes-theme.h
@@ -0,0 +1,22 @@
+#pragma once
+
+#include <gtk/gtk.h>
+
+G_BEGIN_DECLS
+
+#define  CC_TYPE_THEMES_THEME          (cc_themes_theme_get_type ())
+#define  CC_THEMES_THEME(obj)          (G_TYPE_CHECK_INSTANCE_CAST ((obj), CC_TYPE_THEMES_THEME, CcThemesTheme))
+#define  CC_IS_THEME_BOX(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CC_TYPE_THEMES_THEME))
+
+//G_DECLARE_FINAL_TYPE (CcThemesTheme, cc_themes_theme, CC, THEME_BOX, GtkToggleButton)
+typedef struct _CcThemesTheme          CcThemesTheme;
+typedef struct _CcThemesThemeClass     CcThemesThemeClass;
+
+struct _CcThemesThemeClass {
+    GtkBoxClass  parent_class;
+};
+
+CcThemesTheme       *cc_themes_theme_new ();
+gchar               *cc_themes_theme_get_icon       (CcThemesTheme *self);
+
+G_END_DECLS
diff --git a/panels/themes/check-icon.svg b/panels/themes/check-icon.svg
new file mode 100644
index 0000000..7df3f10
--- /dev/null
+++ b/panels/themes/check-icon.svg
@@ -0,0 +1,6 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
+    <g fill="none" fill-rule="evenodd">
+        <path fill="#3986E1" d="M0 0H32V32H0z"/>
+        <path fill="#FFF" d="M24 9.333L25.172 10.505 12.586 23.104 6.667 17.172 7.839 16 12.586 20.734z"/>
+    </g>
+</svg>
diff --git a/panels/themes/meson.build b/panels/themes/meson.build
index bea1d6e..4285e33 100644
--- a/panels/themes/meson.build
+++ b/panels/themes/meson.build
@@ -18,11 +18,15 @@ i18n.merge_file(
 )
 
 sources = files(
+  'cc-themes-theme.c',
   'cc-themes-panel.c',
 )
 
 resource_data = files(
-  'themes.ui'
+  'themes.ui',
+  'themes-theme.ui',
+  'check-icon.svg',
+  'style.css',
 )
 
 sources += gnome.compile_resources(
diff --git a/panels/themes/style.css b/panels/themes/style.css
new file mode 100644
index 0000000..0599ba1
--- /dev/null
+++ b/panels/themes/style.css
@@ -0,0 +1,28 @@
+.tile-label {
+  font-family: NotoSansCJKkr;
+  font-size: 13px;
+
+  background-color: #eaeaea;
+}
+
+.theme-overlay {
+  background-color: rgba(201,201,201,0.0);
+}
+
+.theme-box {
+  background-color: rgba(201,201,201,0.0);
+}
+
+.theme-box:active {
+  background-color: #3986e1;
+}
+
+.title-label {
+  font-family: NotoSansCJKkr;
+  font-size: 20px;
+  font-weight: bold;
+}
+
+scrolledwindow {
+  border-width: 0px;
+}
diff --git a/panels/themes/themes-theme.ui b/panels/themes/themes-theme.ui
new file mode 100644
index 0000000..a49f58f
--- /dev/null
+++ b/panels/themes/themes-theme.ui
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.22.1 -->
+<interface>
+  <requires lib="gtk+" version="3.20"/>
+  <template class="CcThemesTheme" parent="GtkBox">
+    <property name="visible">True</property>
+    <property name="can_focus">False</property>
+    <property name="orientation">vertical</property>
+    <child>
+      <object class="GtkBox" id="thumbnail_box">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="orientation">vertical</property>
+        <child>
+          <object class="GtkEventBox">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="margin_left">3</property>
+            <property name="margin_right">3</property>
+            <property name="margin_top">3</property>
+            <property name="margin_bottom">3</property>
+            <child>
+              <object class="GtkOverlay" id="overlay">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <child>
+                  <object class="GtkImage" id="thumbnail_image">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="stock">gtk-missing-image</property>
+                  </object>
+                  <packing>
+                    <property name="index">-1</property>
+                  </packing>
+                </child>
+                <style>
+                  <class name="theme-overlay"/>
+                </style>
+              </object>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">True</property>
+            <property name="fill">True</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
+        <style>
+          <class name="theme-box"/>
+        </style>
+      </object>
+      <packing>
+        <property name="expand">True</property>
+        <property name="fill">True</property>
+        <property name="position">0</property>
+      </packing>
+    </child>
+    <child>
+      <object class="GtkLabel" id="label">
+        <property name="height_request">36</property>
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="margin_left">3</property>
+        <property name="margin_right">3</property>
+        <property name="margin_top">3</property>
+        <style>
+          <class name="tile-label"/>
+        </style>
+      </object>
+      <packing>
+        <property name="expand">False</property>
+        <property name="fill">True</property>
+        <property name="position">1</property>
+      </packing>
+    </child>
+  </template>
+</interface>
diff --git a/panels/themes/themes.gresource.xml b/panels/themes/themes.gresource.xml
index b3915eb..c0d119f 100644
--- a/panels/themes/themes.gresource.xml
+++ b/panels/themes/themes.gresource.xml
@@ -2,6 +2,9 @@
 <gresources>
   <gresource prefix="/org/gnome/control-center/themes">
     <file preprocess="xml-stripblanks">themes.ui</file>
+    <file preprocess="xml-stripblanks">themes-theme.ui</file>
+    <file alias="check_icon">check-icon.svg</file>
+    <file>style.css</file>
   </gresource>
 </gresources>
 
diff --git a/panels/themes/themes.ui b/panels/themes/themes.ui
index 086d6f0..c8082bf 100644
--- a/panels/themes/themes.ui
+++ b/panels/themes/themes.ui
@@ -2,114 +2,24 @@
 <!-- Generated with glade 3.22.1 -->
 <interface>
   <requires lib="gtk+" version="3.20"/>
-  <object class="GtkSizeGroup" id="sizegroup1">
-    <property name="mode">both</property>
-  </object>
-  <object class="GtkScrolledWindow" id="themes-main-scrolled-window">
+  <template class="CcThemesPanel" parent="CcPanel">
     <property name="visible">True</property>
-    <property name="can_focus">True</property>
-    <property name="shadow_type">in</property>
-    <property name="min_content_width">700</property>
-    <property name="min_content_height">400</property>
+    <property name="can_focus">False</property>
     <child>
-      <object class="GtkViewport">
+      <object class="GtkScrolledWindow">
         <property name="visible">True</property>
-        <property name="can_focus">False</property>
+        <property name="can_focus">True</property>
+        <property name="shadow_type">in</property>
         <child>
-          <object class="GtkBox">
+          <object class="GtkViewport" id="viewport">
             <property name="visible">True</property>
             <property name="can_focus">False</property>
-            <property name="hexpand">True</property>
-            <property name="vexpand">True</property>
-            <property name="orientation">vertical</property>
-            <property name="spacing">1</property>
-            <property name="baseline_position">top</property>
+            <property name="margin_left">30</property>
+            <property name="margin_right">30</property>
+            <property name="margin_top">20</property>
+            <property name="margin_bottom">20</property>
             <child>
-              <object class="GtkFixed">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <child>
-                  <object class="GtkBox">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="halign">start</property>
-                    <property name="valign">start</property>
-                    <child>
-                      <object class="GtkLabel">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="halign">start</property>
-                        <property name="valign">start</property>
-                        <property name="label" translatable="yes">Current Theme : </property>
-                        <attributes>
-                          <attribute name="weight" value="bold"/>
-                        </attributes>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="current-theme-label">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="halign">start</property>
-                        <property name="valign">start</property>
-                        <property name="label" translatable="yes">This theme is not listed.</property>
-                        <attributes>
-                          <attribute name="weight" value="bold"/>
-                        </attributes>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="x">10</property>
-                    <property name="y">13</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkBox">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="margin_top">22</property>
-                    <property name="orientation">vertical</property>
-                    <child>
-                      <object class="GtkDrawingArea" id="current-theme-drawingarea">
-                        <property name="width_request">330</property>
-                        <property name="height_request">234</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="margin_top">15</property>
-                        <property name="margin_bottom">10</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="x">208</property>
-                    <property name="y">10</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkBox" id="themes-list-box">
+              <object class="GtkBox">
                 <property name="visible">True</property>
                 <property name="can_focus">False</property>
                 <property name="orientation">vertical</property>
@@ -118,12 +28,10 @@
                     <property name="visible">True</property>
                     <property name="can_focus">False</property>
                     <property name="halign">start</property>
-                    <property name="valign">start</property>
-                    <property name="margin_left">25</property>
-                    <property name="label" translatable="yes">Theme List</property>
-                    <attributes>
-                      <attribute name="weight" value="bold"/>
-                    </attributes>
+                    <property name="label" translatable="yes">Themes</property>
+                    <style>
+                      <class name="title-label"/>
+                    </style>
                   </object>
                   <packing>
                     <property name="expand">False</property>
@@ -132,34 +40,32 @@
                   </packing>
                 </child>
                 <child>
-                  <object class="GtkScrolledWindow" id="themes-list-sw">
+                  <object class="GtkBox" id="themes_box">
                     <property name="visible">True</property>
                     <property name="can_focus">False</property>
-                    <property name="margin_left">25</property>
-                    <property name="margin_right">25</property>
-                    <property name="margin_top">10</property>
-                    <property name="margin_bottom">10</property>
-                    <property name="shadow_type">in</property>
+                    <property name="margin_top">40</property>
+                    <property name="orientation">vertical</property>
+                    <child>
+                      <placeholder/>
+                    </child>
+                    <child>
+                      <placeholder/>
+                    </child>
                     <child>
                       <placeholder/>
                     </child>
                   </object>
                   <packing>
-                    <property name="expand">True</property>
+                    <property name="expand">False</property>
                     <property name="fill">True</property>
                     <property name="position">1</property>
                   </packing>
                 </child>
               </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="position">2</property>
-              </packing>
             </child>
           </object>
         </child>
       </object>
     </child>
-  </object>
+  </template>
 </interface>
diff --git a/po/en.po b/po/en.po
index 2a49fbc..aa0f4a3 100644
--- a/po/en.po
+++ b/po/en.po
@@ -197,6 +197,7 @@ msgid "Solid Color"
 msgstr ""
 
 #: ../panels/background/cc-background-panel.c:747
+#: background-chooser.ui:14
 msgid "Wallpapers"
 msgstr ""
 
@@ -3394,3 +3395,59 @@ msgstr ""
 #: ../panels/themes/data/themes/gooroom-themes.ini:10
 msgid "Gooroom Icon Theme 3"
 msgstr ""
+
+#: background-chooser.ui:70
+msgid "Add Image"
+msgstr ""
+
+#: background.ui:379
+msgid "Apply same all screen"
+msgstr ""
+
+#: background.ui:375
+msgid "Apply each of home and lock screen"
+msgstr ""
+
+#: background.ui:67
+msgid "Background Type"
+msgstr ""
+
+#: background.ui:349
+msgctxt "background, style"
+msgid "Center"
+msgstr ""
+
+#: background.ui:164
+msgid "Home Background"
+msgstr ""
+
+#: background.ui:310
+msgid "Image"
+msgstr ""
+
+#: background.ui:243
+msgid "Lock Background"
+msgstr ""
+
+#: background-chooser.ui:39
+msgid "Select Background"
+msgstr ""
+
+#: background-chooser.ui:18
+msgid "Single Colors"
+msgstr ""
+
+#: background.ui:361
+msgctxt "background, style"
+msgid "Span"
+msgstr ""
+
+#: background.ui:341
+msgctxt "background, style"
+msgid "Tile"
+msgstr ""
+
+#: background.ui:345
+msgctxt "background, style"
+msgid "Zoom"
+msgstr ""
diff --git a/po/en_GB.po b/po/en_GB.po
index d8512dd..8de4add 100644
--- a/po/en_GB.po
+++ b/po/en_GB.po
@@ -68,6 +68,7 @@ msgid "Span"
 msgstr "Span"
 
 #: panels/background/cc-background-chooser-dialog.c:424
+#: background-chooser.ui:14
 msgid "Wallpapers"
 msgstr "Wallpapers"
 
@@ -77,6 +78,7 @@ msgstr "Colours"
 
 #. translators: This is the title of the wallpaper chooser dialog.
 #: panels/background/cc-background-chooser-dialog.c:468
+#: background-chooser.ui:39
 msgid "Select Background"
 msgstr "Select Background"
 
@@ -155,6 +157,7 @@ msgid "Current background"
 msgstr "Current background"
 
 #: panels/background/gnome-background-panel.desktop.in.in:3
+#: panels/background/background.ui:24
 msgid "Background"
 msgstr "Background"
 
@@ -856,8 +859,9 @@ msgid "D75"
 msgstr "D75"
 
 #: panels/color/gnome-color-panel.desktop.in.in:3
+#: panels/background/background.ui:314
 msgid "Color"
-msgstr "Colour"
+msgstr "Color"
 
 #: panels/color/gnome-color-panel.desktop.in.in:4
 msgid ""
@@ -11399,8 +11403,8 @@ msgstr "System Sounds"
 #~ msgid "Slide Show"
 #~ msgstr "Slide Show"
 
-#~ msgid "Image"
-#~ msgstr "Image"
+msgid "Image"
+msgstr "Image"
 
 #~ msgid ""
 #~ "<b>%s</b>\n"
@@ -13500,3 +13504,31 @@ msgstr "Gooroom Icon Theme 2"
 #: ../panels/themes/data/themes/gooroom-themes.ini:10
 msgid "Gooroom Icon Theme 3"
 msgstr "Gooroom Icon Theme 3"
+
+#: panels/background/background-chooser.ui:70
+msgid "Add Image"
+msgstr "Add Image"
+
+#: panels/background/background.ui:379
+msgid "Apply same all screen"
+msgstr "Apply same all screen"
+
+#: panels/background/background.ui:375
+msgid "Apply each of home and lock screen"
+msgstr "Apply each of home and lock screen"
+
+#: panels/background/background.ui:67
+msgid "Background Type"
+msgstr "Background Type"
+
+#: background.ui:164
+msgid "Home Background"
+msgstr "Home Background"
+
+#: panels/background/background.ui:243
+msgid "Lock Background"
+msgstr "Lock Background"
+
+#: panels/background/background-chooser.ui:18
+msgid "Single Colors"
+msgstr "Single Colors"
diff --git a/po/ko.po b/po/ko.po
index a85d6fb..d9efb70 100644
--- a/po/ko.po
+++ b/po/ko.po
@@ -7924,3 +7924,35 @@ msgstr "구름 테마 2"
 #: ../panels/themes/data/themes/gooroom-themes.ini:10
 msgid "Gooroom Icon Theme 3"
 msgstr "구름 테마 3"
+
+#: panels/background/background-chooser.ui:70
+msgid "Add Image"
+msgstr "이미지 추가하기"
+
+#: panels/background/background.ui:379
+msgid "Apply same all screen"
+msgstr "모든 화면 동일 적용"
+
+#: panels/background/background.ui:375
+msgid "Apply each of home and lock screen"
+msgstr "홈 화면과 잠금 화면 별도 적용"
+
+#: panels/background/background.ui:67
+msgid "Background Type"
+msgstr "배경화면 적용 타입"
+
+#: background.ui:164
+msgid "Home Background"
+msgstr "배경화면"
+
+#: panels/background/background.ui:310
+msgid "Image"
+msgstr "이미지"
+
+#: panels/background/background.ui:243
+msgid "Lock Background"
+msgstr "잠금화면"
+
+#: panels/background/background-chooser.ui:18
+msgid "Single Colors"
+msgstr "단일 색상"
-- 
2.20.1

