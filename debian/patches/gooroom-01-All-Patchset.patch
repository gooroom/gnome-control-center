From 374754f3020f5e8ad98c00acbc479b28f44ab290 Mon Sep 17 00:00:00 2001
From: donghun <donghun@gooroom.kr>
Date: Wed, 4 Mar 2020 12:01:52 +0900
Subject: [PATCH] gooroom-patches

Change-Id: Ic65e48a926c2348cbdfae59937bd435ab62126b5
---
 panels/color/color.ui                         |   4 +-
 panels/datetime/cc-datetime-panel.c           |   6 +-
 panels/datetime/datetime.ui                   |   4 +-
 panels/display/cc-display-panel.c             |   3 +
 panels/display/cc-night-light-dialog.c        |  16 +-
 panels/display/cc-night-light-dialog.ui       |  12 +-
 panels/font/cc-font-panel.c                   | 421 ++++++++
 panels/font/cc-font-panel.h                   |  32 +
 panels/font/font.gresource.xml                |   8 +
 panels/font/font.ui                           | 511 ++++++++++
 panels/font/gnome-font-panel.desktop.in.in    |  14 +
 panels/font/meson.build                       |  57 ++
 panels/info/cc-info-overview-panel.c          |   8 +-
 panels/info/cc-info-overview-panel.c.orig     | 942 ++++++++++++++++++
 panels/info/info-overview.ui                  |  32 -
 panels/meson.build                            |   6 +-
 panels/network/cc-wifi-panel.c                |   3 +-
 .../connection-editor/ce-page-ethernet.c      |   7 +-
 .../connection-editor/ethernet-page.ui        | 173 ++--
 panels/network/net-device-ethernet.c          |  62 +-
 panels/network/net-device-ethernet.h          |   2 +
 panels/power/cc-power-panel.c                 | 140 ++-
 panels/power/power.ui                         |   4 +
 panels/printers/cc-printers-panel.c           |  84 +-
 panels/printers/pp-printer-entry.c            |   6 +
 panels/printers/pp-printer-entry.h            |   2 +
 panels/printers/printers.ui                   |   5 +
 panels/region/cc-region-panel.c               | 829 ---------------
 panels/region/meson.build                     |   9 -
 panels/region/region.ui                       | 321 ------
 panels/search/cc-search-locations-dialog.c    |  50 +-
 panels/sound/gvc-channel-bar.c                |  20 +-
 panels/sound/gvc-mixer-dialog.c               |   4 -
 panels/themes/cc-themes-panel.c               | 487 +++++++++
 panels/themes/cc-themes-panel.h               |  32 +
 .../themes/gnome-themes-panel.desktop.in.in   |  14 +
 panels/themes/meson.build                     |  52 +
 panels/themes/themes.gresource.xml            |   7 +
 panels/themes/themes.ui                       | 180 ++++
 panels/thunderbolt/cc-bolt-panel.ui           |  16 +
 panels/universal-access/cc-ua-panel.c         | 147 ++-
 panels/universal-access/uap.ui                |  32 +-
 panels/user-accounts/meson.build              |   3 +-
 panels/user-accounts/pw-utils.c               |   4 +-
 panels/user-accounts/um-user-panel.c          |  28 +-
 panels/wacom/cc-wacom-panel.c                 |   3 +-
 po/POTFILES.in                                |   6 +
 po/en.po                                      | 133 +++
 po/en_GB.po                                   | 144 ++-
 po/ko.po                                      | 161 +++
 shell/cc-application.c                        |  27 +-
 shell/cc-panel-list.c                         |  46 +-
 shell/cc-panel-loader.c                       |  37 +-
 shell/cc-shell-model.c                        |  33 +-
 shell/org.gnome.ControlCenter.gschema.xml     |   5 +
 55 files changed, 3880 insertions(+), 1514 deletions(-)
 create mode 100644 panels/font/cc-font-panel.c
 create mode 100644 panels/font/cc-font-panel.h
 create mode 100644 panels/font/font.gresource.xml
 create mode 100644 panels/font/font.ui
 create mode 100644 panels/font/gnome-font-panel.desktop.in.in
 create mode 100644 panels/font/meson.build
 create mode 100644 panels/info/cc-info-overview-panel.c.orig
 create mode 100644 panels/themes/cc-themes-panel.c
 create mode 100644 panels/themes/cc-themes-panel.h
 create mode 100644 panels/themes/gnome-themes-panel.desktop.in.in
 create mode 100644 panels/themes/meson.build
 create mode 100644 panels/themes/themes.gresource.xml
 create mode 100644 panels/themes/themes.ui

diff --git a/panels/color/color.ui b/panels/color/color.ui
index 5798d7c..f7cce5d 100644
--- a/panels/color/color.ui
+++ b/panels/color/color.ui
@@ -828,7 +828,7 @@
                         <property name="position">1</property>
                       </packing>
                     </child>
-                    <child>
+                    <!--<child>
                       <object class="GtkLinkButton" id="linkbutton_help">
                         <property name="label" translatable="yes">Learn more</property>
                         <property name="visible">True</property>
@@ -848,7 +848,7 @@
                         <property name="fill">True</property>
                         <property name="position">2</property>
                       </packing>
-                    </child>
+                    </child>-->
                   </object>
                   <packing>
                     <property name="expand">False</property>
diff --git a/panels/datetime/cc-datetime-panel.c b/panels/datetime/cc-datetime-panel.c
index 880490a..51d5fc8 100644
--- a/panels/datetime/cc-datetime-panel.c
+++ b/panels/datetime/cc-datetime-panel.c
@@ -735,9 +735,9 @@ on_permission_changed (GPermission *permission,
 
   /* All the widgets but the lock button and the 24h setting */
   gtk_widget_set_sensitive (self->auto_datetime_row, allowed);
-  gtk_widget_set_sensitive (self->auto_timezone_row, allowed || tz_allowed);
-  gtk_widget_set_sensitive (self->datetime_button, allowed && !using_ntp);
-  gtk_widget_set_sensitive (self->timezone_button, (allowed || tz_allowed) && !auto_timezone);
+  gtk_widget_set_sensitive (self->auto_timezone_row, allowed);
+  gtk_widget_set_sensitive (self->datetime_button, allowed);
+  gtk_widget_set_sensitive (self->timezone_button, allowed);
 
   /* Hide the subdialogs if we no longer have permissions */
   if (!allowed)
diff --git a/panels/datetime/datetime.ui b/panels/datetime/datetime.ui
index 7ac24d7..6f9b545 100644
--- a/panels/datetime/datetime.ui
+++ b/panels/datetime/datetime.ui
@@ -330,7 +330,7 @@
                                 <property name="visible">True</property>
                                 <property name="can_focus">False</property>
                                 <property name="xalign">0</property>
-                                <property name="label" translatable="yes">Requires internet access</property>
+                                <property name="label" translatable="yes">Apply network time when connecting to the Internet</property>
                                 <style>
                                   <class name="dim-label"/>
                                 </style>
@@ -408,7 +408,7 @@
                                 <property name="visible">True</property>
                                 <property name="can_focus">False</property>
                                 <property name="xalign">0</property>
-                                <property name="label" translatable="yes">Requires internet access</property>
+                                <property name="label" translatable="yes">Apply network time when connecting to the Internet</property>
                                 <style>
                                   <class name="dim-label"/>
                                 </style>
diff --git a/panels/display/cc-display-panel.c b/panels/display/cc-display-panel.c
index f4716f7..1184021 100644
--- a/panels/display/cc-display-panel.c
+++ b/panels/display/cc-display-panel.c
@@ -1,6 +1,7 @@
 /*
  * Copyright (C) 2007, 2008  Red Hat, Inc.
  * Copyright (C) 2013 Intel, Inc.
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -1280,6 +1281,7 @@ make_two_output_chooser (CcDisplayPanel *panel)
   GtkWidget *box;
   GtkRadioButton *group;
   GList *outputs, *l;
+  gint number = 0;
 
   outputs = cc_display_config_get_ui_sorted_monitors (panel->current_config);
 
@@ -1293,6 +1295,7 @@ make_two_output_chooser (CcDisplayPanel *panel)
       CcDisplayMonitor *output = l->data;
       GtkWidget *button = gtk_radio_button_new_from_widget (group);
 
+      number = cc_display_monitor_get_ui_number (output);
       gtk_button_set_label (GTK_BUTTON (button), cc_display_monitor_get_ui_name (output));
       gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (button), FALSE);
 
diff --git a/panels/display/cc-night-light-dialog.c b/panels/display/cc-night-light-dialog.c
index 834dced..3a43593 100644
--- a/panels/display/cc-night-light-dialog.c
+++ b/panels/display/cc-night-light-dialog.c
@@ -42,8 +42,8 @@ struct _CcNightLightDialog {
   GtkStack            *stack_from;
   GtkStack            *stack_to;
   GtkWidget           *switch_enable;
-  GtkWidget           *togglebutton_automatic;
-  GtkWidget           *togglebutton_manual;
+  //GtkWidget           *togglebutton_automatic;
+  //GtkWidget           *togglebutton_manual;
 
   GtkAdjustment       *adjustment_from_hours;
   GtkAdjustment       *adjustment_from_minutes;
@@ -145,12 +145,12 @@ dialog_update_state (CcNightLightDialog *self)
   automatic = g_settings_get_boolean (self->settings_display, "night-light-schedule-automatic");
 
   gtk_widget_set_sensitive (self->night_light_widget, enabled);
-  gtk_widget_set_sensitive (self->togglebutton_automatic, enabled);
-  gtk_widget_set_sensitive (self->togglebutton_manual, enabled);
+  //gtk_widget_set_sensitive (self->togglebutton_automatic, enabled);
+  //gtk_widget_set_sensitive (self->togglebutton_manual, enabled);
 
   self->ignore_value_changed = TRUE;
-  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (self->togglebutton_automatic), automatic);
-  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (self->togglebutton_manual), !automatic);
+  //gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (self->togglebutton_automatic), automatic);
+  //gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (self->togglebutton_manual), !automatic);
   self->ignore_value_changed = FALSE;
 
   gtk_widget_set_sensitive (self->box_manual, enabled && !automatic);
@@ -563,8 +563,8 @@ cc_night_light_dialog_class_init (CcNightLightDialogClass *klass)
   gtk_widget_class_bind_template_child (widget_class, CcNightLightDialog, stack_from);
   gtk_widget_class_bind_template_child (widget_class, CcNightLightDialog, stack_to);
   gtk_widget_class_bind_template_child (widget_class, CcNightLightDialog, switch_enable);
-  gtk_widget_class_bind_template_child (widget_class, CcNightLightDialog, togglebutton_automatic);
-  gtk_widget_class_bind_template_child (widget_class, CcNightLightDialog, togglebutton_manual);
+  //gtk_widget_class_bind_template_child (widget_class, CcNightLightDialog, togglebutton_automatic);
+  //gtk_widget_class_bind_template_child (widget_class, CcNightLightDialog, togglebutton_manual);
 
   gtk_widget_class_bind_template_callback (widget_class, dialog_am_pm_from_button_clicked_cb);
   gtk_widget_class_bind_template_callback (widget_class, dialog_am_pm_to_button_clicked_cb);
diff --git a/panels/display/cc-night-light-dialog.ui b/panels/display/cc-night-light-dialog.ui
index 5ec19dd..f390bbe 100644
--- a/panels/display/cc-night-light-dialog.ui
+++ b/panels/display/cc-night-light-dialog.ui
@@ -124,7 +124,7 @@
                         <property name="visible">True</property>
                         <property name="can_focus">False</property>
                         <property name="halign">start</property>
-                        <property name="hexpand">True</property>
+                        <property name="hexpand">False</property>
                         <property name="label" translatable="yes">Night Light</property>
                         <attributes>
                           <attribute name="weight" value="bold"/>
@@ -135,7 +135,7 @@
                         <property name="top_attach">0</property>
                       </packing>
                     </child>
-                    <child>
+                    <!--<child>
                       <object class="GtkLabel">
                         <property name="visible">True</property>
                         <property name="can_focus">False</property>
@@ -150,7 +150,7 @@
                         <property name="left_attach">0</property>
                         <property name="top_attach">1</property>
                       </packing>
-                    </child>
+                    </child>-->
                     <child>
                       <object class="GtkSwitch" id="switch_enable">
                         <property name="visible">True</property>
@@ -163,7 +163,7 @@
                         <property name="top_attach">0</property>
                       </packing>
                     </child>
-                    <child>
+                    <!--<child>
                       <object class="GtkButtonBox">
                         <property name="visible">True</property>
                         <property name="can_focus">False</property>
@@ -205,7 +205,7 @@
                         <property name="left_attach">1</property>
                         <property name="top_attach">1</property>
                       </packing>
-                    </child>
+                    </child>-->
                   </object>
                 </child>
                 <child>
@@ -492,4 +492,4 @@
     <property name="page_increment">10</property>
     <signal name="value-changed" handler="dialog_time_to_value_changed_cb" object="CcNightLightDialog" swapped="no" />
   </object>
-</interface>
\ No newline at end of file
+</interface>
diff --git a/panels/font/cc-font-panel.c b/panels/font/cc-font-panel.c
new file mode 100644
index 0000000..dc61abe
--- /dev/null
+++ b/panels/font/cc-font-panel.c
@@ -0,0 +1,421 @@
+/*
+ * Copyright (C) 2010 Intel, Inc
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#include "cc-font-panel.h"
+//#include "font-dialog.h"
+#include "cc-font-resources.h"
+
+#include <config.h>
+#include <gtk/gtk.h>
+
+#include <glib/gi18n.h>
+
+#define WID(y) (GtkWidget *) gtk_builder_get_object (panel->builder, y)
+
+enum {
+  COMBO_BOX_MODEL_TEXT,
+  COMBO_BOX_MODEL_VALUE,
+  N_COLUMNS
+};
+
+typedef enum {
+  GSD_HINTING_ACTION_NONE,
+  GSD_HINTING_ACTION_SLIGHT,
+  GSD_HINTING_ACTION_MEDIUM,
+  GSD_HINTING_ACTION_FULL,
+} GsdHintingActionType;
+
+typedef enum {
+  GSD_ANTIALIAS_ACTION_NONE,
+  GSD_ANTIALIAS_ACTION_STANDARD,
+  GSD_ANTIALIAS_ACTION_SUBPIXEL,
+} GsdAntialiasActionType;
+
+typedef enum {
+  GSD_SCALE_ACTION_SMALL,
+  GSD_SCALE_ACTION_MEDIUM,
+  GSD_SCALE_ACTION_LARGE,
+}GsdScaleActionType;
+
+struct _CcFontPanel
+{
+  CcPanel parent_instance;
+
+  GtkBuilder        *builder;
+  GSettings         *interface_settings;
+  GSettings         *wm_settings;
+  GSettings         *gsd_settings;
+
+  GtkAdjustment     *focus_adjustment;
+
+  GtkWidget         *interface_text_btn;
+  GtkWidget         *document_text_btn;
+  GtkWidget         *mono_text_btn;
+  GtkWidget         *titlebar_text_btn;
+
+  GtkWidget         *hinting_cb;
+  GtkWidget         *antialias_cb;
+
+  // remove feature. by ryong
+  //GtkWidget         *scale_adjustment;
+
+  GtkWidget         *font_list;
+  GtkWidget         *render_list;
+
+  GtkListStore      *liststore_hinting;
+  GtkListStore      *liststore_antialias;
+
+  gboolean           is_updating;
+};
+
+CC_PANEL_REGISTER (CcFontPanel, cc_font_panel)
+
+static const char *
+cc_font_panel_get_help_uri (CcPanel *panel)
+{
+  return "help:gnome-help/font";
+}
+
+static void 
+set_value_for_combo (GtkComboBox *combo_box, gint value)
+{
+  GtkTreeIter iter;
+  g_autoptr(GtkTreeIter) insert = NULL;
+  GtkTreeIter new; 
+  GtkTreeModel *model;
+  gint value_tmp;
+  //gint value_last = 0; 
+  g_autofree gchar *text = NULL;
+  gboolean ret; 
+
+  /* get entry */
+  model = gtk_combo_box_get_model (combo_box);
+  ret = gtk_tree_model_get_iter_first (model, &iter);
+  if (!ret)
+    return;
+
+  /* try to make the UI match the setting */
+  do
+    {    
+      gtk_tree_model_get (model, &iter,
+                          COMBO_BOX_MODEL_VALUE, &value_tmp,
+                          -1); 
+      if (value_tmp == value)
+      {    
+        gtk_combo_box_set_active_iter (combo_box, &iter);
+        return;
+      }    
+
+    } while (gtk_tree_model_iter_next (model, &iter));
+}
+
+static void
+call_list_box_separator (GtkListBoxRow *row,
+                         GtkListBoxRow *before,
+                         gpointer user_data)
+{
+  GtkWidget *current;
+  if (before == NULL)
+  {
+    gtk_list_box_row_set_header (row, NULL);
+    return;
+  }
+
+  current = gtk_list_box_row_get_header (row);
+  if (current == NULL)
+  {
+    current = gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
+    gtk_widget_show (current);
+    gtk_list_box_row_set_header (row, current);
+  }
+}
+
+static void
+scale_buttons_active (CcFontPanel *panel,
+                     GParamSpec  *pspec,
+                     GtkWidget   *button)
+{
+  if (panel->is_updating)
+    return;
+
+  double value = 1.0;
+  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (button)))
+  {
+    value = *(double*) g_object_get_data (G_OBJECT (button), "scale");
+    g_settings_set_double (panel->interface_settings, "text-scaling-factor", value);
+  }
+}
+
+static void
+scale_buttons_sync (GtkWidget *bbox,
+                    CcFontPanel *panel)
+{
+  g_autoptr (GList) children;
+  GList *l;
+  double value;
+  value = g_settings_get_double (panel->interface_settings, "text-scaling-factor");
+
+  children = gtk_container_get_children (GTK_CONTAINER (bbox));
+  for (l = children; l; l = l->next)
+  {
+    GtkWidget *button = l->data;
+    gdouble scale = *(double*) g_object_get_data (G_OBJECT (button), "scale");
+    if (scale == value)
+      gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button), TRUE);
+
+  }
+}
+
+static void
+cc_font_panel_dispose (GObject *object)
+{
+  CcFontPanel *panel = CC_FONT_PANEL (object);
+
+  g_clear_object (&panel->builder);
+
+  g_clear_object (&panel->interface_settings);
+  g_clear_object (&panel->wm_settings);
+  g_clear_object (&panel->gsd_settings);
+
+  G_OBJECT_CLASS (cc_font_panel_parent_class)->dispose (object);
+}
+
+static void
+cc_font_panel_finalize (GObject *object)
+{
+  CcFontPanel *panel = CC_FONT_PANEL (object);
+
+  g_clear_object (&panel->liststore_hinting);
+  g_clear_object (&panel->liststore_antialias);
+
+  G_OBJECT_CLASS (cc_font_panel_parent_class)->finalize (object);
+}
+
+static void
+changed_hinting_cb (GtkWidget *widget, CcFontPanel *panel)
+{
+  GtkTreeIter iter;
+  GtkTreeModel *model;
+  gint value;
+  gboolean ret;
+
+  ret = gtk_combo_box_get_active_iter (GTK_COMBO_BOX (widget), &iter);
+  if (!ret)
+    return;
+
+  model = gtk_combo_box_get_model (GTK_COMBO_BOX (widget));
+  gtk_tree_model_get (model, &iter, COMBO_BOX_MODEL_VALUE, &value, -1);
+
+  g_settings_set_enum (panel->gsd_settings, "hinting", value);
+}
+
+static void
+changed_antialias_cb (GtkWidget *widget, CcFontPanel *panel)
+{
+  GtkTreeIter iter;
+  GtkTreeModel *model;
+  gint value;
+  gboolean ret;
+
+  ret = gtk_combo_box_get_active_iter (GTK_COMBO_BOX (widget), &iter);
+  if (!ret)
+    return;
+
+  model = gtk_combo_box_get_model (GTK_COMBO_BOX (widget));
+  gtk_tree_model_get (model, &iter, COMBO_BOX_MODEL_VALUE, &value, -1);
+
+  g_settings_set_enum (panel->gsd_settings, "antialiasing", value);
+}
+
+static void
+cc_font_panel_class_init (CcFontPanelClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  CcPanelClass *panel_class = CC_PANEL_CLASS (klass);
+
+  object_class->dispose = cc_font_panel_dispose;
+
+  panel_class->get_help_uri = cc_font_panel_get_help_uri;
+}
+
+static GtkWidget *
+make_label_for_scale (char *text)
+{
+  g_autofree *label = g_strdup_printf ("  %s  ",text);
+  return gtk_label_new (label);
+}
+
+static void
+init_gsd_combo_box_model (CcFontPanel *panel)
+{
+  struct {
+    char *name;
+    GsdHintingActionType value;
+  } hinting_actions[] = {
+    { N_("none"), GSD_HINTING_ACTION_NONE },
+    { N_("slight"), GSD_HINTING_ACTION_SLIGHT },
+    { N_("medium"), GSD_HINTING_ACTION_MEDIUM },
+    { N_("full"), GSD_HINTING_ACTION_FULL },
+  };
+
+  struct {
+    char *name;
+    GsdAntialiasActionType value;
+  } antialias_actions[] = {
+    { N_("none"), GSD_ANTIALIAS_ACTION_NONE },
+    { N_("grayscale"), GSD_ANTIALIAS_ACTION_STANDARD },
+    { N_("rgba"), GSD_ANTIALIAS_ACTION_SUBPIXEL },
+  };
+
+  guint i;
+  GtkListStore *store;
+  GtkTreeModel *model = NULL;
+
+  panel->liststore_hinting = gtk_list_store_new (N_COLUMNS, G_TYPE_STRING, G_TYPE_INT);
+  model = GTK_TREE_MODEL (panel->liststore_hinting);
+  for (i = 0; i < G_N_ELEMENTS (hinting_actions); i++)
+  {
+    gtk_list_store_insert_with_values (panel->liststore_hinting,
+                                       NULL, -1,
+                                       COMBO_BOX_MODEL_TEXT, _(hinting_actions[i].name),
+                                       COMBO_BOX_MODEL_VALUE, hinting_actions[i].value,
+                                       -1);
+  }
+
+  gtk_combo_box_set_model (GTK_COMBO_BOX (panel->hinting_cb), model);
+
+  panel->liststore_antialias = gtk_list_store_new (N_COLUMNS, G_TYPE_STRING, G_TYPE_INT);
+  model = GTK_TREE_MODEL (panel->liststore_antialias);
+  for (i = 0; i < G_N_ELEMENTS (antialias_actions); i++)
+  {
+    gtk_list_store_insert_with_values (panel->liststore_antialias,
+                                       NULL, -1,
+                                       COMBO_BOX_MODEL_TEXT, _(antialias_actions[i].name),
+                                       COMBO_BOX_MODEL_VALUE, antialias_actions[i].value,
+                                       -1);
+  }
+
+  gtk_combo_box_set_model (GTK_COMBO_BOX (panel->antialias_cb), model);
+}
+
+static void
+init_scale_buttons (CcFontPanel *panel)
+{
+  GtkWidget *w;
+  double scale;
+  GtkRadioButton *group = NULL;
+  struct {
+    char *name;
+    GsdScaleActionType value;
+  } scale_actions[] = {
+    { N_("_small"), GSD_SCALE_ACTION_SMALL },
+    { N_("_medium"), GSD_SCALE_ACTION_MEDIUM },
+    { N_("_large"), GSD_SCALE_ACTION_LARGE },
+  };
+
+  scale = 0.75;
+  w = WID ("scale-bbox");
+  gtk_button_box_set_layout (GTK_BUTTON_BOX (w), GTK_BUTTONBOX_EXPAND);
+  for (int i = 0; i < G_N_ELEMENTS (scale_actions); i++)
+  {
+    GtkWidget *button;
+    button = gtk_radio_button_new_from_widget (group);
+    gtk_button_set_image (GTK_BUTTON (button), make_label_for_scale(_(scale_actions[i].name)));
+    gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (button), FALSE);
+
+    // 숫자로 변경
+    g_object_set_data_full (G_OBJECT (button), "scale", g_memdup (&scale, sizeof (double)), g_free);
+
+    g_signal_connect_object (button, "notify::active", G_CALLBACK (scale_buttons_active),
+                             panel, G_CONNECT_SWAPPED);
+    gtk_container_add (GTK_CONTAINER (w), button);
+    group = GTK_RADIO_BUTTON (button);
+
+    scale += 0.25;
+  }
+
+  panel->is_updating = TRUE;
+  scale_buttons_sync (w, panel);
+  panel->is_updating = FALSE;
+}
+
+static void
+cc_font_panel_init (CcFontPanel *panel)
+{
+  gchar *objects[] = {"font-main-scrolled-window", NULL };
+  g_autoptr(GError) err = NULL;
+  GtkWidget *w;
+  gint button_val;
+
+  g_resources_register (cc_font_get_resource ());
+
+  panel->builder = gtk_builder_new ();
+  gtk_builder_add_objects_from_resource (panel->builder,
+                                         "/org/gnome/control-center/font/font.ui",
+                                         objects, &err);
+  if (err)
+  {
+    g_warning ("Could not load ui: %s", err->message);
+    return;
+  }
+
+  panel->hinting_cb = WID ("hint-combobox");
+  panel->antialias_cb = WID ("antialiasing-combobox");
+  panel->font_list = WID ("font-listbox");
+  panel->render_list = WID ("render-listbox");
+
+  // remove feature. by ryong
+  //panel->scale_adjustment = gtk_adjustment_new (1, 0.5, 3, 0.01, 0, 0);
+
+  // set header separator on listbox row
+  gtk_list_box_set_header_func (panel->font_list, call_list_box_separator, NULL, NULL);
+  gtk_list_box_set_header_func (panel->render_list, call_list_box_separator, NULL, NULL);
+
+  panel->interface_settings = g_settings_new ("org.gnome.desktop.interface");
+  panel->wm_settings = g_settings_new ("org.gnome.desktop.wm.preferences");
+  panel->gsd_settings = g_settings_new ("org.gnome.settings-daemon.plugins.xsettings");
+
+  // font data binding
+  g_settings_bind (panel->interface_settings, "font-name", WID("interface-fontbutton"),"font", G_SETTINGS_BIND_DEFAULT);
+  g_settings_bind (panel->interface_settings, "document-font-name", WID("doc-text-fontbutton"),"font", G_SETTINGS_BIND_DEFAULT);
+  g_settings_bind (panel->interface_settings, "monospace-font-name", WID("mono-text-fontbutton"),"font", G_SETTINGS_BIND_DEFAULT);
+  g_settings_bind (panel->wm_settings, "titlebar-font", WID("windowtitle-text-fontbutton"),"font", G_SETTINGS_BIND_DEFAULT);
+
+  // initialize gsd combo box
+  init_gsd_combo_box_model (panel);
+
+  // remove feature. by ryong
+  //init_scale_buttons (panel);
+
+  button_val = g_settings_get_enum (panel->gsd_settings, "hinting");
+  set_value_for_combo (GTK_COMBO_BOX (panel->hinting_cb), button_val);
+
+  button_val = g_settings_get_enum (panel->gsd_settings, "antialiasing");
+  set_value_for_combo (GTK_COMBO_BOX (panel->antialias_cb), button_val);
+
+  g_signal_connect (panel->hinting_cb, "changed",
+                    G_CALLBACK (changed_hinting_cb), panel);
+  g_signal_connect (panel->antialias_cb, "changed",
+                    G_CALLBACK (changed_antialias_cb), panel);
+
+  w = WID ("font-main-scrolled-window");
+  gtk_container_add (GTK_CONTAINER (panel), w);
+  gtk_widget_show_all (GTK_WIDGET (panel));
+}
diff --git a/panels/font/cc-font-panel.h b/panels/font/cc-font-panel.h
new file mode 100644
index 0000000..74662ce
--- /dev/null
+++ b/panels/font/cc-font-panel.h
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2010 Intel, Inc
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#ifndef _CC_FONT_PANEL_H
+#define _CC_FONT_PANEL_H
+
+#include <shell/cc-panel.h>
+
+#define CC_TYPE_FONT_PANEL (cc_font_panel_get_type ())
+
+G_DECLARE_FINAL_TYPE (CcFontPanel, cc_font_panel, CC, FONT_PANEL, CcPanel)
+
+G_END_DECLS
+
+#endif /* _CC_FONT_PANEL_H */
diff --git a/panels/font/font.gresource.xml b/panels/font/font.gresource.xml
new file mode 100644
index 0000000..90315d6
--- /dev/null
+++ b/panels/font/font.gresource.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<gresources>
+  <gresource prefix="/org/gnome/control-center/font">
+    <file preprocess="xml-stripblanks">font.ui</file>
+    <!--<file preprocess="xml-stripblanks">font-dialog.ui</file>-->
+  </gresource>
+</gresources>
+
diff --git a/panels/font/font.ui b/panels/font/font.ui
new file mode 100644
index 0000000..169c75d
--- /dev/null
+++ b/panels/font/font.ui
@@ -0,0 +1,511 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.22.1 -->
+<interface>
+  <requires lib="gtk+" version="3.20"/>
+  <object class="GtkScrolledWindow" id="font-main-scrolled-window">
+    <property name="height_request">400</property>
+    <property name="visible">True</property>
+    <property name="can_focus">True</property>
+    <property name="hscrollbar_policy">never</property>
+    <child>
+      <object class="GtkViewport" id="font-viewport">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <child>
+          <object class="GtkBox" id="box1">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <child>
+              <object class="GtkBox">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="hexpand">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkBox">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="hexpand">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="pack_type">end</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkBox" id="font-main-box">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="margin_left">24</property>
+                <property name="margin_right">24</property>
+                <property name="margin_top">32</property>
+                <property name="margin_bottom">32</property>
+                <property name="hexpand">True</property>
+                <property name="orientation">vertical</property>
+                <child>
+                  <object class="GtkFrame" id="font-frame">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="margin_bottom">32</property>
+                    <property name="hexpand">True</property>
+                    <property name="label_xalign">0</property>
+                    <property name="shadow_type">in</property>
+                    <child>
+                      <object class="GtkListBox" id="font-listbox">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="hexpand">True</property>
+                        <property name="selection_mode">none</property>
+                        <property name="activate_on_single_click">False</property>
+                        <child>
+                          <object class="GtkListBoxRow" id="interface-text-listboxrow">
+                            <property name="height_request">32</property>
+                            <property name="visible">True</property>
+                            <property name="can_focus">True</property>
+                            <property name="activatable">False</property>
+                            <property name="selectable">False</property>
+                            <child>
+                              <object class="GtkBox" id="interface-text-box">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="valign">center</property>
+                                <property name="spacing">6</property>
+                                <child>
+                                  <object class="GtkLabel" id="interface-text-label">
+                                    <property name="height_request">32</property>
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="halign">start</property>
+                                    <property name="margin_left">12</property>
+                                    <property name="margin_start">12</property>
+                                    <property name="margin_top">8</property>
+                                    <property name="margin_bottom">8</property>
+                                    <property name="hexpand">True</property>
+                                    <property name="label" translatable="yes">Interface Text</property>
+                                    <property name="use_underline">True</property>
+                                    <property name="xalign">0</property>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">0</property>
+                                  </packing>
+                                </child>
+                                <child>
+                                  <object class="GtkFontButton" id="interface-fontbutton">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">True</property>
+                                    <property name="receives_default">True</property>
+                                    <property name="halign">end</property>
+                                    <property name="valign">center</property>
+                                    <property name="margin_right">15</property>
+                                    <property name="font">Sans 12</property>
+                                    <property name="language">ko-kr</property>
+                                    <property name="preview_text"/>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">1</property>
+                                  </packing>
+                                </child>
+                              </object>
+                            </child>
+                          </object>
+                        </child>
+                        <child>
+                          <object class="GtkListBoxRow" id="doc-text-listboxrow">
+                            <property name="height_request">32</property>
+                            <property name="visible">True</property>
+                            <property name="can_focus">True</property>
+                            <property name="activatable">False</property>
+                            <property name="selectable">False</property>
+                            <child>
+                              <object class="GtkBox" id="doc-text-box">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="valign">center</property>
+                                <child>
+                                  <object class="GtkLabel" id="doc-text-label">
+                                    <property name="height_request">32</property>
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="halign">start</property>
+                                    <property name="margin_left">12</property>
+                                    <property name="margin_start">12</property>
+                                    <property name="margin_top">8</property>
+                                    <property name="margin_bottom">8</property>
+                                    <property name="hexpand">True</property>
+                                    <property name="label" translatable="yes">Document Text</property>
+                                    <property name="use_underline">True</property>
+                                    <property name="xalign">0</property>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">0</property>
+                                  </packing>
+                                </child>
+                                <child>
+                                  <object class="GtkFontButton" id="doc-text-fontbutton">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">True</property>
+                                    <property name="receives_default">True</property>
+                                    <property name="halign">end</property>
+                                    <property name="valign">center</property>
+                                    <property name="margin_right">15</property>
+                                    <property name="font">Sans 12</property>
+                                    <property name="language">ko-kr</property>
+                                    <property name="preview_text"/>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">1</property>
+                                  </packing>
+                                </child>
+                              </object>
+                            </child>
+                          </object>
+                        </child>
+                        <child>
+                          <object class="GtkListBoxRow" id="mono-text-listboxrow">
+                            <property name="height_request">32</property>
+                            <property name="visible">True</property>
+                            <property name="can_focus">True</property>
+                            <property name="activatable">False</property>
+                            <property name="selectable">False</property>
+                            <child>
+                              <object class="GtkBox" id="mono-text-box">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="valign">center</property>
+                                <child>
+                                  <object class="GtkLabel" id="mono-text-label">
+                                    <property name="height_request">32</property>
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="halign">start</property>
+                                    <property name="margin_left">12</property>
+                                    <property name="margin_start">12</property>
+                                    <property name="margin_top">8</property>
+                                    <property name="margin_bottom">8</property>
+                                    <property name="hexpand">True</property>
+                                    <property name="label" translatable="yes">Monospace Text</property>
+                                    <property name="use_underline">True</property>
+                                    <property name="xalign">0</property>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">0</property>
+                                  </packing>
+                                </child>
+                                <child>
+                                  <object class="GtkFontButton" id="mono-text-fontbutton">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">True</property>
+                                    <property name="receives_default">True</property>
+                                    <property name="halign">end</property>
+                                    <property name="valign">center</property>
+                                    <property name="margin_right">15</property>
+                                    <property name="font">Sans 12</property>
+                                    <property name="language">ko-kr</property>
+                                    <property name="preview_text"/>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">1</property>
+                                  </packing>
+                                </child>
+                              </object>
+                            </child>
+                          </object>
+                        </child>
+                        <child>
+                          <object class="GtkListBoxRow" id="windowtitle-text-listboxrow">
+                            <property name="height_request">32</property>
+                            <property name="visible">True</property>
+                            <property name="can_focus">True</property>
+                            <property name="activatable">False</property>
+                            <property name="selectable">False</property>
+                            <child>
+                              <object class="GtkBox" id="windowtitle-text-box">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="valign">center</property>
+                                <child>
+                                  <object class="GtkLabel" id="windowtitle-text-label">
+                                    <property name="height_request">32</property>
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="halign">start</property>
+                                    <property name="margin_left">12</property>
+                                    <property name="margin_start">12</property>
+                                    <property name="margin_top">8</property>
+                                    <property name="margin_bottom">8</property>
+                                    <property name="hexpand">True</property>
+                                    <property name="label" translatable="yes">Legacy Window Titles</property>
+                                    <property name="use_underline">True</property>
+                                    <property name="xalign">0</property>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">0</property>
+                                  </packing>
+                                </child>
+                                <child>
+                                  <object class="GtkFontButton" id="windowtitle-text-fontbutton">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">True</property>
+                                    <property name="receives_default">True</property>
+                                    <property name="halign">end</property>
+                                    <property name="valign">center</property>
+                                    <property name="margin_right">15</property>
+                                    <property name="font">Sans 12</property>
+                                    <property name="language">ko-kr</property>
+                                    <property name="preview_text"/>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">1</property>
+                                  </packing>
+                                </child>
+                              </object>
+                            </child>
+                          </object>
+                        </child>
+                      </object>
+                    </child>
+                    <child type="label_item">
+                      <placeholder/>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">0</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkLabel" id="label1">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="margin_bottom">12</property>
+                    <property name="label" translatable="yes" comments="List of applications.">Font Rendering Settings</property>
+                    <property name="xalign">0</property>
+                    <attributes>
+                      <attribute name="weight" value="bold"/>
+                    </attributes>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">1</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkFrame" id="render-frame">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="margin_bottom">32</property>
+                    <property name="hexpand">True</property>
+                    <property name="label_xalign">0</property>
+                    <property name="shadow_type">in</property>
+                    <child>
+                      <object class="GtkListBox" id="render-listbox">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="selection_mode">none</property>
+                        <child>
+                          <object class="GtkListBoxRow" id="hint-listboxrow">
+                            <property name="height_request">32</property>
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="activatable">False</property>
+                            <property name="selectable">False</property>
+                            <child>
+                              <object class="GtkBox" id="hint-box">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="valign">center</property>
+                                <child>
+                                  <object class="GtkLabel" id="hint-label">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="halign">start</property>
+                                    <property name="margin_left">12</property>
+                                    <property name="margin_start">12</property>
+                                    <property name="margin_top">8</property>
+                                    <property name="margin_bottom">8</property>
+                                    <property name="hexpand">True</property>
+                                    <property name="label" translatable="yes">Legacy Window Titles</property>
+                                    <property name="use_underline">True</property>
+                                    <property name="xalign">0</property>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">0</property>
+                                  </packing>
+                                </child>
+                                <child>
+                                  <object class="GtkComboBoxText" id="hint-combobox">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="margin_right">15</property>
+                                    <property name="margin_top">10</property>
+                                    <property name="margin_bottom">10</property>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">1</property>
+                                  </packing>
+                                </child>
+                              </object>
+                            </child>
+                          </object>
+                        </child>
+                        <child>
+                          <object class="GtkListBoxRow" id="antialiasing-listboxrow">
+                            <property name="height_request">32</property>
+                            <property name="visible">True</property>
+                            <property name="can_focus">True</property>
+                            <property name="activatable">False</property>
+                            <property name="selectable">False</property>
+                            <child>
+                              <object class="GtkBox" id="antialiasing-box">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="valign">center</property>
+                                <child>
+                                  <object class="GtkLabel" id="antialiasing-label">
+                                    <property name="height_request">32</property>
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="halign">start</property>
+                                    <property name="margin_left">12</property>
+                                    <property name="margin_start">12</property>
+                                    <property name="margin_top">8</property>
+                                    <property name="margin_bottom">8</property>
+                                    <property name="hexpand">True</property>
+                                    <property name="label" translatable="yes">AntiAliasing</property>
+                                    <property name="use_underline">True</property>
+                                    <property name="xalign">0</property>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">0</property>
+                                  </packing>
+                                </child>
+                                <child>
+                                  <object class="GtkComboBoxText" id="antialiasing-combobox">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="margin_right">15</property>
+                                    <property name="margin_top">10</property>
+                                    <property name="margin_bottom">10</property>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">1</property>
+                                  </packing>
+                                </child>
+                              </object>
+                            </child>
+                          </object>
+                        </child>
+                        <!--<child>
+                          <object class="GtkListBoxRow" id="scale-listboxrow">
+                            <property name="height_request">32</property>
+                            <property name="visible">True</property>
+                            <property name="can_focus">True</property>
+                            <property name="activatable">False</property>
+                            <property name="selectable">False</property>
+                            <child>
+                              <object class="GtkBox" id="scale-box">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <child>
+                                  <object class="GtkLabel" id="scale-label">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="margin_left">12</property>
+                                    <property name="margin_top">8</property>
+                                    <property name="margin_bottom">8</property>
+                                    <property name="ypad">2</property>
+                                    <property name="label" translatable="yes">Scale Constant</property>
+                                    <property name="use_underline">True</property>
+                                    <property name="xalign">0</property>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="position">0</property>
+                                  </packing>
+                                </child>
+                                <child>
+                                  <object class="GtkButtonBox" id="scale-bbox">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="halign">end</property>
+                                    <property name="valign">center</property>
+                                    <property name="margin_right">15</property>
+                                    <property name="margin_top">10</property>
+                                    <property name="margin_bottom">10</property>
+                                    <property name="homogeneous">True</property>
+                                    <property name="layout_style">start</property>
+                                    <child>
+                                      <placeholder/>
+                                    </child>
+                                  </object>
+                                  <packing>
+                                    <property name="expand">False</property>
+                                    <property name="fill">True</property>
+                                    <property name="pack_type">end</property>
+                                    <property name="position">1</property>
+                                  </packing>
+                                </child>
+                              </object>
+                            </child>
+                          </object>
+                        </child>-->
+                      </object>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">2</property>
+                  </packing>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">2</property>
+              </packing>
+            </child>
+          </object>
+        </child>
+      </object>
+    </child>
+  </object>
+  <object class="GtkSizeGroup" id="sizegroup1">
+    <property name="mode">both</property>
+  </object>
+</interface>
diff --git a/panels/font/gnome-font-panel.desktop.in.in b/panels/font/gnome-font-panel.desktop.in.in
new file mode 100644
index 0000000..dfa8118
--- /dev/null
+++ b/panels/font/gnome-font-panel.desktop.in.in
@@ -0,0 +1,14 @@
+[Desktop Entry]
+Name=Font
+Comment=Change your font
+Exec=gnome-control-center font
+# Translators: Do NOT translate or transliterate this text (this is an icon file name)!
+Icon=preferences-desktop-font
+Terminal=false
+Type=Application
+NoDisplay=true
+StartupNotify=true
+Categories=GNOME;GTK;Settings;DesktopSettings;X-GNOME-Settings-Panel;X-GNOME-PersonalizationSettings;
+OnlyShowIn=GNOME;
+# Translators: Search terms to find the Font panel. Do NOT translate or localize the semicolons! The list MUST also end with a semicolon!
+Keywords=Font;
diff --git a/panels/font/meson.build b/panels/font/meson.build
new file mode 100644
index 0000000..36c38d1
--- /dev/null
+++ b/panels/font/meson.build
@@ -0,0 +1,57 @@
+panels_list += cappletname
+desktop = 'gnome-@0@-panel.desktop'.format(cappletname)
+
+desktop_in = configure_file(
+  input: desktop + '.in.in',
+  output: desktop + '.in',
+  configuration: desktop_conf
+)
+
+i18n.merge_file(
+  desktop,
+  type: 'desktop',
+  input: desktop_in,
+  output: desktop,
+  po_dir: po_dir,
+  install: true,
+  install_dir: control_center_desktopdir
+)
+
+datadir = get_option('datadir')
+
+resource_data = files(
+  'font.ui',
+  #'font-dialog.ui',
+  #'rgba-images.h'
+)
+
+common_sources = []
+common_sources += gnome.compile_resources(
+  'cc-@0@-resources'.format(cappletname),
+  cappletname + '.gresource.xml',
+  c_name: 'cc_' + cappletname,
+  dependencies: resource_data,
+  export: true
+)
+
+sources = files(
+  'cc-font-panel.c',
+)
+
+deps = common_deps + [
+  libxml_dep
+]
+
+cflags += [
+  '-DGNOMELOCALEDIR="@0@"'.format(control_center_localedir),
+  '-DDATADIR="@0@"'.format(control_center_datadir),
+]
+
+sources += common_sources + files('cc-font-panel.c')
+panels_libs += static_library(
+  cappletname,
+  sources: sources,
+  include_directories: [ top_inc, common_inc ],
+  dependencies: deps,
+  c_args: cflags
+)
diff --git a/panels/info/cc-info-overview-panel.c b/panels/info/cc-info-overview-panel.c
index 4fbb7e2..ce34564 100644
--- a/panels/info/cc-info-overview-panel.c
+++ b/panels/info/cc-info-overview-panel.c
@@ -3,6 +3,7 @@
  * Copyright (C) 2017 Mohammed Sadiq <sadiq@sadiqpk.org>
  * Copyright (C) 2010 Red Hat, Inc
  * Copyright (C) 2008 William Jon McCann <jmccann@redhat.com>
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -58,12 +59,10 @@ typedef struct {
 
 typedef struct
 {
-  GtkWidget      *system_image;
   GtkWidget      *version_label;
   GtkWidget      *name_entry;
   GtkWidget      *memory_label;
   GtkWidget      *processor_label;
-  GtkWidget      *os_name_label;
   GtkWidget      *os_type_label;
   GtkWidget      *disk_label;
   GtkWidget      *graphics_label;
@@ -811,9 +810,6 @@ info_overview_panel_setup_overview (CcInfoOverviewPanel *self)
   os_type_text = get_os_type ();
   gtk_label_set_text (GTK_LABEL (priv->os_type_label), os_type_text ? os_type_text : "");
 
-  os_name_text = get_os_name ();
-  gtk_label_set_text (GTK_LABEL (priv->os_name_label), os_name_text ? os_name_text : "");
-
   get_primary_disc_info (self);
 
   gtk_label_set_markup (GTK_LABEL (priv->graphics_label), priv->graphics_data->hardware_string);
@@ -896,12 +892,10 @@ cc_info_overview_panel_class_init (CcInfoOverviewPanelClass *klass)
 
   gtk_widget_class_set_template_from_resource (widget_class, "/org/gnome/control-center/info/info-overview.ui");
 
-  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, system_image);
   gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, version_label);
   gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, name_entry);
   gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, memory_label);
   gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, processor_label);
-  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, os_name_label);
   gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, os_type_label);
   gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, disk_label);
   gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, graphics_label);
diff --git a/panels/info/cc-info-overview-panel.c.orig b/panels/info/cc-info-overview-panel.c.orig
new file mode 100644
index 0000000..4fbb7e2
--- /dev/null
+++ b/panels/info/cc-info-overview-panel.c.orig
@@ -0,0 +1,942 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
+ *
+ * Copyright (C) 2017 Mohammed Sadiq <sadiq@sadiqpk.org>
+ * Copyright (C) 2010 Red Hat, Inc
+ * Copyright (C) 2008 William Jon McCann <jmccann@redhat.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <config.h>
+
+#include "cc-hostname-entry.h"
+
+#include "cc-info-resources.h"
+#include "info-cleanup.h"
+
+#include <glib.h>
+#include <glib/gi18n.h>
+#include <gio/gio.h>
+#include <gio/gunixmounts.h>
+#include <gio/gdesktopappinfo.h>
+
+#include <glibtop/fsusage.h>
+#include <glibtop/mountlist.h>
+#include <glibtop/mem.h>
+#include <glibtop/sysinfo.h>
+
+#include <gdk/gdk.h>
+
+#ifdef GDK_WINDOWING_WAYLAND
+#include <gdk/gdkwayland.h>
+#endif
+#ifdef GDK_WINDOWING_X11
+#include <gdk/gdkx.h>
+#endif
+
+#include "gsd-disk-space-helper.h"
+
+#include "cc-info-overview-panel.h"
+
+
+typedef struct {
+  /* Will be one or 2 GPU name strings, or "Unknown" */
+  char *hardware_string;
+} GraphicsData;
+
+typedef struct
+{
+  GtkWidget      *system_image;
+  GtkWidget      *version_label;
+  GtkWidget      *name_entry;
+  GtkWidget      *memory_label;
+  GtkWidget      *processor_label;
+  GtkWidget      *os_name_label;
+  GtkWidget      *os_type_label;
+  GtkWidget      *disk_label;
+  GtkWidget      *graphics_label;
+  GtkWidget      *virt_type_label;
+  GtkWidget      *updates_button;
+
+  /* Virtualisation labels */
+  GtkWidget      *label8;
+  GtkWidget      *grid1;
+  GtkWidget      *label18;
+
+  char           *gnome_version;
+  char           *gnome_distributor;
+  char           *gnome_date;
+
+  GCancellable   *cancellable;
+
+  /* Free space */
+  GList          *primary_mounts;
+  guint64         total_bytes;
+
+  GraphicsData   *graphics_data;
+} CcInfoOverviewPanelPrivate;
+
+struct _CcInfoOverviewPanel
+{
+ CcPanel parent_instance;
+
+  /*< private >*/
+ CcInfoOverviewPanelPrivate *priv;
+};
+
+static void get_primary_disc_info_start (CcInfoOverviewPanel *self);
+
+typedef struct
+{
+  char *major;
+  char *minor;
+  char *micro;
+  char *distributor;
+  char *date;
+  char **current;
+} VersionData;
+
+static void
+version_data_free (VersionData *data)
+{
+  g_free (data->major);
+  g_free (data->minor);
+  g_free (data->micro);
+  g_free (data->distributor);
+  g_free (data->date);
+  g_free (data);
+}
+
+G_DEFINE_AUTOPTR_CLEANUP_FUNC (VersionData, version_data_free);
+
+G_DEFINE_TYPE_WITH_PRIVATE (CcInfoOverviewPanel, cc_info_overview_panel, CC_TYPE_PANEL)
+
+static void
+version_start_element_handler (GMarkupParseContext      *ctx,
+                               const char               *element_name,
+                               const char              **attr_names,
+                               const char              **attr_values,
+                               gpointer                  user_data,
+                               GError                  **error)
+{
+  VersionData *data = user_data;
+  if (g_str_equal (element_name, "platform"))
+    data->current = &data->major;
+  else if (g_str_equal (element_name, "minor"))
+    data->current = &data->minor;
+  else if (g_str_equal (element_name, "micro"))
+    data->current = &data->micro;
+  else if (g_str_equal (element_name, "distributor"))
+    data->current = &data->distributor;
+  else if (g_str_equal (element_name, "date"))
+    data->current = &data->date;
+  else
+    data->current = NULL;
+}
+
+static void
+version_end_element_handler (GMarkupParseContext      *ctx,
+                             const char               *element_name,
+                             gpointer                  user_data,
+                             GError                  **error)
+{
+  VersionData *data = user_data;
+  data->current = NULL;
+}
+
+static void
+version_text_handler (GMarkupParseContext *ctx,
+                      const char          *text,
+                      gsize                text_len,
+                      gpointer             user_data,
+                      GError             **error)
+{
+  VersionData *data = user_data;
+  if (data->current != NULL)
+    {
+      g_autofree char *stripped = NULL;
+
+      stripped = g_strstrip (g_strdup (text));
+      g_free (*data->current);
+      *data->current = g_strdup (stripped);
+    }
+}
+
+static gboolean
+load_gnome_version (char **version,
+                    char **distributor,
+                    char **date)
+{
+  GMarkupParser version_parser = {
+    version_start_element_handler,
+    version_end_element_handler,
+    version_text_handler,
+    NULL,
+    NULL,
+  };
+  g_autoptr(GError) error = NULL;
+  g_autoptr(GMarkupParseContext) ctx = NULL;
+  g_autofree char *contents = NULL;
+  gsize length;
+  g_autoptr(VersionData) data = NULL;
+
+  if (!g_file_get_contents (DATADIR "/gnome/gnome-version.xml",
+                            &contents,
+                            &length,
+                            &error))
+    return FALSE;
+
+  data = g_new0 (VersionData, 1);
+  ctx = g_markup_parse_context_new (&version_parser, 0, data, NULL);
+
+  if (!g_markup_parse_context_parse (ctx, contents, length, &error))
+    {
+      g_warning ("Invalid version file: '%s'", error->message);
+    }
+  else
+    {
+      if (version != NULL)
+        *version = g_strdup_printf ("%s.%s.%s", data->major, data->minor, data->micro);
+      if (distributor != NULL)
+        *distributor = g_strdup (data->distributor);
+      if (date != NULL)
+        *date = g_strdup (data->date);
+
+      return TRUE;
+    }
+
+  return FALSE;
+};
+
+static void
+graphics_data_free (GraphicsData *gdata)
+{
+  g_free (gdata->hardware_string);
+  g_slice_free (GraphicsData, gdata);
+}
+
+static char *
+get_renderer_from_session (void)
+{
+  g_autoptr(GDBusProxy) session_proxy = NULL;
+  g_autoptr(GVariant) renderer_variant = NULL;
+  char *renderer;
+  g_autoptr(GError) error = NULL;
+
+  session_proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SESSION,
+                                                 G_DBUS_PROXY_FLAGS_NONE,
+                                                 NULL,
+                                                 "org.gnome.SessionManager",
+                                                 "/org/gnome/SessionManager",
+                                                 "org.gnome.SessionManager",
+                                                 NULL, &error);
+  if (error != NULL)
+    {
+      g_warning ("Unable to connect to create a proxy for org.gnome.SessionManager: %s",
+                 error->message);
+      return NULL;
+    }
+
+  renderer_variant = g_dbus_proxy_get_cached_property (session_proxy, "Renderer");
+
+  if (!renderer_variant)
+    {
+      g_warning ("Unable to retrieve org.gnome.SessionManager.Renderer property");
+      return NULL;
+    }
+
+  renderer = info_cleanup (g_variant_get_string (renderer_variant, NULL));
+
+  return renderer;
+}
+
+static char *
+get_renderer_from_helper (gboolean discrete_gpu)
+{
+  int status;
+  char *argv[] = { GNOME_SESSION_DIR "/gnome-session-check-accelerated", NULL };
+  g_auto(GStrv) envp = NULL;
+  g_autofree char *renderer = NULL;
+  g_autoptr(GError) error = NULL;
+
+  if (discrete_gpu)
+    {
+      envp = g_get_environ ();
+      envp = g_environ_setenv (envp, "DRI_PRIME", "1", TRUE);
+    }
+
+  if (!g_spawn_sync (NULL, (char **) argv, envp, 0, NULL, NULL, &renderer, NULL, &status, &error))
+    {
+      g_debug ("Failed to get %s GPU: %s",
+               discrete_gpu ? "discrete" : "integrated",
+               error->message);
+      return NULL;
+    }
+
+  if (!g_spawn_check_exit_status (status, NULL))
+    return NULL;
+
+  if (renderer == NULL || *renderer == '\0')
+    return NULL;
+
+  return info_cleanup (renderer);
+}
+
+static gboolean
+has_dual_gpu (void)
+{
+  g_autoptr(GDBusProxy) switcheroo_proxy = NULL;
+  g_autoptr(GVariant) dualgpu_variant = NULL;
+  gboolean ret;
+  g_autoptr(GError) error = NULL;
+
+  switcheroo_proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
+                                                    G_DBUS_PROXY_FLAGS_NONE,
+                                                    NULL,
+                                                    "net.hadess.SwitcherooControl",
+                                                    "/net/hadess/SwitcherooControl",
+                                                    "net.hadess.SwitcherooControl",
+                                                    NULL, &error);
+  if (switcheroo_proxy == NULL)
+    {
+      g_debug ("Unable to connect to create a proxy for net.hadess.SwitcherooControl: %s",
+               error->message);
+      return FALSE;
+    }
+
+  dualgpu_variant = g_dbus_proxy_get_cached_property (switcheroo_proxy, "HasDualGpu");
+
+  if (!dualgpu_variant)
+    {
+      g_debug ("Unable to retrieve net.hadess.SwitcherooControl.HasDualGpu property, the daemon is likely not running");
+      return FALSE;
+    }
+
+  ret = g_variant_get_boolean (dualgpu_variant);
+
+  if (ret)
+    g_debug ("Dual-GPU machine detected");
+
+  return ret;
+}
+
+static GraphicsData *
+get_graphics_data (void)
+{
+  GraphicsData *result;
+  GdkDisplay *display;
+
+  result = g_slice_new0 (GraphicsData);
+
+  display = gdk_display_get_default ();
+
+#if defined(GDK_WINDOWING_X11) || defined(GDK_WINDOWING_WAYLAND)
+  gboolean x11_or_wayland = FALSE;
+#ifdef GDK_WINDOWING_X11
+  x11_or_wayland = GDK_IS_X11_DISPLAY (display);
+#endif
+#ifdef GDK_WINDOWING_WAYLAND
+  x11_or_wayland = x11_or_wayland || GDK_IS_WAYLAND_DISPLAY (display);
+#endif
+
+  if (x11_or_wayland)
+    {
+      g_autofree char *discrete_renderer = NULL;
+      g_autofree char *renderer = NULL;
+
+      renderer = get_renderer_from_session ();
+      if (!renderer)
+        renderer = get_renderer_from_helper (FALSE);
+      if (has_dual_gpu ())
+        discrete_renderer = get_renderer_from_helper (TRUE);
+      if (!discrete_renderer)
+        result->hardware_string = g_strdup (renderer);
+      else
+        result->hardware_string = g_strdup_printf ("%s / %s",
+                                                   renderer,
+                                                   discrete_renderer);
+    }
+#endif
+
+  if (!result->hardware_string)
+    result->hardware_string = g_strdup (_("Unknown"));
+
+  return result;
+}
+
+static GHashTable*
+get_os_info (void)
+{
+  GHashTable *hashtable;
+  g_autofree gchar *buffer = NULL;
+
+  hashtable = NULL;
+
+  if (g_file_get_contents ("/etc/os-release", &buffer, NULL, NULL))
+    {
+      g_auto(GStrv) lines = NULL;
+      gint i;
+
+      lines = g_strsplit (buffer, "\n", -1);
+
+      for (i = 0; lines[i] != NULL; i++)
+        {
+          gchar *delimiter;
+
+          /* Initialize the hash table if needed */
+          if (!hashtable)
+            hashtable = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, g_free);
+
+          delimiter = strstr (lines[i], "=");
+
+          if (delimiter != NULL)
+            {
+              gint size;
+              gchar *key, *value;
+
+              key = g_strndup (lines[i], delimiter - lines[i]);
+
+              /* Jump the '=' */
+              delimiter += strlen ("=");
+
+              /* Eventually jump the ' " ' character */
+              if (g_str_has_prefix (delimiter, "\""))
+                delimiter += strlen ("\"");
+
+              size = strlen (delimiter);
+
+              /* Don't consider the last ' " ' too */
+              if (g_str_has_suffix (delimiter, "\""))
+                size -= strlen ("\"");
+
+              value = g_strndup (delimiter, size);
+
+              g_hash_table_insert (hashtable, key, value);
+            }
+        }
+    }
+
+  return hashtable;
+}
+
+static char *
+get_os_name (void)
+{
+  GHashTable *os_info;
+  gchar *name, *version_id, *pretty_name, *build_id;
+  gchar *result = NULL;
+  g_autofree gchar *name_version = NULL;
+
+  os_info = get_os_info ();
+
+  if (!os_info)
+    return NULL;
+
+  name = g_hash_table_lookup (os_info, "NAME");
+  version_id = g_hash_table_lookup (os_info, "VERSION_ID");
+  pretty_name = g_hash_table_lookup (os_info, "PRETTY_NAME");
+  build_id = g_hash_table_lookup (os_info, "BUILD_ID");
+
+  if (pretty_name)
+    name_version = g_strdup (pretty_name);
+  else if (name && version_id)
+    name_version = g_strdup_printf ("%s %s", name, version_id);
+  else
+    name_version = g_strdup (_("Unknown"));
+
+  if (build_id)
+    {
+      /* translators: This is the name of the OS, followed by the build ID, for
+       * example:
+       * "Fedora 25 (Workstation Edition); Build ID: xyz" or
+       * "Ubuntu 16.04 LTS; Build ID: jki" */
+      result = g_strdup_printf (_("%s; Build ID: %s"), name_version, build_id);
+    }
+  else
+    {
+      result = g_strdup (name_version);
+    }
+
+  g_clear_pointer (&os_info, g_hash_table_destroy);
+
+  return result;
+}
+
+static char *
+get_os_type (void)
+{
+  if (GLIB_SIZEOF_VOID_P == 8)
+    /* translators: This is the type of architecture for the OS */
+    return g_strdup_printf (_("64-bit"));
+  else
+    /* translators: This is the type of architecture for the OS */
+    return g_strdup_printf (_("32-bit"));
+}
+
+static void
+query_done (GFile               *file,
+            GAsyncResult        *res,
+            CcInfoOverviewPanel *self)
+{
+  CcInfoOverviewPanelPrivate *priv;
+  g_autoptr(GFileInfo) info = NULL;
+  g_autoptr(GError) error = NULL;
+
+  info = g_file_query_filesystem_info_finish (file, res, &error);
+  if (info != NULL)
+    {
+      priv = cc_info_overview_panel_get_instance_private (self);
+      priv->total_bytes += g_file_info_get_attribute_uint64 (info, G_FILE_ATTRIBUTE_FILESYSTEM_SIZE);
+    }
+  else
+    {
+      if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+          return;
+      else
+        {
+          g_autofree char *path = NULL;
+          path = g_file_get_path (file);
+          g_warning ("Failed to get filesystem free space for '%s': %s", path, error->message);
+        }
+    }
+
+  /* And onto the next element */
+  get_primary_disc_info_start (self);
+}
+
+static void
+get_primary_disc_info_start (CcInfoOverviewPanel *self)
+{
+  GUnixMountEntry *mount;
+  g_autoptr(GFile) file = NULL;
+  CcInfoOverviewPanelPrivate *priv = cc_info_overview_panel_get_instance_private (self);
+
+  if (priv->primary_mounts == NULL)
+    {
+      g_autofree char *size = NULL;
+
+      size = g_format_size (priv->total_bytes);
+      gtk_label_set_text (GTK_LABEL (priv->disk_label), size);
+
+      return;
+    }
+
+  mount = priv->primary_mounts->data;
+  priv->primary_mounts = g_list_remove (priv->primary_mounts, mount);
+  file = g_file_new_for_path (g_unix_mount_get_mount_path (mount));
+  g_unix_mount_free (mount);
+
+  g_file_query_filesystem_info_async (file,
+                                      G_FILE_ATTRIBUTE_FILESYSTEM_SIZE,
+                                      0,
+                                      priv->cancellable,
+                                      (GAsyncReadyCallback) query_done,
+                                      self);
+}
+
+static GList *
+convert_points_to_entries (GList *points)
+{
+  GList *entries = NULL;
+  GList *p;
+
+  for (p = points; p != NULL; p = p->next)
+    {
+      GUnixMountPoint *point = p->data;
+      GUnixMountEntry *mount;
+      const gchar *mount_path = g_unix_mount_point_get_mount_path (point);
+
+      mount = g_unix_mount_at (mount_path, NULL);
+      if (mount)
+        entries = g_list_append (entries, mount);
+    }
+
+  return entries;
+}
+
+static void
+get_primary_disc_info (CcInfoOverviewPanel *self)
+{
+  GList *points, *entries = NULL;
+  GList *p;
+  GHashTable *hash;
+  CcInfoOverviewPanelPrivate *priv = cc_info_overview_panel_get_instance_private (self);
+
+  hash = g_hash_table_new (g_str_hash, g_str_equal);
+  points = g_unix_mount_points_get (NULL);
+
+  entries = convert_points_to_entries (points);
+  g_list_free_full (points, (GDestroyNotify) g_unix_mount_point_free);
+
+  /* If we do not have /etc/fstab around, try /etc/mtab */
+  if (entries == NULL)
+    entries = g_unix_mounts_get (NULL);
+
+  for (p = entries; p != NULL; p = p->next)
+    {
+      GUnixMountEntry *mount = p->data;
+      const char *mount_path;
+      const char *device_path;
+
+      mount_path = g_unix_mount_get_mount_path (mount);
+      device_path = g_unix_mount_get_device_path (mount);
+
+      /* Do not count multiple mounts with same device_path, because it is
+       * probably something like btrfs subvolume. Use only the first one in
+       * order to count the real size. */
+      if (gsd_should_ignore_unix_mount (mount) ||
+          gsd_is_removable_mount (mount) ||
+          g_str_has_prefix (mount_path, "/media/") ||
+          g_str_has_prefix (mount_path, g_get_home_dir ()) ||
+          g_hash_table_lookup (hash, device_path) != NULL)
+        {
+          g_unix_mount_free (mount);
+          continue;
+        }
+
+      priv->primary_mounts = g_list_prepend (priv->primary_mounts, mount);
+      g_hash_table_insert (hash, (gpointer) device_path, (gpointer) device_path);
+    }
+  g_list_free (entries);
+  g_hash_table_destroy (hash);
+
+  priv->cancellable = g_cancellable_new ();
+  get_primary_disc_info_start (self);
+}
+
+static char *
+get_cpu_info (const glibtop_sysinfo *info)
+{
+  g_autoptr(GHashTable) counts = NULL;
+  g_autoptr(GString) cpu = NULL;
+  GHashTableIter iter;
+  gpointer       key, value;
+  int            i;
+  int            j;
+
+  counts = g_hash_table_new (g_str_hash, g_str_equal);
+
+  /* count duplicates */
+  for (i = 0; i != info->ncpu; ++i)
+    {
+      const char * const keys[] = { "model name", "cpu", "Processor" };
+      char *model;
+      int  *count;
+
+      model = NULL;
+
+      for (j = 0; model == NULL && j != G_N_ELEMENTS (keys); ++j)
+        {
+          model = g_hash_table_lookup (info->cpuinfo[i].values,
+                                       keys[j]);
+        }
+
+      if (model == NULL)
+          continue;
+
+      count = g_hash_table_lookup (counts, model);
+      if (count == NULL)
+        g_hash_table_insert (counts, model, GINT_TO_POINTER (1));
+      else
+        g_hash_table_replace (counts, model, GINT_TO_POINTER (GPOINTER_TO_INT (count) + 1));
+    }
+
+  cpu = g_string_new (NULL);
+  g_hash_table_iter_init (&iter, counts);
+  while (g_hash_table_iter_next (&iter, &key, &value))
+    {
+      g_autofree char *cleanedup = NULL;
+      int count;
+
+      count = GPOINTER_TO_INT (value);
+      cleanedup = info_cleanup ((const char *) key);
+      if (count > 1)
+        g_string_append_printf (cpu, "%s \303\227 %d ", cleanedup, count);
+      else
+        g_string_append_printf (cpu, "%s ", cleanedup);
+    }
+
+  return g_strdup (cpu->str);
+}
+
+static void
+move_one_up (GtkWidget *grid,
+             GtkWidget *child)
+{
+  int top_attach;
+
+  gtk_container_child_get (GTK_CONTAINER (grid),
+                           child,
+                           "top-attach", &top_attach,
+                           NULL);
+  gtk_container_child_set (GTK_CONTAINER (grid),
+                           child,
+                           "top-attach", top_attach - 1,
+                           NULL);
+}
+
+static struct {
+  const char *id;
+  const char *display;
+} const virt_tech[] = {
+  { "kvm", "KVM" },
+  { "qemu", "QEmu" },
+  { "vmware", "VMware" },
+  { "microsoft", "Microsoft" },
+  { "oracle", "Oracle" },
+  { "xen", "Xen" },
+  { "bochs", "Bochs" },
+  { "chroot", "chroot" },
+  { "openvz", "OpenVZ" },
+  { "lxc", "LXC" },
+  { "lxc-libvirt", "LXC (libvirt)" },
+  { "systemd-nspawn", "systemd (nspawn)" }
+};
+
+static void
+set_virtualization_label (CcInfoOverviewPanel *self,
+                          const char          *virt)
+{
+  const char *display_name;
+  CcInfoOverviewPanelPrivate *priv = cc_info_overview_panel_get_instance_private (self);
+  guint i;
+
+  if (virt == NULL || *virt == '\0')
+  {
+    gtk_widget_hide (priv->virt_type_label);
+    gtk_widget_hide (priv->label18);
+    move_one_up (priv->grid1, priv->label8);
+    move_one_up (priv->grid1, priv->disk_label);
+    return;
+  }
+
+  display_name = NULL;
+  for (i = 0; i < G_N_ELEMENTS (virt_tech); i++)
+    {
+      if (g_str_equal (virt_tech[i].id, virt))
+        {
+          display_name = _(virt_tech[i].display);
+          break;
+        }
+    }
+
+  gtk_label_set_text (GTK_LABEL (priv->virt_type_label), display_name ? display_name : virt);
+}
+
+static void
+info_overview_panel_setup_virt (CcInfoOverviewPanel *self)
+{
+  g_autoptr(GError) error = NULL;
+  g_autoptr(GDBusProxy) systemd_proxy = NULL;
+  g_autoptr(GVariant) variant = NULL;
+  GVariant *inner;
+
+  systemd_proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
+                                                 G_DBUS_PROXY_FLAGS_NONE,
+                                                 NULL,
+                                                 "org.freedesktop.systemd1",
+                                                 "/org/freedesktop/systemd1",
+                                                 "org.freedesktop.systemd1",
+                                                 NULL,
+                                                 &error);
+
+  if (systemd_proxy == NULL)
+    {
+      g_debug ("systemd not available, bailing: %s", error->message);
+      set_virtualization_label (self, NULL);
+      return;
+    }
+
+  variant = g_dbus_proxy_call_sync (systemd_proxy,
+                                    "org.freedesktop.DBus.Properties.Get",
+                                    g_variant_new ("(ss)", "org.freedesktop.systemd1.Manager", "Virtualization"),
+                                    G_DBUS_CALL_FLAGS_NONE,
+                                    -1,
+                                    NULL,
+                                    &error);
+  if (variant == NULL)
+    {
+      g_debug ("Failed to get property '%s': %s", "Virtualization", error->message);
+      set_virtualization_label (self, NULL);
+      return;
+    }
+
+  g_variant_get (variant, "(v)", &inner);
+  set_virtualization_label (self, g_variant_get_string (inner, NULL));
+}
+
+static void
+info_overview_panel_setup_overview (CcInfoOverviewPanel *self)
+{
+  gboolean    res;
+  glibtop_mem mem;
+  const glibtop_sysinfo *info;
+  g_autofree char *memory_text = NULL;
+  g_autofree char *cpu_text = NULL;
+  g_autofree char *os_type_text = NULL;
+  g_autofree char *os_name_text = NULL;
+  CcInfoOverviewPanelPrivate *priv = cc_info_overview_panel_get_instance_private (self);
+
+  res = load_gnome_version (&priv->gnome_version,
+                            &priv->gnome_distributor,
+                            &priv->gnome_date);
+  if (res)
+    {
+      g_autofree gchar *text = NULL;
+      text = g_strdup_printf ("%s", priv->gnome_version);
+      gtk_label_set_text (GTK_LABEL (priv->version_label), text);
+    }
+
+  glibtop_get_mem (&mem);
+  memory_text = g_format_size_full (mem.total, G_FORMAT_SIZE_IEC_UNITS);
+  gtk_label_set_text (GTK_LABEL (priv->memory_label), memory_text ? memory_text : "");
+
+  info = glibtop_get_sysinfo ();
+
+  cpu_text = get_cpu_info (info);
+  gtk_label_set_markup (GTK_LABEL (priv->processor_label), cpu_text ? cpu_text : "");
+
+  os_type_text = get_os_type ();
+  gtk_label_set_text (GTK_LABEL (priv->os_type_label), os_type_text ? os_type_text : "");
+
+  os_name_text = get_os_name ();
+  gtk_label_set_text (GTK_LABEL (priv->os_name_label), os_name_text ? os_name_text : "");
+
+  get_primary_disc_info (self);
+
+  gtk_label_set_markup (GTK_LABEL (priv->graphics_label), priv->graphics_data->hardware_string);
+}
+
+static gboolean
+does_gnome_software_exist (void)
+{
+  return g_file_test (BINDIR "/gnome-software", G_FILE_TEST_EXISTS);
+}
+
+static gboolean
+does_gpk_update_viewer_exist (void)
+{
+  return g_file_test (BINDIR "/gpk-update-viewer", G_FILE_TEST_EXISTS);
+}
+
+static void
+on_updates_button_clicked (GtkWidget           *widget,
+                           CcInfoOverviewPanel *self)
+{
+  g_autoptr(GError) error = NULL;
+  gboolean ret;
+  g_auto(GStrv) argv = NULL;
+
+  argv = g_new0 (gchar *, 3);
+  if (does_gnome_software_exist ())
+    {
+      argv[0] = g_build_filename (BINDIR, "gnome-software", NULL);
+      argv[1] = g_strdup_printf ("--mode=updates");
+    }
+  else
+    {
+      argv[0] = g_build_filename (BINDIR, "gpk-update-viewer", NULL);
+    }
+  ret = g_spawn_async (NULL, argv, NULL, 0, NULL, NULL, NULL, &error);
+  if (!ret)
+      g_warning ("Failed to spawn %s: %s", argv[0], error->message);
+}
+
+static void
+cc_info_overview_panel_dispose (GObject *object)
+{
+  CcInfoOverviewPanelPrivate *priv = cc_info_overview_panel_get_instance_private (CC_INFO_OVERVIEW_PANEL (object));
+
+  g_clear_pointer (&priv->graphics_data, graphics_data_free);
+
+  G_OBJECT_CLASS (cc_info_overview_panel_parent_class)->dispose (object);
+}
+
+static void
+cc_info_overview_panel_finalize (GObject *object)
+{
+  CcInfoOverviewPanelPrivate *priv = cc_info_overview_panel_get_instance_private (CC_INFO_OVERVIEW_PANEL (object));
+
+  if (priv->cancellable)
+    {
+      g_cancellable_cancel (priv->cancellable);
+      g_clear_object (&priv->cancellable);
+    }
+
+  if (priv->primary_mounts)
+    g_list_free_full (priv->primary_mounts, (GDestroyNotify) g_unix_mount_free);
+
+  g_free (priv->gnome_version);
+  g_free (priv->gnome_date);
+  g_free (priv->gnome_distributor);
+
+  G_OBJECT_CLASS (cc_info_overview_panel_parent_class)->finalize (object);
+}
+
+static void
+cc_info_overview_panel_class_init (CcInfoOverviewPanelClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);
+
+  object_class->finalize = cc_info_overview_panel_finalize;
+  object_class->dispose = cc_info_overview_panel_dispose;
+
+  gtk_widget_class_set_template_from_resource (widget_class, "/org/gnome/control-center/info/info-overview.ui");
+
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, system_image);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, version_label);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, name_entry);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, memory_label);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, processor_label);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, os_name_label);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, os_type_label);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, disk_label);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, graphics_label);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, virt_type_label);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, updates_button);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, label8);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, grid1);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, label18);
+
+  g_type_ensure (CC_TYPE_HOSTNAME_ENTRY);
+}
+
+static void
+cc_info_overview_panel_init (CcInfoOverviewPanel *self)
+{
+  CcInfoOverviewPanelPrivate *priv = cc_info_overview_panel_get_instance_private (self);
+
+  gtk_widget_init_template (GTK_WIDGET (self));
+
+  g_resources_register (cc_info_get_resource ());
+
+  priv->graphics_data = get_graphics_data ();
+
+  if (does_gnome_software_exist () || does_gpk_update_viewer_exist ())
+    g_signal_connect (priv->updates_button, "clicked", G_CALLBACK (on_updates_button_clicked), self);
+  else
+    gtk_widget_destroy (priv->updates_button);
+
+  info_overview_panel_setup_overview (self);
+  info_overview_panel_setup_virt (self);
+}
+
+GtkWidget *
+cc_info_overview_panel_new (void)
+{
+  return g_object_new (CC_TYPE_INFO_OVERVIEW_PANEL,
+                       NULL);
+}
diff --git a/panels/info/info-overview.ui b/panels/info/info-overview.ui
index ace1747..a837649 100644
--- a/panels/info/info-overview.ui
+++ b/panels/info/info-overview.ui
@@ -4,7 +4,6 @@
   <template class="CcInfoOverviewPanel" parent="CcPanel">
     <property name="visible">True</property>
     <property name="can-focus">False</property>
-    <property name="valign">center</property>
     <property name="halign">center</property>
     <property name="expand">True</property>
     <property name="margin">24</property>
@@ -14,37 +13,6 @@
         <property name="can_focus">False</property>
         <property name="spacing">6</property>
         <property name="orientation">vertical</property>
-        <child>
-          <object class="GtkImage" id="system_image">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="pixel_size">128</property>
-            <property name="pixbuf">/usr/share/icons/vendor/scalable/emblems/emblem-vendor.svg</property>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkLabel" id="os_name_label">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="label">Version 3.0</property>
-            <property name="selectable">True</property>
-            <property name="margin-bottom">24</property>
-            <attributes>
-              <attribute name="scale" value="1.25"/>
-              <attribute name="size" value="16000"/>
-            </attributes>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
         <child>
           <object class="GtkGrid" id="grid1">
             <property name="visible">True</property>
diff --git a/panels/meson.build b/panels/meson.build
index 37a3436..bcf684a 100644
--- a/panels/meson.build
+++ b/panels/meson.build
@@ -8,7 +8,7 @@ panels = [
   'info',
   'keyboard',
   'mouse',
-  'notifications',
+#  'notifications',
   'online-accounts',
   'power',
   'printers',
@@ -18,7 +18,9 @@ panels = [
   'sharing',
   'sound',
   'universal-access',
-  'user-accounts'
+  'user-accounts',
+  'font',
+  'themes'
 ]
 
 if host_is_linux
diff --git a/panels/network/cc-wifi-panel.c b/panels/network/cc-wifi-panel.c
index 09e16ba..72eabfa 100644
--- a/panels/network/cc-wifi-panel.c
+++ b/panels/network/cc-wifi-panel.c
@@ -1,6 +1,7 @@
 /* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
  *
  * Copyright (C) 2017 Georges Basile Stavracas Neto <georges.stavracas@gmail.com>
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -111,7 +112,7 @@ update_panel_visibility (NMClient *client)
   application = CC_APPLICATION (g_application_get_default ());
   cc_shell_model_set_panel_visibility (cc_application_get_model (application),
                                        "wifi",
-                                       visible ? CC_PANEL_VISIBLE : CC_PANEL_VISIBLE_IN_SEARCH);
+                                       visible ? CC_PANEL_VISIBLE : CC_PANEL_HIDDEN);
 
   g_debug ("Wi-Fi panel visible: %s", visible ? "yes" : "no");
 }
diff --git a/panels/network/connection-editor/ce-page-ethernet.c b/panels/network/connection-editor/ce-page-ethernet.c
index 7b8f5b5..41f559a 100644
--- a/panels/network/connection-editor/ce-page-ethernet.c
+++ b/panels/network/connection-editor/ce-page-ethernet.c
@@ -1,6 +1,7 @@
 /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
  *
  * Copyright (C) 2012 Red Hat, Inc
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * Licensed under the GNU General Public License Version 2
  *
@@ -74,9 +75,9 @@ connect_ethernet_page (CEPageEthernet *page)
                           G_CALLBACK (ce_spin_output_with_default),
                           GINT_TO_POINTER (mtu_def));
         gtk_spin_button_set_value (page->mtu, (gdouble) nm_setting_wired_get_mtu (setting));
-        g_signal_connect (page->mtu, "value-changed",
-                          G_CALLBACK (mtu_changed), page);
-        mtu_changed (page->mtu, page);
+//        g_signal_connect (page->mtu, "value-changed",
+//                          G_CALLBACK (mtu_changed), page);
+//        mtu_changed (page->mtu, page);
 
         g_signal_connect_swapped (page->name, "changed", G_CALLBACK (ce_page_changed), page);
         g_signal_connect_swapped (page->mtu, "value-changed", G_CALLBACK (ce_page_changed), page);
diff --git a/panels/network/connection-editor/ethernet-page.ui b/panels/network/connection-editor/ethernet-page.ui
index eb1bfb0..f195ee3 100644
--- a/panels/network/connection-editor/ethernet-page.ui
+++ b/panels/network/connection-editor/ethernet-page.ui
@@ -1,57 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.22.1 -->
 <interface>
-  <!-- interface-requires gtk+ 3.0 -->
+  <requires lib="gtk+" version="3.0"/>
   <object class="GtkAdjustment" id="adjustment1">
     <property name="upper">10000</property>
     <property name="step_increment">1</property>
     <property name="page_increment">10</property>
   </object>
-  <object class="GtkListStore" id="model1">
-    <columns>
-      <!-- column-name gchararray1 -->
-      <column type="gchararray"/>
-    </columns>
-    <data>
-      <row>
-        <col id="0" translatable="yes">Automatic</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">Twisted Pair (TP)</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">Attachment Unit Interface (AUI)</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">BNC</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">Media Independent Interface (MII)</col>
-      </row>
-    </data>
-  </object>
-  <object class="GtkListStore" id="model2">
-    <columns>
-      <!-- column-name < -->
-      <column type="gchararray"/>
-    </columns>
-    <data>
-      <row>
-        <col id="0" translatable="yes">Automatic</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">10 Mb/s</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">100 Mb/s</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">1 Gb/s</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">10 Gb/s</col>
-      </row>
-    </data>
-  </object>
   <object class="GtkGrid" id="page">
     <property name="visible">True</property>
     <property name="can_focus">False</property>
@@ -67,16 +22,14 @@
       <object class="GtkLabel" id="heading_name">
         <property name="visible">True</property>
         <property name="can_focus">False</property>
-        <property name="xalign">1</property>
         <property name="label" translatable="yes">_Name</property>
         <property name="use_underline">True</property>
         <property name="mnemonic_widget">entry_name</property>
+        <property name="xalign">1</property>
       </object>
       <packing>
         <property name="left_attach">0</property>
         <property name="top_attach">0</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
       </packing>
     </child>
     <child>
@@ -88,39 +41,20 @@
       <packing>
         <property name="left_attach">1</property>
         <property name="top_attach">0</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
       </packing>
     </child>
     <child>
       <object class="GtkLabel" id="heading_mac">
         <property name="visible">True</property>
         <property name="can_focus">False</property>
-        <property name="xalign">1</property>
         <property name="label" translatable="yes">_MAC Address</property>
         <property name="use_underline">True</property>
         <property name="mnemonic_widget">combo_mac</property>
+        <property name="xalign">1</property>
       </object>
       <packing>
         <property name="left_attach">0</property>
         <property name="top_attach">1</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
-      </packing>
-    </child>
-    <child>
-      <object class="GtkComboBoxText" id="combo_mac">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="has_entry">True</property>
-        <property name="entry_text_column">0</property>
-        <property name="id_column">1</property>
-      </object>
-      <packing>
-        <property name="left_attach">1</property>
-        <property name="top_attach">1</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
       </packing>
     </child>
     <child>
@@ -129,29 +63,24 @@
         <property name="can_focus">True</property>
         <property name="hexpand">True</property>
         <property name="invisible_char">●</property>
-        <property name="invisible_char_set">True</property>
       </object>
       <packing>
         <property name="left_attach">1</property>
         <property name="top_attach">2</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
       </packing>
     </child>
     <child>
       <object class="GtkLabel" id="heading_mtu">
         <property name="visible">True</property>
         <property name="can_focus">False</property>
-        <property name="xalign">1</property>
         <property name="label" translatable="yes">M_TU</property>
         <property name="use_underline">True</property>
         <property name="mnemonic_widget">spin_mtu</property>
+        <property name="xalign">1</property>
       </object>
       <packing>
         <property name="left_attach">0</property>
         <property name="top_attach">3</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
       </packing>
     </child>
     <child>
@@ -159,56 +88,67 @@
         <property name="visible">True</property>
         <property name="can_focus">False</property>
         <property name="valign">center</property>
-        <property name="xalign">1</property>
         <property name="label" translatable="yes">_Cloned Address</property>
         <property name="use_underline">True</property>
         <property name="mnemonic_widget">entry_cloned_mac</property>
+        <property name="xalign">1</property>
       </object>
       <packing>
         <property name="left_attach">0</property>
         <property name="top_attach">2</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
+      </packing>
+    </child>
+    <child>
+      <object class="GtkLabel" id="filler">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+      </object>
+      <packing>
+        <property name="left_attach">2</property>
+        <property name="top_attach">0</property>
       </packing>
     </child>
     <child>
       <object class="GtkLabel" id="label_mtu">
         <property name="visible">True</property>
         <property name="can_focus">False</property>
+        <property name="halign">center</property>
+        <property name="valign">center</property>
         <property name="label" translatable="yes">bytes</property>
       </object>
       <packing>
         <property name="left_attach">2</property>
         <property name="top_attach">3</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
       </packing>
     </child>
     <child>
       <object class="GtkSpinButton" id="spin_mtu">
         <property name="visible">True</property>
         <property name="can_focus">True</property>
+        <property name="hexpand">True</property>
         <property name="invisible_char">●</property>
-        <property name="invisible_char_set">True</property>
         <property name="adjustment">adjustment1</property>
       </object>
       <packing>
         <property name="left_attach">1</property>
         <property name="top_attach">3</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
       </packing>
     </child>
     <child>
-      <object class="GtkLabel" id="filler">
+      <object class="GtkComboBoxText" id="combo_mac">
         <property name="visible">True</property>
         <property name="can_focus">False</property>
+        <property name="has_entry">True</property>
+        <child internal-child="entry">
+          <object class="GtkEntry">
+            <property name="visible">True</property>
+            <property name="can_focus">True</property>
+          </object>
+        </child>
       </object>
       <packing>
-        <property name="left_attach">2</property>
-        <property name="top_attach">0</property>
-        <property name="width">1</property>
-        <property name="height">1</property>
+        <property name="left_attach">1</property>
+        <property name="top_attach">1</property>
       </packing>
     </child>
     <child>
@@ -217,15 +157,6 @@
     <child>
       <placeholder/>
     </child>
-    <child>
-      <placeholder/>
-    </child>
-    <child>
-      <placeholder/>
-    </child>
-    <child>
-      <placeholder/>
-    </child>
   </object>
   <object class="GtkSizeGroup" id="sizegroup1">
     <widgets>
@@ -233,4 +164,50 @@
       <widget name="filler"/>
     </widgets>
   </object>
+  <object class="GtkListStore" id="model1">
+    <columns>
+      <!-- column-name gchararray1 -->
+      <column type="gchararray"/>
+    </columns>
+    <data>
+      <row>
+        <col id="0" translatable="yes">Automatic</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">Twisted Pair (TP)</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">Attachment Unit Interface (AUI)</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">BNC</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">Media Independent Interface (MII)</col>
+      </row>
+    </data>
+  </object>
+  <object class="GtkListStore" id="model2">
+    <columns>
+      <!-- column-name < -->
+      <column type="gchararray"/>
+    </columns>
+    <data>
+      <row>
+        <col id="0" translatable="yes">Automatic</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">10 Mb/s</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">100 Mb/s</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">1 Gb/s</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">10 Gb/s</col>
+      </row>
+    </data>
+  </object>
 </interface>
diff --git a/panels/network/net-device-ethernet.c b/panels/network/net-device-ethernet.c
index afb5443..64c661c 100644
--- a/panels/network/net-device-ethernet.c
+++ b/panels/network/net-device-ethernet.c
@@ -1,6 +1,7 @@
 /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
  *
  * Copyright (C) 2011-2012 Richard Hughes <richard@hughsie.com>
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * Licensed under the GNU General Public License Version 2
  *
@@ -459,6 +460,55 @@ add_profile (GtkButton *button, NetDeviceEthernet *device)
         net_connection_editor_run (editor);
 }
 
+static void
+ethernet_connected (GObject *source_object,
+                  GAsyncResult *res,
+                  NetDeviceEthernet *device)
+{
+    gboolean success = FALSE;
+    GtkWidget *widget;
+    GError **error;
+//    NMClient *client;
+//    NMDevice *nm_device;
+//    NMDeviceState state;
+//    NMActiveConnection *nm_ac;
+//    NMActiveConnectionState nm_acs;
+
+
+//    client = net_object_get_client (NET_OBJECT (device));
+//    nm_device = net_device_get_nm_device (NET_DEVICE (device));
+//    nm_ac = nm_client_activate_connection_finish (client, res, error);
+//    nm_acs = nm_active_connection_get_state (nm_ac);
+    success = g_async_result_legacy_propagate_error (res, error);
+
+    widget = GTK_WIDGET (gtk_builder_get_object (device->builder, "device_off_switch"));
+    if (success)
+      gtk_switch_set_state (GTK_SWITCH (widget), FALSE);
+
+    device->is_authenticating = FALSE;
+}
+
+static void
+ethernet_disconnected (GObject *source_object,
+                  GAsyncResult *res,
+                  NetDeviceEthernet *device)
+
+{
+    GError **error;
+    gboolean success = FALSE;
+    NMDevice *nm_device;
+    GtkWidget *widget;
+
+    nm_device = net_device_get_nm_device (NET_DEVICE (device));
+    success = nm_device_disconnect_finish (nm_device, res, error);
+
+    widget = GTK_WIDGET (gtk_builder_get_object (device->builder, "device_off_switch"));
+    if (!success)
+        gtk_switch_set_state (GTK_SWITCH (widget), TRUE);
+
+    device->is_authenticating = FALSE;
+}
+
 static void
 device_off_toggled (GtkSwitch         *sw,
                     GParamSpec        *pspec,
@@ -467,12 +517,19 @@ device_off_toggled (GtkSwitch         *sw,
         NMClient *client;
         NMDevice *nm_device;
         NMConnection *connection;
+        GAsyncResult *result;
+        GError **error;
+        gboolean success;
 
         if (device->updating_device)
                 return;
 
+        if (device->is_authenticating)
+            return;
+
         client = net_object_get_client (NET_OBJECT (device));
         nm_device = net_device_get_nm_device (NET_DEVICE (device));
+        device->is_authenticating = TRUE;
 
         if (gtk_switch_get_active (sw)) {
                 connection = net_device_get_find_connection (NET_DEVICE (device));
@@ -480,10 +537,10 @@ device_off_toggled (GtkSwitch         *sw,
                         nm_client_activate_connection_async (client,
                                                              connection,
                                                              nm_device,
-                                                             NULL, NULL, NULL, NULL);
+                                                             NULL, NULL, ethernet_connected, device);
                 }
         } else {
-                nm_device_disconnect (nm_device, NULL, NULL);
+                nm_device_disconnect_async (nm_device, NULL, ethernet_disconnected, device);
         }
 }
 
@@ -607,6 +664,7 @@ net_device_ethernet_init (NetDeviceEthernet *device)
         }
 
         device->connections = g_hash_table_new (NULL, NULL);
+        device->is_authenticating = FALSE;
 
         g_signal_connect (device, "notify::title", G_CALLBACK (device_title_changed), NULL);
 }
diff --git a/panels/network/net-device-ethernet.h b/panels/network/net-device-ethernet.h
index 0d92fd1..86d8fe4 100644
--- a/panels/network/net-device-ethernet.h
+++ b/panels/network/net-device-ethernet.h
@@ -1,6 +1,7 @@
 /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
  *
  * Copyright (C) 2012 Red Hat, Inc.
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * Licensed under the GNU General Public License Version 2
  *
@@ -51,6 +52,7 @@ struct _NetDeviceEthernet
         GtkWidget *details_button;
         GtkWidget *add_profile_button;
         gboolean   updating_device;
+        gboolean   is_authenticating;
 
         GHashTable *connections;
 };
diff --git a/panels/power/cc-power-panel.c b/panels/power/cc-power-panel.c
index ecf046b..6e283f9 100644
--- a/panels/power/cc-power-panel.c
+++ b/panels/power/cc-power-panel.c
@@ -3,6 +3,7 @@
  * Copyright (C) 2010 Red Hat, Inc
  * Copyright (C) 2008 William Jon McCann <jmccann@redhat.com>
  * Copyright (C) 2010,2015 Richard Hughes <richard@hughsie.com>
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -1017,7 +1018,7 @@ sync_screen_brightness (CcPowerPanel *self)
   if (visible)
     {
       range = GTK_RANGE (self->brightness_scale);
-      gtk_range_set_range (range, 0, 100);
+      gtk_range_set_range (range, 1, 100);
       gtk_range_set_increments (range, 1, 10);
       self->setting_brightness = TRUE;
       gtk_range_set_value (range, brightness);
@@ -1600,29 +1601,51 @@ keynav_failed (GtkWidget *list, GtkDirectionType direction, CcPowerPanel *self)
   return FALSE;
 }
 
+// disable blank screen combo box
+//static void
+//combo_idle_delay_changed_cb (GtkWidget *widget, CcPowerPanel *self)
+//{
+//  GtkTreeIter iter;
+//  GtkTreeModel *model;
+//  gint value;
+//  gboolean ret;
+//
+//  /* no selection */
+//  ret = gtk_combo_box_get_active_iter (GTK_COMBO_BOX(widget), &iter);
+//  if (!ret)
+//    return;
+//
+//  /* get entry */
+//  model = gtk_combo_box_get_model (GTK_COMBO_BOX(widget));
+//  gtk_tree_model_get (model, &iter,
+//                      1, &value,
+//                      -1);
+//
+//  /* set both keys */
+//  g_settings_set_uint (self->session_settings, "idle-delay", value);
+//}
+
 static void
-combo_idle_delay_changed_cb (GtkWidget *widget, CcPowerPanel *self)
+scale_idle_delay_changed_cb (GtkRange *range, CcPowerPanel *self)
 {
-  GtkTreeIter iter;
-  GtkTreeModel *model;
-  gint value;
+  guint value;
   gboolean ret;
 
-  /* no selection */
-  ret = gtk_combo_box_get_active_iter (GTK_COMBO_BOX(widget), &iter);
-  if (!ret)
-    return;
+  value = (guint) gtk_range_get_value (range);
+  value *= 60;
 
-  /* get entry */
-  model = gtk_combo_box_get_model (GTK_COMBO_BOX(widget));
-  gtk_tree_model_get (model, &iter,
-                      1, &value,
-                      -1);
-
-  /* set both keys */
   g_settings_set_uint (self->session_settings, "idle-delay", value);
 }
 
+static gchar*
+format_idle_delay_value_cb (GtkScale *scale, gdouble value, gpointer data)
+{
+  if ((gint)value <= 0)
+    return g_strdup (_("Never"));
+
+  return g_strdup_printf (_("%d minute"), (int)value);
+}
+
 static void
 combo_power_button_changed_cb (GtkWidget *widget, CcPowerPanel *self)
 {
@@ -1668,16 +1691,19 @@ add_brightness_row (CcPowerPanel  *self,
   gtk_size_group_add_widget (self->battery_sizegroup, label);
   box2 = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 12);
   w = gtk_label_new ("");
-  gtk_box_pack_start (GTK_BOX (box2), w, FALSE, TRUE, 0);
+  gtk_box_pack_start (GTK_BOX (box2), w, FALSE, FALSE, 0);
   gtk_size_group_add_widget (self->charge_sizegroup, w);
 
-  *brightness_scale = scale = gtk_scale_new_with_range (GTK_ORIENTATION_HORIZONTAL, 0, 100, 1);
-  gtk_label_set_mnemonic_widget (GTK_LABEL (label), scale);
-  gtk_scale_set_draw_value (GTK_SCALE (scale), FALSE);
+  *brightness_scale = scale = gtk_scale_new_with_range (GTK_ORIENTATION_HORIZONTAL, 1, 100, 1);
+  //gtk_label_set_mnemonic_widget (GTK_LABEL (label), scale);
+  gtk_scale_set_draw_value (GTK_SCALE (scale), TRUE);
+  gtk_scale_set_value_pos (GTK_SCALE (scale), GTK_POS_BOTTOM);
   gtk_widget_set_margin_start (scale, 20);
   gtk_widget_set_margin_end (scale, 20);
-  gtk_box_pack_start (GTK_BOX (box2), scale, TRUE, TRUE, 0);
+  gtk_widget_set_size_request (scale, 350, -1);
+  gtk_box_pack_end (GTK_BOX (box2), scale, FALSE, TRUE, 0);
   gtk_size_group_add_widget (self->level_sizegroup, scale);
+
   g_signal_connect (scale, "value-changed",
                     G_CALLBACK (brightness_slider_value_changed_cb), self);
 
@@ -1738,6 +1764,7 @@ add_power_saving_section (CcPowerPanel *self)
 {
   GtkWidget *widget, *box, *label, *row;
   GtkWidget *combo;
+  GtkWidget *scale;
   GtkWidget *box2;
   GtkWidget *sw;
   GtkWidget *w;
@@ -1823,14 +1850,26 @@ add_power_saving_section (CcPowerPanel *self)
   box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 50);
   gtk_container_add (GTK_CONTAINER (row), box);
 
+  box2 = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
+  gtk_widget_set_margin_start (box2, 20);
+  gtk_widget_set_margin_end (box2, 20);
+  gtk_widget_set_margin_top (box2, 6);
+  gtk_widget_set_margin_bottom (box2, 6);
+  gtk_box_pack_start (GTK_BOX (box), box2, TRUE, TRUE, 0);
+
   label = gtk_label_new (_("_Dim screen when inactive"));
   gtk_widget_set_halign (label, GTK_ALIGN_START);
   gtk_label_set_use_underline (GTK_LABEL (label), TRUE);
-  gtk_widget_set_margin_start (label, 20);
-  gtk_widget_set_margin_end (label, 20);
-  gtk_widget_set_margin_top (label, 6);
-  gtk_widget_set_margin_bottom (label, 6);
-  gtk_box_pack_start (GTK_BOX (box), label, TRUE, TRUE, 0);
+//  gtk_widget_set_margin_start (label, 20);
+//  gtk_widget_set_margin_end (label, 20);
+//  gtk_widget_set_margin_top (label, 6);
+//  gtk_widget_set_margin_bottom (label, 6);
+  gtk_box_pack_start (GTK_BOX (box2), label, TRUE, TRUE, 0);
+
+  w = gtk_label_new (_("Screen dims when the computer operates on battery power."));
+  gtk_widget_set_halign (w, GTK_ALIGN_START);
+  gtk_style_context_add_class (gtk_widget_get_style_context (w), GTK_STYLE_CLASS_DIM_LABEL);
+  gtk_box_pack_start (GTK_BOX (box2), w, TRUE, TRUE, 0);
 
   sw = gtk_switch_new ();
   g_settings_bind (self->gsd_settings, "idle-dim",
@@ -1843,6 +1882,8 @@ add_power_saving_section (CcPowerPanel *self)
   gtk_label_set_mnemonic_widget (GTK_LABEL (label), sw);
   gtk_container_add (GTK_CONTAINER (widget), row);
   gtk_size_group_add_widget (self->row_sizegroup, row);
+  gtk_widget_show_all (row);
+  gtk_widget_set_no_show_all (self->dim_screen_row, TRUE);
 
   row = no_prelight_row_new ();
   box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 50);
@@ -1855,21 +1896,40 @@ add_power_saving_section (CcPowerPanel *self)
   gtk_widget_set_margin_end (label, 20);
   gtk_widget_set_margin_top (label, 6);
   gtk_widget_set_margin_bottom (label, 6);
-  gtk_box_pack_start (GTK_BOX (box), label, TRUE, TRUE, 0);
-
-  combo = gtk_combo_box_text_new ();
-  gtk_combo_box_set_entry_text_column (GTK_COMBO_BOX (combo), 0);
-  gtk_combo_box_set_model (GTK_COMBO_BOX (combo),
-                           GTK_TREE_MODEL (self->liststore_idle_time));
+  gtk_box_pack_start (GTK_BOX (box), label, FALSE, FALSE, 0);
+
+  //combo = gtk_combo_box_text_new ();
+  //gtk_combo_box_set_entry_text_column (GTK_COMBO_BOX (combo), 0);
+  //gtk_combo_box_set_model (GTK_COMBO_BOX (combo),
+  //                         GTK_TREE_MODEL (self->liststore_idle_time));
+  //value = g_settings_get_uint (self->session_settings, "idle-delay");
+  //set_value_for_combo (GTK_COMBO_BOX (combo), value);
+  //g_signal_connect (combo, "changed",
+  //                  G_CALLBACK (combo_idle_delay_changed_cb), self);
+  //gtk_widget_set_margin_start (combo, 20);
+  //gtk_widget_set_margin_end (combo, 20);
+  //gtk_widget_set_valign (combo, GTK_ALIGN_CENTER);
+  //gtk_box_pack_start (GTK_BOX (box), combo, FALSE, TRUE, 0);
+  //gtk_label_set_mnemonic_widget (GTK_LABEL (label), combo);
+  //gtk_container_add (GTK_CONTAINER (widget), row);
+  //gtk_size_group_add_widget (self->row_sizegroup, row);
+
+  scale = gtk_scale_new_with_range (GTK_ORIENTATION_HORIZONTAL, 0, 60, 1);
   value = g_settings_get_uint (self->session_settings, "idle-delay");
-  set_value_for_combo (GTK_COMBO_BOX (combo), value);
-  g_signal_connect (combo, "changed",
-                    G_CALLBACK (combo_idle_delay_changed_cb), self);
-  gtk_widget_set_margin_start (combo, 20);
-  gtk_widget_set_margin_end (combo, 20);
-  gtk_widget_set_valign (combo, GTK_ALIGN_CENTER);
-  gtk_box_pack_start (GTK_BOX (box), combo, FALSE, TRUE, 0);
-  gtk_label_set_mnemonic_widget (GTK_LABEL (label), combo);
+  gtk_range_set_value (GTK_RANGE (scale), value / 60);
+  g_signal_connect (G_OBJECT (scale), "format-value",
+                    G_CALLBACK (format_idle_delay_value_cb), NULL);
+  g_signal_connect (scale, "value-changed",
+                    G_CALLBACK (scale_idle_delay_changed_cb), self);
+
+  gtk_scale_set_draw_value (GTK_SCALE (scale), TRUE);
+  gtk_scale_set_value_pos (GTK_SCALE (scale), GTK_POS_BOTTOM);
+  gtk_widget_set_margin_start (scale, 20);
+  gtk_widget_set_margin_end (scale, 20);
+  gtk_widget_set_margin_top (scale, 6);
+  gtk_widget_set_margin_bottom (scale, 6);
+  gtk_widget_set_size_request (scale, 350, -1);
+  gtk_box_pack_end (GTK_BOX (box), scale, FALSE, TRUE, 0);
   gtk_container_add (GTK_CONTAINER (widget), row);
   gtk_size_group_add_widget (self->row_sizegroup, row);
 
diff --git a/panels/power/power.ui b/panels/power/power.ui
index f6a2b09..7ee3146 100644
--- a/panels/power/power.ui
+++ b/panels/power/power.ui
@@ -95,6 +95,10 @@
         <col id="0" translatable="yes">15 minutes</col>
         <col id="1">900</col>
       </row>
+      <row>
+        <col id="0" translatable="yes">30 minutes</col>
+        <col id="1">1800</col>
+      </row>
       <row>
         <col id="0" translatable="yes">Never</col>
         <col id="1">0</col>
diff --git a/panels/printers/cc-printers-panel.c b/panels/printers/cc-printers-panel.c
index f05a3ec..c6936da 100644
--- a/panels/printers/cc-printers-panel.c
+++ b/panels/printers/cc-printers-panel.c
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 Red Hat, Inc
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -77,6 +78,8 @@ struct _CcPrintersPanelPrivate
 
   GPermission *permission;
   gboolean is_authorized;
+  gboolean is_authenticating;
+
 
   GSettings *lockdown_settings;
 
@@ -249,7 +252,7 @@ cc_printers_panel_constructed (GObject *object)
 
   widget = (GtkWidget*)
     gtk_builder_get_object (priv->builder, "lock-button");
-  gtk_lock_button_set_permission (GTK_LOCK_BUTTON (widget), priv->permission);
+  //gtk_lock_button_set_permission (GTK_LOCK_BUTTON (widget), priv->permission);
 
   widget = (GtkWidget*)
     gtk_builder_get_object (priv->builder, "search-button");
@@ -848,15 +851,21 @@ on_printer_changed (PpPrinterEntry *printer_entry,
 
 static void
 add_printer_entry (CcPrintersPanel *self,
-                   cups_dest_t      printer)
+                   cups_dest_t      printer,
+				   gint             index)
 {
   CcPrintersPanelPrivate *priv;
   PpPrinterEntry         *printer_entry;
+  PpPrinterEntry         *printer_entry_tmp;
   GtkWidget              *content;
   GSList                 *widgets, *l;
 
   priv = PRINTERS_PANEL_PRIVATE (self);
 
+  printer_entry_tmp = PP_PRINTER_ENTRY (g_hash_table_lookup (priv->printer_entries, printer.name));
+  if (printer_entry_tmp && pp_printer_entry_is_activate_jobs_dialog (printer_entry_tmp))
+      return;
+
   content = (GtkWidget*) gtk_builder_get_object (priv->builder, "content");
 
   printer_entry = pp_printer_entry_new (printer, priv->is_authorized);
@@ -879,7 +888,7 @@ add_printer_entry (CcPrintersPanel *self,
                     G_CALLBACK (on_printer_renamed),
                     self);
 
-  gtk_list_box_insert (GTK_LIST_BOX (content), GTK_WIDGET (printer_entry), -1);
+  gtk_list_box_insert (GTK_LIST_BOX (content), GTK_WIDGET (printer_entry), index);
   gtk_widget_show_all (content);
 
   g_hash_table_insert (priv->printer_entries, g_strdup (printer.name), printer_entry);
@@ -910,6 +919,20 @@ set_current_page (GObject      *source_object,
   update_sensitivity (user_data);
 }
 
+static void
+gtk_widget_destroy_cb (GtkWidget *widget, gpointer data)
+{
+  PpPrinterEntry         *printer_entry;
+  printer_entry = PP_PRINTER_ENTRY (widget);
+
+  if (printer_entry && pp_printer_entry_is_activate_jobs_dialog (printer_entry))
+  {
+      return;
+  }
+
+  gtk_widget_destroy (widget);
+}
+
 static void
 actualize_printers_list_cb (GObject      *source_object,
                             GAsyncResult *result,
@@ -952,7 +975,7 @@ actualize_printers_list_cb (GObject      *source_object,
     gtk_stack_set_visible_child_name (GTK_STACK (widget), "printers-list");
 
   widget = (GtkWidget*) gtk_builder_get_object (priv->builder, "content");
-  gtk_container_foreach (GTK_CONTAINER (widget), (GtkCallback) gtk_widget_destroy, NULL);
+  gtk_container_foreach (GTK_CONTAINER (widget), (GtkCallback) gtk_widget_destroy_cb, NULL);
 
   for (i = 0; i < priv->num_dests; i++)
     {
@@ -969,7 +992,7 @@ actualize_printers_list_cb (GObject      *source_object,
       if (new_printer_available && g_strcmp0 (priv->dests[i].name, priv->old_printer_name) == 0)
           continue;
 
-      add_printer_entry (self, priv->dests[i]);
+      add_printer_entry (self, priv->dests[i], i);
     }
 
   if (!priv->entries_filled)
@@ -1081,6 +1104,44 @@ new_printer_dialog_response_cb (PpNewPrinterDialog *dialog,
                             allocation.y - gtk_widget_get_margin_top (printer_entry));
 }
 
+static void
+acquired_permission (GObject *object,
+                     GAsyncResult *res,
+                     gpointer data)
+{
+  CcPrintersPanel        *self = (CcPrintersPanel*) data;
+  CcPrintersPanelPrivate *priv = PRINTERS_PANEL_PRIVATE (self);
+
+  g_autoptr(GError) error = NULL;
+  gboolean allowed;
+
+  priv->is_authenticating = FALSE;
+  allowed = g_permission_acquire_finish (priv->permission, res, &error);
+  if (!allowed)
+    return;
+
+  priv->is_authorized = TRUE;
+
+  actualize_printers_list (data);
+  update_sensitivity (data);
+}
+
+static void
+on_clicked_auth (GtkButton *button,
+                 gpointer user_data)
+{
+  CcPrintersPanel         *self = (CcPrintersPanel*) user_data;
+  CcPrintersPanelPrivate  *priv = PRINTERS_PANEL_PRIVATE (self);
+
+  if (!priv->is_authenticating)
+  {
+    priv->is_authenticating = TRUE;
+    g_permission_acquire_async (priv->permission, NULL,
+                                acquired_permission,
+                                self);
+  }
+}
+
 static void
 printer_add_cb (GtkToolButton *toolbutton,
                 gpointer       user_data)
@@ -1105,6 +1166,7 @@ printer_add_cb (GtkToolButton *toolbutton,
                     "response",
                     G_CALLBACK (new_printer_dialog_response_cb),
                     self);
+
 }
 
 static void
@@ -1116,6 +1178,7 @@ update_sensitivity (gpointer user_data)
   GtkWidget               *widget;
   gboolean                 local_server = TRUE;
   gboolean                 no_cups = FALSE;
+  const gchar *test;
 
   priv = PRINTERS_PANEL_PRIVATE (self);
 
@@ -1129,6 +1192,7 @@ update_sensitivity (gpointer user_data)
     priv->is_authorized ? PAGE_ADDPRINTER : PAGE_LOCK);
 
   widget = (GtkWidget*) gtk_builder_get_object (priv->builder, "main-vbox");
+  test = gtk_stack_get_visible_child_name (GTK_STACK (widget));
   if (g_strcmp0 (gtk_stack_get_visible_child_name (GTK_STACK (widget)), "no-cups-page") == 0)
     no_cups = TRUE;
 
@@ -1384,6 +1448,8 @@ cc_printers_panel_init (CcPrintersPanel *self)
   priv->actualize_printers_list_cancellable = g_cancellable_new ();
   priv->cups_status_check_cancellable = g_cancellable_new ();
 
+  priv->is_authenticating = FALSE;
+
   builder_result = gtk_builder_add_objects_from_resource (priv->builder,
                                                           "/org/gnome/control-center/printers/printers.ui",
                                                           objects, &error);
@@ -1400,6 +1466,10 @@ cc_printers_panel_init (CcPrintersPanel *self)
     gtk_builder_get_object (priv->builder, "headerbar-buttons");
   priv->headerbar_buttons = widget;
 
+    g_signal_connect (GTK_BUTTON (gtk_builder_get_object (priv->builder, "lock-button")),
+                      "clicked",
+                      G_CALLBACK (on_clicked_auth), self);
+
   priv->notification = (GtkRevealer*)
     gtk_builder_get_object (priv->builder, "notification");
 
@@ -1457,8 +1527,8 @@ cc_printers_panel_init (CcPrintersPanel *self)
     }
   else
     g_warning ("Your system does not have the cups-pk-helper's policy \
-\"org.opensuse.cupspkhelper.mechanism.all-edit\" installed. \
-Please check your installation");
+      \"org.opensuse.cupspkhelper.mechanism.all-edit\" installed. \
+      Please check your installation");
 
   priv->subscription_renew_cancellable = g_cancellable_new ();
 
diff --git a/panels/printers/pp-printer-entry.c b/panels/printers/pp-printer-entry.c
index 8907ca9..c124788 100644
--- a/panels/printers/pp-printer-entry.c
+++ b/panels/printers/pp-printer-entry.c
@@ -676,6 +676,12 @@ printer_jobs_dialog_free_cb (GtkDialog *dialog,
   pp_jobs_dialog_free ((PpJobsDialog *) user_data);
 }
 
+gboolean
+pp_printer_entry_is_activate_jobs_dialog (PpPrinterEntry *self)
+{
+    return self->pp_jobs_dialog == NULL ? FALSE : TRUE;
+}
+
 void
 pp_printer_entry_show_jobs_dialog (PpPrinterEntry *self)
 {
diff --git a/panels/printers/pp-printer-entry.h b/panels/printers/pp-printer-entry.h
index d56424f..557301f 100644
--- a/panels/printers/pp-printer-entry.h
+++ b/panels/printers/pp-printer-entry.h
@@ -42,4 +42,6 @@ void            pp_printer_entry_show_jobs_dialog (PpPrinterEntry *self);
 
 void            pp_printer_entry_authenticate_jobs (PpPrinterEntry *self);
 
+gboolean        pp_printer_entry_is_activate_jobs_dialog (PpPrinterEntry *self);
+
 #endif /* PP_PRINTER_ENTRY_H */
diff --git a/panels/printers/printers.ui b/panels/printers/printers.ui
index 2894b7e..4051776 100644
--- a/panels/printers/printers.ui
+++ b/panels/printers/printers.ui
@@ -7,6 +7,11 @@
     <child>
       <object class="GtkLockButton" id="lock-button">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="text_lock" translatable="yes">Unlock</property>
+        <property name="text_unlock" translatable="yes">Locked</property>
+        <property name="tooltip_lock" translatable="yes">Dialog is locked.
+Click to make changes</property>
       </object>
       <packing>
         <property name="name">_lock</property>
diff --git a/panels/region/cc-region-panel.c b/panels/region/cc-region-panel.c
index 1061466..5060b98 100644
--- a/panels/region/cc-region-panel.c
+++ b/panels/region/cc-region-panel.c
@@ -40,11 +40,6 @@
 #include <libgnome-desktop/gnome-languages.h>
 #include <libgnome-desktop/gnome-xkb-info.h>
 
-#ifdef HAVE_IBUS
-#include <ibus.h>
-#include "cc-ibus-utils.h"
-#endif
-
 #include <act/act.h>
 
 #define GNOME_DESKTOP_INPUT_SOURCES_DIR "org.gnome.desktop.input-sources"
@@ -97,24 +92,9 @@ struct _CcRegionPanel {
         gchar *system_language;
         gchar *system_region;
 
-        GtkWidget *input_section;
-        GtkWidget *options_button;
-        GtkWidget *input_list;
-        GtkWidget *add_input;
-        GtkWidget *remove_input;
-        GtkWidget *move_up_input;
-        GtkWidget *move_down_input;
-        GtkWidget *show_config;
-        GtkWidget *show_layout;
         GtkWidget *restart_button;
         GtkWidget *language_list;
 
-        GSettings *input_settings;
-        GnomeXkbInfo *xkb_info;
-#ifdef HAVE_IBUS
-        IBusBus *ibus;
-        GHashTable *ibus_engines;
-#endif
 };
 
 CC_PANEL_REGISTER (CcRegionPanel, cc_region_panel)
@@ -142,12 +122,6 @@ cc_region_panel_finalize (GObject *object)
         g_clear_object (&self->localed);
         g_clear_object (&self->session);
         g_clear_object (&self->locale_settings);
-        g_clear_object (&self->input_settings);
-        g_clear_object (&self->xkb_info);
-#ifdef HAVE_IBUS
-        g_clear_object (&self->ibus);
-        g_clear_pointer (&self->ibus_engines, g_hash_table_destroy);
-#endif
         g_free (self->language);
         g_free (self->region);
         g_free (self->system_language);
@@ -468,11 +442,6 @@ show_region_chooser (CcRegionPanel *self)
         gtk_window_present (GTK_WINDOW (chooser));
 }
 
-static void show_input_chooser (CcRegionPanel *self);
-static void remove_selected_input (CcRegionPanel *self);
-static void move_selected_input (CcRegionPanel *self,
-                                 SystemOp       op);
-
 static void
 permission_acquired (GObject      *source,
                      GAsyncResult *res,
@@ -497,16 +466,6 @@ permission_acquired (GObject      *source,
                 case CHOOSE_REGION:
                         show_region_chooser (self);
                         break;
-                case ADD_INPUT:
-                        show_input_chooser (self);
-                        break;
-                case REMOVE_INPUT:
-                        remove_selected_input (self);
-                        break;
-                case MOVE_UP_INPUT:
-                case MOVE_DOWN_INPUT:
-                        move_selected_input (self, self->op);
-                        break;
                 default:
                         g_warning ("Unknown privileged operation: %d\n", self->op);
                         break;
@@ -623,262 +582,6 @@ setup_language_section (CcRegionPanel *self)
         update_region_from_setting (self);
 }
 
-#ifdef HAVE_IBUS
-static void
-update_ibus_active_sources (CcRegionPanel *self)
-{
-        g_autoptr(GList) rows = NULL;
-        GList *l;
-        GtkWidget *row;
-        const gchar *type;
-        const gchar *id;
-        IBusEngineDesc *engine_desc;
-        GtkWidget *label;
-
-        rows = gtk_container_get_children (GTK_CONTAINER (self->input_list));
-        for (l = rows; l; l = l->next) {
-                row = l->data;
-                type = g_object_get_data (G_OBJECT (row), "type");
-                id = g_object_get_data (G_OBJECT (row), "id");
-                if (g_strcmp0 (type, INPUT_SOURCE_TYPE_IBUS) != 0)
-                        continue;
-
-                engine_desc = g_hash_table_lookup (self->ibus_engines, id);
-                if (engine_desc) {
-                        g_autofree gchar *display_name = engine_get_display_name (engine_desc);
-                        label = GTK_WIDGET (g_object_get_data (G_OBJECT (row), "label"));
-                        gtk_label_set_text (GTK_LABEL (label), display_name);
-                }
-        }
-}
-
-static void
-update_input_chooser (CcRegionPanel *self)
-{
-        GtkWidget *chooser;
-
-        chooser = g_object_get_data (G_OBJECT (self), "input-chooser");
-        if (!chooser)
-                return;
-
-        cc_input_chooser_set_ibus_engines (chooser, self->ibus_engines);
-}
-
-static void
-fetch_ibus_engines_result (GObject       *object,
-                           GAsyncResult  *result,
-                           CcRegionPanel *self)
-{
-        g_autoptr(GList) list = NULL;
-        GList *l;
-        g_autoptr(GError) error = NULL;
-
-        list = ibus_bus_list_engines_async_finish (IBUS_BUS (object), result, &error);
-        if (!list && error) {
-                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
-                        g_warning ("Couldn't finish IBus request: %s", error->message);
-                return;
-        }
-
-        /* Maps engine ids to engine description objects */
-        self->ibus_engines = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, g_object_unref);
-
-        for (l = list; l; l = l->next) {
-                IBusEngineDesc *engine = l->data;
-                const gchar *engine_id = ibus_engine_desc_get_name (engine);
-
-                if (g_str_has_prefix (engine_id, "xkb:"))
-                        g_object_unref (engine);
-                else
-                        g_hash_table_replace (self->ibus_engines, (gpointer)engine_id, engine);
-        }
-
-        update_ibus_active_sources (self);
-        update_input_chooser (self);
-}
-
-static void
-fetch_ibus_engines (CcRegionPanel *self)
-{
-        ibus_bus_list_engines_async (self->ibus,
-                                     -1,
-                                     self->cancellable,
-                                     (GAsyncReadyCallback)fetch_ibus_engines_result,
-                                     self);
-
-  /* We've got everything we needed, don't want to be called again. */
-  g_signal_handlers_disconnect_by_func (self->ibus, fetch_ibus_engines, self);
-}
-
-static void
-maybe_start_ibus (void)
-{
-        /* IBus doesn't export API in the session bus. The only thing
-         * we have there is a well known name which we can use as a
-         * sure-fire way to activate it.
-         */
-        g_bus_unwatch_name (g_bus_watch_name (G_BUS_TYPE_SESSION,
-                                              IBUS_SERVICE_IBUS,
-                                              G_BUS_NAME_WATCHER_FLAGS_AUTO_START,
-                                              NULL,
-                                              NULL,
-                                              NULL,
-                                              NULL));
-}
-
-static GDesktopAppInfo *
-setup_app_info_for_id (const gchar *id)
-{
-        g_autofree gchar *desktop_file_name = NULL;
-        g_auto(GStrv) strv = NULL;
-
-        strv = g_strsplit (id, ":", 2);
-        desktop_file_name = g_strdup_printf ("ibus-setup-%s.desktop", strv[0]);
-
-        return g_desktop_app_info_new (desktop_file_name);
-}
-#endif
-
-static void
-remove_no_input_row (GtkContainer *list)
-{
-        g_autoptr(GList) l = NULL;
-
-        l = gtk_container_get_children (list);
-        if (!l)
-                return;
-        if (l->next != NULL)
-                return;
-        if (g_strcmp0 (g_object_get_data (G_OBJECT (l->data), "type"), "none") == 0)
-                gtk_container_remove (list, GTK_WIDGET (l->data));
-}
-
-static GtkWidget *
-add_input_row (CcRegionPanel   *self,
-               const gchar     *type,
-               const gchar     *id,
-               const gchar     *name,
-               GDesktopAppInfo *app_info)
-{
-        GtkWidget *row;
-        GtkWidget *box;
-        GtkWidget *label;
-        GtkWidget *image;
-
-        remove_no_input_row (GTK_CONTAINER (self->input_list));
-
-        row = gtk_list_box_row_new ();
-        box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
-        gtk_container_add (GTK_CONTAINER (row), box);
-        label = gtk_label_new (name);
-        gtk_widget_set_halign (label, GTK_ALIGN_START);
-        gtk_widget_set_margin_start (label, 20);
-        gtk_widget_set_margin_end (label, 20);
-        gtk_widget_set_margin_top (label, 18);
-        gtk_widget_set_margin_bottom (label, 18);
-        gtk_box_pack_start (GTK_BOX (box), label, TRUE, TRUE, 0);
-
-        if (strcmp (type, INPUT_SOURCE_TYPE_IBUS) == 0) {
-                image = gtk_image_new_from_icon_name ("system-run-symbolic", GTK_ICON_SIZE_BUTTON);
-                gtk_widget_set_margin_start (image, 20);
-                gtk_widget_set_margin_end (image, 20);
-                gtk_widget_set_margin_top (image, 6);
-                gtk_widget_set_margin_bottom (image, 6);
-                gtk_style_context_add_class (gtk_widget_get_style_context (image), "dim-label");
-                gtk_box_pack_start (GTK_BOX (box), image, FALSE, TRUE, 0);
-        }
-
-        gtk_widget_show_all (row);
-        gtk_container_add (GTK_CONTAINER (self->input_list), row);
-
-        g_object_set_data (G_OBJECT (row), "label", label);
-        g_object_set_data (G_OBJECT (row), "type", (gpointer)type);
-        g_object_set_data_full (G_OBJECT (row), "id", g_strdup (id), g_free);
-        if (app_info) {
-                g_object_set_data_full (G_OBJECT (row), "app-info", g_object_ref (app_info), g_object_unref);
-        }
-
-        cc_list_box_adjust_scrolling (GTK_LIST_BOX (self->input_list));
-
-        return row;
-}
-
-static void
-add_no_input_row (CcRegionPanel *self)
-{
-        add_input_row (self, "none", "none", _("No input source selected"), NULL);
-}
-
-static void
-add_input_sources (CcRegionPanel *self,
-                   GVariant      *sources)
-{
-        GVariantIter iter;
-        const gchar *type, *id;
-
-        if (g_variant_n_children (sources) < 1) {
-                add_no_input_row (self);
-                return;
-        }
-
-        g_variant_iter_init (&iter, sources);
-        while (g_variant_iter_next (&iter, "(&s&s)", &type, &id)) {
-                g_autoptr(GDesktopAppInfo) app_info = NULL;
-                g_autofree gchar *display_name = NULL;
-
-                if (g_str_equal (type, INPUT_SOURCE_TYPE_XKB)) {
-                        const gchar *name;
-
-                        gnome_xkb_info_get_layout_info (self->xkb_info, id, &name, NULL, NULL, NULL);
-                        if (!name) {
-                                g_warning ("Couldn't find XKB input source '%s'", id);
-                                continue;
-                        }
-                        display_name = g_strdup (name);
-                        type = INPUT_SOURCE_TYPE_XKB;
-#ifdef HAVE_IBUS
-                } else if (g_str_equal (type, INPUT_SOURCE_TYPE_IBUS)) {
-                        IBusEngineDesc *engine_desc = NULL;
-
-                        if (self->ibus_engines)
-                                engine_desc = g_hash_table_lookup (self->ibus_engines, id);
-                        if (engine_desc)
-                                display_name = engine_get_display_name (engine_desc);
-
-                        app_info = setup_app_info_for_id (id);
-                        type = INPUT_SOURCE_TYPE_IBUS;
-#endif
-                } else {
-                        g_warning ("Unhandled input source type '%s'", type);
-                        continue;
-                }
-
-                add_input_row (self, type, id, display_name ? display_name : id, app_info);
-        }
-}
-
-static void
-add_input_sources_from_settings (CcRegionPanel *self)
-{
-        g_autoptr(GVariant) sources = NULL;
-        sources = g_settings_get_value (self->input_settings, "sources");
-        add_input_sources (self, sources);
-}
-
-static void
-clear_input_sources (CcRegionPanel *self)
-{
-        g_autoptr(GList) list = NULL;
-        GList *l;
-
-        list = gtk_container_get_children (GTK_CONTAINER (self->input_list));
-        for (l = list; l; l = l->next) {
-                gtk_container_remove (GTK_CONTAINER (self->input_list), GTK_WIDGET (l->data));
-        }
-
-        cc_list_box_adjust_scrolling (GTK_LIST_BOX (self->input_list));
-}
-
 static void
 select_by_id (GtkWidget   *row,
               gpointer     data)
@@ -891,190 +594,6 @@ select_by_id (GtkWidget   *row,
                 gtk_list_box_select_row (GTK_LIST_BOX (gtk_widget_get_parent (row)), GTK_LIST_BOX_ROW (row));
 }
 
-static void
-select_input (CcRegionPanel *self,
-              const gchar   *id)
-{
-        gtk_container_foreach (GTK_CONTAINER (self->input_list),
-                               select_by_id, (gpointer)id);
-}
-
-static void
-input_sources_changed (GSettings     *settings,
-                       const gchar   *key,
-                       CcRegionPanel *self)
-{
-        GtkListBoxRow *selected;
-        g_autofree gchar *id = NULL;
-
-        selected = gtk_list_box_get_selected_row (GTK_LIST_BOX (self->input_list));
-        if (selected)
-                id = g_strdup (g_object_get_data (G_OBJECT (selected), "id"));
-        clear_input_sources (self);
-        add_input_sources_from_settings (self);
-        if (id)
-                select_input (self, id);
-}
-
-
-static void
-update_buttons (CcRegionPanel *self)
-{
-        GtkListBoxRow *selected;
-        g_autoptr(GList) children = NULL;
-        guint n_rows;
-
-        children = gtk_container_get_children (GTK_CONTAINER (self->input_list));
-        n_rows = g_list_length (children);
-
-        selected = gtk_list_box_get_selected_row (GTK_LIST_BOX (self->input_list));
-        if (selected == NULL) {
-                gtk_widget_set_visible (self->show_config, FALSE);
-                gtk_widget_set_sensitive (self->remove_input, FALSE);
-                gtk_widget_set_sensitive (self->show_layout, FALSE);
-                gtk_widget_set_sensitive (self->move_up_input, FALSE);
-                gtk_widget_set_sensitive (self->move_down_input, FALSE);
-        } else {
-                GDesktopAppInfo *app_info;
-
-                app_info = (GDesktopAppInfo *)g_object_get_data (G_OBJECT (selected), "app-info");
-
-                gtk_widget_set_visible (self->show_config, app_info != NULL);
-                gtk_widget_set_sensitive (self->show_layout, TRUE);
-                gtk_widget_set_sensitive (self->remove_input, n_rows > 1);
-                gtk_widget_set_sensitive (self->move_up_input, gtk_list_box_row_get_index (selected) > 0);
-                gtk_widget_set_sensitive (self->move_down_input, gtk_list_box_row_get_index (selected) < n_rows - 1);
-        }
-
-        gtk_widget_set_visible (self->options_button,
-                                n_rows > 1 && !self->login);
-}
-
-static void
-set_input_settings (CcRegionPanel *self)
-{
-        const gchar *type;
-        const gchar *id;
-        GVariantBuilder builder;
-        g_autoptr(GList) list = NULL;
-        GList *l;
-
-        g_variant_builder_init (&builder, G_VARIANT_TYPE ("a(ss)"));
-        list = gtk_container_get_children (GTK_CONTAINER (self->input_list));
-        for (l = list; l; l = l->next) {
-                type = (const gchar *)g_object_get_data (G_OBJECT (l->data), "type");
-                id = (const gchar *)g_object_get_data (G_OBJECT (l->data), "id");
-                g_variant_builder_add (&builder, "(ss)", type, id);
-        }
-
-        g_settings_set_value (self->input_settings, KEY_INPUT_SOURCES, g_variant_builder_end (&builder));
-        g_settings_apply (self->input_settings);
-}
-
-static void set_localed_input (CcRegionPanel *self);
-
-static void
-update_input (CcRegionPanel *self)
-{
-        if (self->login) {
-                set_localed_input (self);
-        } else {
-                set_input_settings (self);
-                if (self->login_auto_apply)
-                        set_localed_input (self);
-        }
-}
-
-static gboolean
-input_source_already_added (CcRegionPanel *self,
-                            const gchar   *id)
-{
-        g_autoptr(GList) list = NULL;
-        GList *l;
-
-        list = gtk_container_get_children (GTK_CONTAINER (self->input_list));
-        for (l = list; l; l = l->next)
-                if (g_str_equal (id, (const gchar *) g_object_get_data (G_OBJECT (l->data), "id"))) {
-                        return TRUE;
-                }
-
-        return FALSE;
-}
-
-static void
-run_input_chooser (CcRegionPanel *self, GtkWidget *chooser)
-{
-        if (gtk_dialog_run (GTK_DIALOG (chooser)) == GTK_RESPONSE_OK) {
-                g_autofree gchar *type = NULL;
-                g_autofree gchar *id = NULL;
-                g_autofree gchar *name = NULL;
-
-                if (cc_input_chooser_get_selected (chooser, &type, &id, &name) &&
-                    !input_source_already_added (self, id)) {
-                        g_autoptr(GDesktopAppInfo) app_info = NULL;
-
-                        if (g_str_equal (type, INPUT_SOURCE_TYPE_IBUS)) {
-#ifdef HAVE_IBUS
-                                app_info = setup_app_info_for_id (id);
-#endif
-                        } else {
-                                g_free (type);
-                                type = g_strdup (INPUT_SOURCE_TYPE_XKB);
-                        }
-
-                        add_input_row (self, type, id, name, app_info);
-                        update_buttons (self);
-                        update_input (self);
-                }
-        }
-        gtk_widget_hide(chooser);
-}
-
-static void
-show_input_chooser (CcRegionPanel *self)
-{
-        GtkWidget *chooser;
-        GtkWidget *toplevel;
-
-        chooser = g_object_get_data (G_OBJECT (self), "input-chooser");
-
-        if (!chooser) {
-                toplevel = gtk_widget_get_toplevel (GTK_WIDGET (self));
-                chooser = cc_input_chooser_new (GTK_WINDOW (toplevel),
-                                                self->login,
-                                                self->xkb_info,
-#ifdef HAVE_IBUS
-                                                self->ibus_engines
-#else
-                                                NULL
-#endif
-                                                );
-                g_object_ref (chooser);
-                g_object_set_data_full (G_OBJECT (self), "input-chooser",
-                                        chooser, g_object_unref);
-        } else {
-                cc_input_chooser_reset (chooser);
-        }
-
-        run_input_chooser (self, chooser);
-}
-
-static void
-add_input (CcRegionPanel *self)
-{
-        if (!self->login) {
-                show_input_chooser (self);
-        } else if (g_permission_get_allowed (self->permission)) {
-                show_input_chooser (self);
-        } else if (g_permission_get_can_acquire (self->permission)) {
-                self->op = ADD_INPUT;
-                g_permission_acquire_async (self->permission,
-                                            self->cancellable,
-                                            permission_acquired,
-                                            self);
-        }
-}
-
 static GtkWidget *
 find_sibling (GtkContainer *container, GtkWidget *child)
 {
@@ -1100,188 +619,6 @@ find_sibling (GtkContainer *container, GtkWidget *child)
         return NULL;
 }
 
-static void
-do_remove_selected_input (CcRegionPanel *self)
-{
-        GtkListBoxRow *selected;
-        GtkWidget *sibling;
-
-        selected = gtk_list_box_get_selected_row (GTK_LIST_BOX (self->input_list));
-        if (selected == NULL)
-                return;
-
-        sibling = find_sibling (GTK_CONTAINER (self->input_list), GTK_WIDGET (selected));
-        gtk_container_remove (GTK_CONTAINER (self->input_list), GTK_WIDGET (selected));
-        gtk_list_box_select_row (GTK_LIST_BOX (self->input_list), GTK_LIST_BOX_ROW (sibling));
-
-        cc_list_box_adjust_scrolling (GTK_LIST_BOX (self->input_list));
-
-        update_buttons (self);
-        update_input (self);
-}
-
-static void
-remove_selected_input (CcRegionPanel *self)
-{
-        if (!self->login) {
-                do_remove_selected_input (self);
-        } else if (g_permission_get_allowed (self->permission)) {
-                do_remove_selected_input (self);
-        } else if (g_permission_get_can_acquire (self->permission)) {
-                self->op = REMOVE_INPUT;
-                g_permission_acquire_async (self->permission,
-                                            self->cancellable,
-                                            permission_acquired,
-                                            self);
-        }
-}
-
-static void
-do_move_selected_input (CcRegionPanel *self,
-                        SystemOp       op)
-{
-        GtkListBoxRow *selected;
-        gint idx;
-
-        g_assert (op == MOVE_UP_INPUT || op == MOVE_DOWN_INPUT);
-
-        selected = gtk_list_box_get_selected_row (GTK_LIST_BOX (self->input_list));
-        g_assert (selected);
-
-        idx = gtk_list_box_row_get_index (selected);
-        if (op == MOVE_UP_INPUT)
-                idx -= 1;
-        else
-                idx += 1;
-
-        gtk_list_box_unselect_row (GTK_LIST_BOX (self->input_list), selected);
-
-        g_object_ref (selected);
-        gtk_container_remove (GTK_CONTAINER (self->input_list), GTK_WIDGET (selected));
-        gtk_list_box_insert (GTK_LIST_BOX (self->input_list), GTK_WIDGET (selected), idx);
-        g_object_unref (selected);
-
-        gtk_list_box_select_row (GTK_LIST_BOX (self->input_list), selected);
-
-        cc_list_box_adjust_scrolling (GTK_LIST_BOX (self->input_list));
-
-        update_buttons (self);
-        update_input (self);
-}
-
-static void
-move_selected_input (CcRegionPanel *self,
-                     SystemOp       op)
-{
-        if (!self->login) {
-                do_move_selected_input (self, op);
-        } else if (g_permission_get_allowed (self->permission)) {
-                do_move_selected_input (self, op);
-        } else if (g_permission_get_can_acquire (self->permission)) {
-                self->op = op;
-                g_permission_acquire_async (self->permission,
-                                            self->cancellable,
-                                            permission_acquired,
-                                            self);
-        }
-}
-
-static void
-move_selected_input_up (CcRegionPanel *self)
-{
-        move_selected_input (self, MOVE_UP_INPUT);
-}
-
-static void
-move_selected_input_down (CcRegionPanel *self)
-{
-        move_selected_input (self, MOVE_DOWN_INPUT);
-}
-
-static void
-show_selected_settings (CcRegionPanel *self)
-{
-        GtkListBoxRow *selected;
-        g_autoptr(GdkAppLaunchContext) ctx = NULL;
-        GDesktopAppInfo *app_info;
-        const gchar *id;
-        g_autoptr(GError) error = NULL;
-
-        selected = gtk_list_box_get_selected_row (GTK_LIST_BOX (self->input_list));
-        if (selected == NULL)
-                return;
-
-        app_info = (GDesktopAppInfo *)g_object_get_data (G_OBJECT (selected), "app-info");
-        if  (app_info == NULL)
-                return;
-
-        ctx = gdk_display_get_app_launch_context (gdk_display_get_default ());
-        gdk_app_launch_context_set_timestamp (ctx, gtk_get_current_event_time ());
-
-        id = (const gchar *)g_object_get_data (G_OBJECT (selected), "id");
-        g_app_launch_context_setenv (G_APP_LAUNCH_CONTEXT (ctx),
-                                     "IBUS_ENGINE_NAME", id);
-
-        if (!g_app_info_launch (G_APP_INFO (app_info), NULL, G_APP_LAUNCH_CONTEXT (ctx), &error))
-                g_warning ("Failed to launch input source setup: %s", error->message);
-}
-
-static void
-show_selected_layout (CcRegionPanel *self)
-{
-        GtkListBoxRow *selected;
-        const gchar *type;
-        const gchar *id;
-        const gchar *layout;
-        const gchar *variant;
-        g_autofree gchar *commandline = NULL;
-
-        selected = gtk_list_box_get_selected_row (GTK_LIST_BOX (self->input_list));
-        if (selected == NULL)
-                return;
-
-        type = (const gchar *)g_object_get_data (G_OBJECT (selected), "type");
-        id = (const gchar *)g_object_get_data (G_OBJECT (selected), "id");
-
-        if (g_str_equal (type, INPUT_SOURCE_TYPE_XKB)) {
-                gnome_xkb_info_get_layout_info (self->xkb_info,
-                                                id, NULL, NULL,
-                                                &layout, &variant);
-
-                if (!layout || !layout[0]) {
-                        g_warning ("Couldn't find XKB input source '%s'", id);
-                        return;
-                }
-#ifdef HAVE_IBUS
-        } else if (g_str_equal (type, INPUT_SOURCE_TYPE_IBUS)) {
-                IBusEngineDesc *engine_desc = NULL;
-
-                if (self->ibus_engines)
-                        engine_desc = g_hash_table_lookup (self->ibus_engines, id);
-
-                if (engine_desc) {
-                        layout = ibus_engine_desc_get_layout (engine_desc);
-                        variant = ibus_engine_desc_get_layout_variant (engine_desc);
-                } else {
-                        g_warning ("Couldn't find IBus input source '%s'", id);
-                        return;
-                }
-#endif
-        } else {
-                g_warning ("Unhandled input source type '%s'", type);
-                return;
-        }
-
-        if (variant && variant[0])
-                commandline = g_strdup_printf ("gkbd-keyboard-display -l \"%s\t%s\"",
-                                               layout, variant);
-        else
-                commandline = g_strdup_printf ("gkbd-keyboard-display -l %s",
-                                               layout);
-
-        g_spawn_command_line_async (commandline, NULL);
-}
-
 static void
 options_response (GtkDialog     *options,
                   gint           response_id,
@@ -1290,59 +627,6 @@ options_response (GtkDialog     *options,
         gtk_widget_destroy (GTK_WIDGET (options));
 }
 
-
-static void
-show_input_options (CcRegionPanel *self)
-{
-        GtkWidget *toplevel;
-        GtkWidget *options;
-
-        toplevel = gtk_widget_get_toplevel (GTK_WIDGET (self));
-        options = cc_input_options_new (toplevel);
-        g_signal_connect (options, "response",
-                          G_CALLBACK (options_response), self);
-        gtk_window_present (GTK_WINDOW (options));
-}
-
-static void
-setup_input_section (CcRegionPanel *self)
-{
-        self->input_settings = g_settings_new (GNOME_DESKTOP_INPUT_SOURCES_DIR);
-        g_settings_delay (self->input_settings);
-
-        self->xkb_info = gnome_xkb_info_new ();
-
-#ifdef HAVE_IBUS
-        ibus_init ();
-        if (!self->ibus) {
-                self->ibus = ibus_bus_new_async ();
-                if (ibus_bus_is_connected (self->ibus))
-                        fetch_ibus_engines (self);
-                else
-                        g_signal_connect_object (self->ibus, "connected",
-                                                 G_CALLBACK (fetch_ibus_engines), self,
-                                                 G_CONNECT_SWAPPED);
-        }
-        maybe_start_ibus ();
-#endif
-
-        cc_list_box_setup_scrolling (GTK_LIST_BOX (self->input_list), 5);
-
-        gtk_list_box_set_selection_mode (GTK_LIST_BOX (self->input_list),
-                                         GTK_SELECTION_SINGLE);
-        gtk_list_box_set_header_func (GTK_LIST_BOX (self->input_list),
-                                      cc_list_box_update_header_func,
-                                      NULL, NULL);
-        g_signal_connect_object (self->input_list, "row-selected",
-                                 G_CALLBACK (update_buttons), self, G_CONNECT_SWAPPED);
-
-        g_signal_connect (self->input_settings, "changed::" KEY_INPUT_SOURCES,
-                          G_CALLBACK (input_sources_changed), self);
-
-        add_input_sources_from_settings (self);
-        update_buttons (self);
-}
-
 static void
 on_localed_properties_changed (GDBusProxy     *proxy,
                                GVariant       *changed_properties,
@@ -1385,57 +669,6 @@ on_localed_properties_changed (GDBusProxy     *proxy,
         }
 }
 
-static void
-add_input_sources_from_localed (CcRegionPanel *self)
-{
-        g_autoptr(GVariant) layout_property = NULL;
-        g_autoptr(GVariant) variant_property = NULL;
-        const gchar *s;
-        g_auto(GStrv) layouts = NULL;
-        g_auto(GStrv) variants = NULL;
-        gint i, n;
-
-        if (!self->localed)
-                return;
-
-        layout_property = g_dbus_proxy_get_cached_property (self->localed, "X11Layout");
-        if (layout_property) {
-                s = g_variant_get_string (layout_property, NULL);
-                layouts = g_strsplit (s, ",", -1);
-        }
-
-        variant_property = g_dbus_proxy_get_cached_property (self->localed, "X11Variant");
-        if (variant_property) {
-                s = g_variant_get_string (variant_property, NULL);
-                if (s && *s)
-                        variants = g_strsplit (s, ",", -1);
-        }
-
-        if (variants && variants[0])
-                n = MIN (g_strv_length (layouts), g_strv_length (variants));
-        else if (layouts && layouts[0])
-                n = g_strv_length (layouts);
-        else
-                n = 0;
-
-        for (i = 0; i < n && layouts[i][0]; i++) {
-                const gchar *name;
-                g_autofree gchar *id = NULL;
-
-                if (variants && variants[i] && variants[i][0])
-                        id = g_strdup_printf ("%s+%s", layouts[i], variants[i]);
-                else
-                        id = g_strdup (layouts[i]);
-
-                gnome_xkb_info_get_layout_info (self->xkb_info, id, &name, NULL, NULL, NULL);
-
-                add_input_row (self, INPUT_SOURCE_TYPE_XKB, id, name ? name : id, NULL);
-        }
-        if (n == 0) {
-                add_no_input_row (self);
-        }
-}
-
 static void
 set_localed_locale (CcRegionPanel *self)
 {
@@ -1471,43 +704,6 @@ set_localed_locale (CcRegionPanel *self)
                            -1, NULL, NULL, NULL);
 }
 
-static void
-set_localed_input (CcRegionPanel *self)
-{
-        g_autoptr(GString) layouts = NULL;
-        g_autoptr(GString) variants = NULL;
-        const gchar *type, *id;
-        g_autoptr(GList) list = NULL;
-        GList *li;
-        const gchar *l, *v;
-
-        layouts = g_string_new ("");
-        variants = g_string_new ("");
-
-        list = gtk_container_get_children (GTK_CONTAINER (self->input_list));
-        for (li = list; li; li = li->next) {
-                type = (const gchar *)g_object_get_data (G_OBJECT (li->data), "type");
-                id = (const gchar *)g_object_get_data (G_OBJECT (li->data), "id");
-                if (g_str_equal (type, INPUT_SOURCE_TYPE_IBUS))
-                        continue;
-
-                if (gnome_xkb_info_get_layout_info (self->xkb_info, id, NULL, NULL, &l, &v)) {
-                        if (layouts->str[0]) {
-                                g_string_append_c (layouts, ',');
-                                g_string_append_c (variants, ',');
-                        }
-                        g_string_append (layouts, l);
-                        g_string_append (variants, v);
-                }
-        }
-
-        g_dbus_proxy_call (self->localed,
-                           "SetX11Keyboard",
-                           g_variant_new ("(ssssbb)", layouts->str, "", variants->str, "", TRUE, TRUE),
-                           G_DBUS_CALL_FLAGS_NONE,
-                           -1, NULL, NULL, NULL);
-}
-
 static void
 localed_proxy_ready (GObject      *source,
                      GAsyncResult *res,
@@ -1547,16 +743,8 @@ login_changed (CcRegionPanel *self)
                  g_permission_get_can_acquire (self->permission));
         /* FIXME: insensitive doesn't look quite right for this */
         gtk_widget_set_sensitive (self->language_section, !self->login || can_acquire);
-        gtk_widget_set_sensitive (self->input_section, !self->login || can_acquire);
-
-        clear_input_sources (self);
-        if (self->login)
-                add_input_sources_from_localed (self);
-        else
-                add_input_sources_from_settings (self);
 
         update_language_label (self);
-        update_buttons (self);
 }
 
 static void
@@ -1659,27 +847,11 @@ cc_region_panel_class_init (CcRegionPanelClass * klass)
         gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, formats_row);
         gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, formats_label);
         gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, restart_revealer);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, input_section);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, options_button);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, input_list);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, add_input);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, remove_input);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, move_up_input);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, move_down_input);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, show_config);
-        gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, show_layout);
         gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, restart_button);
         gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, login_label);
         gtk_widget_class_bind_template_child (widget_class, CcRegionPanel, language_list);
 
         gtk_widget_class_bind_template_callback (widget_class, restart_now);
-        gtk_widget_class_bind_template_callback (widget_class, show_input_options);
-        gtk_widget_class_bind_template_callback (widget_class, add_input);
-        gtk_widget_class_bind_template_callback (widget_class, remove_selected_input);
-        gtk_widget_class_bind_template_callback (widget_class, move_selected_input_up);
-        gtk_widget_class_bind_template_callback (widget_class, move_selected_input_down);
-        gtk_widget_class_bind_template_callback (widget_class, show_selected_settings);
-        gtk_widget_class_bind_template_callback (widget_class, show_selected_layout);
 }
 
 static void
@@ -1707,7 +879,6 @@ cc_region_panel_init (CcRegionPanel *self)
 
         setup_login_button (self);
         setup_language_section (self);
-        setup_input_section (self);
 
         needs_restart_file = get_needs_restart_file ();
         if (g_file_query_exists (needs_restart_file, NULL))
diff --git a/panels/region/meson.build b/panels/region/meson.build
index 5c0a6f5..f028829 100644
--- a/panels/region/meson.build
+++ b/panels/region/meson.build
@@ -20,15 +20,10 @@ i18n.merge_file(
 sources = files(
   'cc-region-panel.c',
   'cc-format-chooser.c',
-  'cc-ibus-utils.c',
-  'cc-input-chooser.c',
-  'cc-input-options.c'
 )
 
 resource_data = files(
   'cc-format-chooser.ui',
-  'input-chooser.ui',
-  'input-options.ui',
   'region.ui'
 )
 
@@ -47,10 +42,6 @@ deps = common_deps + [
   polkit_gobject_dep
 ]
 
-if enable_ibus
-  deps += ibus_dep
-endif
-
 panels_libs += static_library(
   cappletname,
   sources: sources,
diff --git a/panels/region/region.ui b/panels/region/region.ui
index 53ebb48..675a2cb 100644
--- a/panels/region/region.ui
+++ b/panels/region/region.ui
@@ -211,327 +211,6 @@
                 <property name="position">0</property>
               </packing>
             </child>
-            <child>
-              <object class="GtkBox" id="input_section">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="orientation">vertical</property>
-                <property name="hexpand">True</property>
-                <child>
-                  <object class="GtkBox" id="input_heading_row">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="margin_bottom">12</property>
-                    <child>
-                      <object class="GtkLabel" id="input_heading">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="margin_start">2</property>
-                        <property name="margin_end">2</property>
-                        <property name="xalign">0</property>
-                        <property name="label" translatable="yes">Input Sources</property>
-                        <attributes>
-                          <attribute name="weight" value="bold"/>
-                        </attributes>
-                        <accessibility>
-                          <relation target="input_list" type="label-for"/>
-                        </accessibility>
-                      </object>
-                      <packing>
-                        <property name="expand">True</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkButton" id="options_button">
-                        <property name="label" translatable="yes">_Options</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="use_underline">True</property>
-                        <signal name="clicked" handler="show_input_options" object="CcRegionPanel" swapped="yes"/>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkFrame" id="input_frame">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="label_xalign">0</property>
-                    <property name="shadow_type">in</property>
-                    <child>
-                      <object class="GtkListBox" id="input_list">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <accessibility>
-                          <relation target="input_heading" type="labelled-by"/>
-                        </accessibility>
-                      </object>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkToolbar" id="input_toolbar">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="toolbar_style">icons</property>
-                    <property name="show_arrow">False</property>
-                    <property name="icon_size">1</property>
-                    <style>
-                      <class name="inline-toolbar"/>
-                    </style>
-                    <child>
-                      <object class="GtkToolItem" id="i_s_ar_item">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <child>
-                          <object class="GtkBox" id="i_s_ar_box">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <child>
-                              <object class="GtkButton" id="add_input">
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="receives_default">True</property>
-                                <signal name="clicked" handler="add_input" object="CcRegionPanel" swapped="yes"/>
-                                <child internal-child="accessible">
-                                  <object class="AtkObject">
-                                    <property name="accessible-name" translatable="yes">Add input source</property>
-                                  </object>
-                                </child>
-                                <child>
-                                  <object class="GtkImage" id="i_s_a_image">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="icon_name">list-add-symbolic</property>
-                                    <property name="icon-size">1</property>
-                                  </object>
-                                </child>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="fill">True</property>
-                                <property name="position">0</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkButton" id="remove_input">
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="receives_default">True</property>
-                                <signal name="clicked" handler="remove_selected_input" object="CcRegionPanel" swapped="yes"/>
-                                <child internal-child="accessible">
-                                  <object class="AtkObject">
-                                    <property name="accessible-name" translatable="yes">Remove input source</property>
-                                  </object>
-                                </child>
-                                <child>
-                                  <object class="GtkImage" id="i_s_r_image">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="icon_name">list-remove-symbolic</property>
-                                    <property name="icon-size">1</property>
-                                  </object>
-                                </child>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="fill">True</property>
-                                <property name="position">1</property>
-                              </packing>
-                            </child>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkSeparatorToolItem" id="sep1">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="draw">False</property>
-                      </object>
-                      <packing>
-                        <property name="expand">True</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkToolItem" id="i_s_ud_item">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <child>
-                          <object class="GtkBox" id="i_s_ud_box">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <child>
-                              <object class="GtkButton" id="move_up_input">
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="receives_default">True</property>
-                                <signal name="clicked" handler="move_selected_input_up" object="CcRegionPanel" swapped="yes"/>
-                                <child internal-child="accessible">
-                                  <object class="AtkObject">
-                                    <property name="accessible-name" translatable="yes">Move input source up</property>
-                                  </object>
-                                </child>
-                                <child>
-                                  <object class="GtkImage" id="i_s_up_image">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="icon_name">go-up-symbolic</property>
-                                    <property name="icon-size">1</property>
-                                  </object>
-                                </child>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="fill">True</property>
-                                <property name="position">0</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkButton" id="move_down_input">
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="receives_default">True</property>
-                                <signal name="clicked" handler="move_selected_input_down" object="CcRegionPanel" swapped="yes"/>
-                                <child internal-child="accessible">
-                                  <object class="AtkObject">
-                                    <property name="accessible-name" translatable="yes">Move input source down</property>
-                                  </object>
-                                </child>
-                                <child>
-                                  <object class="GtkImage" id="i_s_down_image">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="icon_name">go-down-symbolic</property>
-                                    <property name="icon-size">1</property>
-                                  </object>
-                                </child>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="fill">True</property>
-                                <property name="position">1</property>
-                              </packing>
-                            </child>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkSeparatorToolItem" id="sep2">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="draw">False</property>
-                      </object>
-                      <packing>
-                        <property name="expand">True</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkToolItem" id="i_s_sc_item">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <child>
-                          <object class="GtkBox" id="i_s_sc_box">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <child>
-                              <object class="GtkButton" id="show_config">
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="receives_default">True</property>
-                                <signal name="clicked" handler="show_selected_settings" object="CcRegionPanel" swapped="yes"/>
-                                <child internal-child="accessible">
-                                  <object class="AtkObject">
-                                    <property name="accessible-name" translatable="yes">Configure input source</property>
-                                  </object>
-                                </child>
-                                <child>
-                                  <object class="GtkImage" id="i_s_sc_image">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="icon_name">emblem-system-symbolic</property>
-                                    <property name="icon-size">1</property>
-                                  </object>
-                                </child>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="fill">True</property>
-                                <property name="position">0</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkButton" id="show_layout">
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="receives_default">True</property>
-                                <signal name="clicked" handler="show_selected_layout" object="CcRegionPanel" swapped="yes"/>
-                                <child internal-child="accessible">
-                                  <object class="AtkObject">
-                                    <property name="accessible-name" translatable="yes">Show input source keyboard layout</property>
-                                  </object>
-                                </child>
-                                <child>
-                                  <object class="GtkImage" id="i_s_sl_image">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="icon_name">input-keyboard-symbolic</property>
-                                    <property name="icon-size">1</property>
-                                  </object>
-                                </child>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="fill">True</property>
-                                <property name="position">1</property>
-                              </packing>
-                            </child>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">2</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
             <child>
               <object class="GtkLabel" id="login_label">
                <property name="valign">end</property>
diff --git a/panels/search/cc-search-locations-dialog.c b/panels/search/cc-search-locations-dialog.c
index 7afbe0e..75949e5 100644
--- a/panels/search/cc-search-locations-dialog.c
+++ b/panels/search/cc-search-locations-dialog.c
@@ -26,6 +26,7 @@
 #define TRACKER_SCHEMA "org.freedesktop.Tracker.Miner.Files"
 #define TRACKER_KEY_RECURSIVE_DIRECTORIES "index-recursive-directories"
 #define TRACKER_KEY_SINGLE_DIRECTORIES "index-single-directories"
+#define TRACKER_KEY_RECURSIVE_CACHE_DIRECTORIES "index-recursive-cache-directories"
 
 static GSettings *tracker_preferences = NULL;
 
@@ -248,7 +249,7 @@ get_tracker_locations (void)
   Place *location;
   const gchar *path;
 
-  locations = g_settings_get_strv (tracker_preferences, TRACKER_KEY_RECURSIVE_DIRECTORIES);
+  locations = g_settings_get_strv (tracker_preferences, TRACKER_KEY_RECURSIVE_CACHE_DIRECTORIES);
   list = NULL;
 
   for (idx = 0; locations[idx] != NULL; idx++)
@@ -400,6 +401,41 @@ place_get_new_settings_values (Place *place,
   return new_values;
 }
 
+static void
+update_cache_settings_values (Place *place, gboolean remove)
+{
+  g_auto(GStrv) values = NULL;
+  g_autofree gchar *path = NULL;
+  GPtrArray *new_values;
+  gboolean found;
+  gint idx;
+
+  new_values = g_ptr_array_new_with_free_func (g_free);
+  values = g_settings_get_strv (tracker_preferences, TRACKER_KEY_RECURSIVE_CACHE_DIRECTORIES);
+  path = g_file_get_path (place->location);
+
+  found = FALSE;
+
+  for (idx = 0; values[idx] != NULL; idx++)
+    {
+      if (g_strcmp0 (values[idx], path) == 0)
+        {
+          found = TRUE;
+          if (remove)
+            continue;
+        }
+
+      g_ptr_array_add (new_values, g_strdup (values[idx]));
+    }
+
+  if (!found && !remove)
+    g_ptr_array_add (new_values, g_strdup (path));
+
+  g_ptr_array_add (new_values, NULL);
+
+  g_settings_set_strv (tracker_preferences, TRACKER_KEY_RECURSIVE_CACHE_DIRECTORIES, (const gchar **)new_values->pdata);
+}
+
 static GVariant *
 switch_tracker_set_mapping (const GValue *value,
                             const GVariantType *expected_type,
@@ -411,6 +447,11 @@ switch_tracker_set_mapping (const GValue *value,
 
   remove = !g_value_get_boolean (value);
   new_values = place_get_new_settings_values (place, remove);
+
+  // 무조건 remove로만 들어와서 값을 지워버림..
+  // jeong89
+  update_cache_settings_values (place, FALSE);
+
   return g_variant_new_strv ((const gchar **) new_values->pdata, -1);
 }
 
@@ -466,6 +507,10 @@ remove_button_clicked (GtkWidget *widget,
 
   place = g_object_get_data (G_OBJECT (row), "place");
   new_values = place_get_new_settings_values (place, TRUE);
+
+  // 검색위치 대화상자의 '기타'탭의 switching시 값을 지워버림
+  // jeong89
+  update_cache_settings_values (place, TRUE);
   g_settings_set_strv (tracker_preferences, place->settings_key, (const gchar **) new_values->pdata);
 }
 
@@ -585,6 +630,9 @@ add_file_chooser_response (GtkDialog *widget,
   place->display_name = g_file_get_basename (place->location);
 
   new_values = place_get_new_settings_values (place, FALSE);
+
+  update_cache_settings_values (place, FALSE);
+
   g_settings_set_strv (tracker_preferences, place->settings_key, (const gchar **) new_values->pdata);
 
   gtk_widget_destroy (GTK_WIDGET (widget));
diff --git a/panels/sound/gvc-channel-bar.c b/panels/sound/gvc-channel-bar.c
index dd6f47d..a2d6dac 100644
--- a/panels/sound/gvc-channel-bar.c
+++ b/panels/sound/gvc-channel-bar.c
@@ -398,10 +398,6 @@ on_scale_button_release_event (GtkWidget      *widget,
 
         value = gtk_adjustment_get_value (adj);
 
-        /* this means the adjustment moved away from zero and
-         * therefore we should unmute and set the volume. */
-        gvc_channel_bar_set_is_muted (bar, (value == 0.0));
-
         /* Play a sound! */
         ca_gtk_play_for_widget (GTK_WIDGET (bar), 0,
                                 CA_PROP_EVENT_ID, "audio-volume-change",
@@ -482,7 +478,6 @@ gvc_channel_bar_scroll (GvcChannelBar *bar, GdkEventScroll *event)
                         value = value + dy * SCROLLSTEP;
         }
 
-        gvc_channel_bar_set_is_muted (bar, (value == 0.0));
         adj = gtk_range_get_adjustment (GTK_RANGE (bar->scale));
         gtk_adjustment_set_value (adj, value);
 
@@ -509,13 +504,6 @@ on_zero_adjustment_value_changed (GtkAdjustment *adjustment,
 
         value = gtk_adjustment_get_value (bar->zero_adjustment);
         gtk_adjustment_set_value (bar->adjustment, value);
-
-
-        if (bar->show_mute == FALSE) {
-                /* this means the adjustment moved away from zero and
-                 * therefore we should unmute and set the volume. */
-                gvc_channel_bar_set_is_muted (bar, value > 0.0);
-        }
 }
 
 static void
@@ -540,13 +528,9 @@ update_mute_switch (GvcChannelBar *bar)
                 g_signal_handlers_unblock_by_func (bar->zero_adjustment,
                                                    on_zero_adjustment_value_changed,
                                                    bar);
-                gtk_range_set_adjustment (GTK_RANGE (bar->scale),
-                                          bar->zero_adjustment);
+                gtk_widget_set_sensitive (bar->scale, FALSE);
         } else {
-                /* no longer muted so restore the original adjustment
-                 * and tell the front-end that the value changed */
-                gtk_range_set_adjustment (GTK_RANGE (bar->scale),
-                                          bar->adjustment);
+                gtk_widget_set_sensitive (bar->scale, TRUE);
                 gtk_adjustment_value_changed (bar->adjustment);
         }
 }
diff --git a/panels/sound/gvc-mixer-dialog.c b/panels/sound/gvc-mixer-dialog.c
index e3e1efc..5e6085f 100644
--- a/panels/sound/gvc-mixer-dialog.c
+++ b/panels/sound/gvc-mixer-dialog.c
@@ -644,10 +644,6 @@ on_adjustment_value_changed (GtkAdjustment  *adjustment,
                 g_object_get (bar, "name", &name, NULL);
                 g_debug ("Setting stream volume %lf (rounded: %lf) for bar '%s'", volume, rounded, name);
 
-                /* FIXME would need to do that in the balance bar really... */
-                /* Make sure we do not unmute muted streams, there's a button for that */
-                if (volume == 0.0)
-                        gvc_mixer_stream_set_is_muted (stream, TRUE);
                 /* Only push the volume if it's actually changed */
                 if (gvc_mixer_stream_set_volume (stream, (pa_volume_t) rounded) != FALSE)
                         gvc_mixer_stream_push_volume (stream);
diff --git a/panels/themes/cc-themes-panel.c b/panels/themes/cc-themes-panel.c
new file mode 100644
index 0000000..e0b6c7f
--- /dev/null
+++ b/panels/themes/cc-themes-panel.c
@@ -0,0 +1,487 @@
+/*
+ * Copyright (C) 2010 Intel, Inc
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#include "cc-themes-panel.h"
+//#include "font-dialog.h"
+#include "cc-themes-resources.h"
+
+#include <config.h>
+#include <gtk/gtk.h>
+
+#include <glib/gi18n.h>
+
+#define DEFAULT_GTK_THEME   "Default"
+#define DEFAULT_WM_THEME    "Default"
+#define DEFAULT_ICON_THEME  "Rodent"
+
+//#define DEFAULT_THEME_DIR   "/usr/share/themes"
+#define DEFAULT_THEME_DIR   "/usr/share/icons"
+
+#define WID(y) (GtkWidget *) gtk_builder_get_object (panel->builder, y)
+
+struct {
+  char *icon;
+  char *icon_name;
+  char *bg_name;
+} icon_themes[] = {
+  { "Gooroom-Arc", N_("Gooroom Icon Theme 1"), "file:///usr/share/backgrounds/gooroom/gooroom_theme_bg_1.jpg" },
+  { "Gooroom-Faenza", N_("Gooroom Icon Theme 2"), "file:///usr/share/backgrounds/gooroom/gooroom_theme_bg_2.jpg" },
+  { "Gooroom-Papirus", N_("Gooroom Icon Theme 3"), "file:///usr/share/backgrounds/gooroom/gooroom_theme_bg_3.jpg" },
+};
+
+enum
+{
+  COL_THUMBNAIL,
+  COL_ICON_THEME,
+  COL_ICON_NAME,
+  COL_THUMB_PATH,
+  COL_BACKGROUND_PATH,
+  NUM_COLS
+};
+
+struct _CcThemesPanel
+{
+  CcPanel           parent_instance;
+
+  GtkBuilder        *builder;
+
+  GSettings         *interface_settings;
+  GSettings         *wm_settings;
+  GSettings         *bg_settings;
+
+  GtkIconView       *icon_view;
+  GtkListStore      *themes_liststore;
+  GtkDrawingArea    *current_theme_drawingarea;
+  GtkWidget         *theme_apply_button;
+  GtkWidget         *themes_list_sw;
+
+  GdkPixbuf         *current_theme_thumbnail;
+
+  gchar             *selected_icon_name;
+  gchar             *selected_bg_name;
+  gchar             *current_icon_name;
+  gchar             *current_bg_name;
+};
+
+CC_PANEL_REGISTER (CcThemesPanel, cc_themes_panel)
+
+static const char *
+cc_themes_panel_get_help_uri (CcPanel *panel)
+{
+  return "help:gnome-help/themes";
+}
+
+static void
+set_thumbnail (CcThemesPanel *panel, gchar *thumb_path)
+{
+  GdkPixbuf *old_pixbuf;
+  old_pixbuf = panel->current_theme_thumbnail;
+  gint width;
+  gint height;
+
+  if (panel->current_theme_thumbnail != NULL)
+  {
+    //g_object_unref (panel->current_theme_thumbnail);
+    g_clear_object (&panel->current_theme_thumbnail);
+    panel->current_theme_thumbnail = NULL;
+  }
+
+  panel->current_theme_thumbnail = gdk_pixbuf_new_from_file (thumb_path, NULL);
+
+// FIXME: redraw drawingarea
+  gtk_widget_get_size_request (WID ("current-theme-drawingarea"), &width, &height);
+  gtk_widget_queue_draw_area (WID ("current-theme-drawingarea"), 0, 0, width, height);
+
+}
+
+static gboolean
+on_draw_theme (GtkWidget *widget, cairo_t *cr, gpointer data)
+{
+  GdkPixbuf *pixbuf;
+  CcThemesPanel *panel = CC_THEMES_PANEL (data);
+  cairo_t *_cr;
+  GdkRGBA color;
+
+  color.red = 1.0;
+  color.green = 1.0;
+  color.blue = 1.0;
+  color.alpha = 1.0;
+
+  pixbuf = gdk_pixbuf_scale_simple (panel->current_theme_thumbnail, 302, 181, GDK_INTERP_BILINEAR);
+  _cr = gdk_cairo_create (gtk_widget_get_window (widget));
+
+  // border color
+  gdk_cairo_set_source_rgba (_cr, &color);
+
+  gdk_cairo_set_source_pixbuf (_cr, pixbuf, 20, 22);
+  cairo_paint (_cr);
+  cairo_destroy (_cr);
+
+  return FALSE;
+}
+
+static gint
+compare_func (gconstpointer a, gconstpointer b)
+{
+  return g_strcmp0 ((gchar*)a, (gchar*)b);
+}
+
+static gint
+sort_func (GtkTreeModel *model,
+           GtkTreeIter  *a,
+           GtkTreeIter  *b,
+           gpointer      user_data)
+{
+  char *theme_a, *theme_b;
+  int ret;
+  gtk_tree_model_get (model, a,
+                      COL_ICON_THEME, &theme_a, -1);
+
+  gtk_tree_model_get (model, b,
+                      COL_ICON_THEME, &theme_b, -1);
+
+  ret = g_utf8_collate (theme_a, theme_b);
+
+  g_free (theme_a);
+  g_free (theme_b);
+}
+
+static GtkListStore*
+create_store (void)
+{
+  GtkListStore *store;
+
+  store = gtk_list_store_new (NUM_COLS,
+                              GDK_TYPE_PIXBUF,
+                              G_TYPE_STRING,
+                              G_TYPE_STRING,
+                              G_TYPE_STRING,
+                              G_TYPE_STRING);
+
+  gtk_tree_sortable_set_default_sort_func (GTK_TREE_SORTABLE (store),
+                                           sort_func, NULL, NULL);
+
+  gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (store),
+                                        GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID,
+                                        GTK_SORT_ASCENDING);
+
+  return store;
+}
+
+static GSList*
+sorted_theme_dirs_get ()
+{
+  GSList *list = NULL;
+  GDir *dir;
+  const gchar *file;
+
+  dir = g_dir_open (DEFAULT_THEME_DIR, 0, NULL);
+
+  if (G_UNLIKELY (dir == NULL))
+    return NULL;
+
+  /* Iterate over filenames in the directory */
+  while ((file = g_dir_read_name (dir)) != NULL) {
+      list = g_slist_append (list, g_strdup (file));
+  }
+
+  g_dir_close (dir);
+
+  list = g_slist_sort (list, compare_func);
+
+  return list;
+}
+
+static void
+set_current_theme_label (CcThemesPanel *panel, gchar *icon_name)
+{
+  for (int i = 0; i < G_N_ELEMENTS (icon_themes); i++)
+  {
+    if (g_strcmp0 (icon_themes[i].icon, icon_name) == 0)
+    {
+      gchar **name = g_strsplit (icon_themes[i].icon_name, " ", -1);
+      gchar *theme_name = g_strdup_printf (_("Gooroom Icon Theme %s"), name[3]);
+
+      gtk_label_set_text (WID ("current-theme-label"), theme_name);
+
+      g_strfreev (name);
+      g_free (theme_name);
+    }
+  }
+}
+
+static GtkListStore *
+load_themes_liststore (CcThemesPanel *panel)
+{
+  GSList *theme_dirs = sorted_theme_dirs_get ();
+  GFile *theme_f;
+  GFileInputStream *theme_fs;
+  GDataInputStream *theme_ds;
+  GCancellable *cancellable;
+  g_autoptr(GError) err = NULL;
+  g_autoptr(GError) inner_err = NULL;
+  gchar *line;
+  GtkListStore *store;
+  GtkTreeIter iter;
+  GtkTreeIter pre_iter;
+  GtkWidget *current_theme_drawingarea;
+  g_autofree char *current_theme = NULL;
+
+  if (!theme_dirs)
+    return FALSE;
+
+  GSList *l = NULL;
+  GSList *check_list = NULL;
+
+  // add screen data in list store
+  store = create_store ();
+  for (l = theme_dirs; l; l = l->next)
+  {
+    g_autofree gchar *theme_dir = NULL;
+    g_autofree gchar *thumb_path = NULL;
+    g_autofree gchar *icon_name = NULL;
+    gchar *background_dir = NULL;
+    gchar *gtkrc_filename = g_build_filename (DEFAULT_THEME_DIR, theme_dir, NULL);
+    gboolean is_gooroom_theme = FALSE;
+
+    theme_dir = g_strdup ((gchar *) l->data);
+
+    for (int i = 0; i < G_N_ELEMENTS (icon_themes); i++)
+    {
+      if (g_strcmp0 (icon_themes[i].icon, theme_dir) == 0)
+      {
+        gchar **name = g_strsplit (icon_themes[i].icon_name, " ", -1);
+        icon_name = g_strdup_printf (_("Gooroom Icon Theme %s"), name[3]);
+
+        is_gooroom_theme = TRUE;
+
+        // get background directory from struct list
+        background_dir = icon_themes[i].bg_name;
+
+        g_strfreev (name);
+        break;
+      }
+    }
+
+    if (!is_gooroom_theme)
+      continue;
+
+    thumb_path = g_strdup_printf ("%s/%s/thumbnail.png", DEFAULT_THEME_DIR, theme_dir);
+
+    if (g_file_test (gtkrc_filename, G_FILE_TEST_EXISTS)
+      && g_slist_find_custom (check_list, theme_dir, (GCompareFunc) g_utf8_collate) == NULL)
+    {
+      current_theme = g_settings_get_string (panel->interface_settings, "icon-theme");
+      if (g_strcmp0 (current_theme, theme_dir) == 0)
+      {
+        set_thumbnail (panel, thumb_path);
+        set_current_theme_label (panel, theme_dir);
+
+        //panel->current_icon_name = theme_dir;
+        //panel->current_bg_name = background_dir;
+      }
+
+      check_list = g_slist_prepend (check_list, g_strdup (theme_dir));
+
+      gtk_list_store_append (store, &iter);
+      gtk_list_store_set (store, &iter,
+                          COL_THUMBNAIL, gdk_pixbuf_new_from_file_at_size (thumb_path, 180, 110, NULL),
+                          COL_ICON_THEME, theme_dir ? g_strdup (theme_dir) : NULL,
+                          COL_ICON_NAME, icon_name ? g_strdup (_(icon_name)) : NULL,
+                          COL_BACKGROUND_PATH, background_dir ? g_strdup (background_dir) : NULL,
+                          COL_THUMB_PATH, thumb_path, -1);
+    }
+  }
+
+  if (G_LIKELY (theme_dirs)) {
+    g_slist_foreach (theme_dirs, (GFunc)g_free, NULL);
+    g_slist_free (theme_dirs);
+  }
+
+  if (G_LIKELY (check_list)) {
+    g_slist_foreach (check_list, (GFunc) g_free, NULL);
+    g_slist_free (check_list);
+  }
+
+  return store;
+}
+
+static void 
+on_selection_theme (GtkIconView *icon_view,
+                    CcThemesPanel *panel)
+{
+  GList *list;
+  GtkTreeModel *model;
+  GtkTreeIter iter;
+  gchar *icon_name;
+  gchar *background_dir;
+  gchar *thumb_path;
+  GtkWidget *thumbnail;
+
+  list = gtk_icon_view_get_selected_items (icon_view);
+  if (list == NULL)
+    return;
+
+  model = gtk_icon_view_get_model (GTK_ICON_VIEW (icon_view));
+
+  if (gtk_tree_model_get_iter (model, &iter, (GtkTreePath*)list->data) == FALSE)
+    goto bail;
+
+  gtk_tree_model_get (model, &iter, COL_THUMBNAIL, &thumbnail,
+                      COL_ICON_THEME, &panel->selected_icon_name,
+                      COL_BACKGROUND_PATH, &panel->selected_bg_name,
+                      COL_THUMB_PATH, &thumb_path, -1);
+
+  set_thumbnail (panel, thumb_path);
+
+  g_settings_set_string (panel->interface_settings, "icon-theme", panel->selected_icon_name);
+  g_settings_set_string (panel->bg_settings, "picture-uri", panel->selected_bg_name);
+
+bail:
+  g_list_free_full (list, (GDestroyNotify) gtk_tree_path_free);
+
+}
+
+static gboolean
+on_clicked_apply (GtkButton *button, CcThemesPanel *panel)
+{
+  GList *list;
+  GtkTreeModel *model;
+  GtkTreeIter iter;
+
+  list = gtk_icon_view_get_selected_items (panel->icon_view);
+  if (list == NULL)
+    return FALSE;
+  model = gtk_icon_view_get_model (GTK_ICON_VIEW (panel->icon_view));
+
+  if (gtk_tree_model_get_iter (model, &iter, (GtkTreePath*)list->data) == FALSE)
+    goto bail;
+
+  panel->current_icon_name = panel->selected_icon_name;
+  panel->current_bg_name =  panel->selected_bg_name;
+
+  set_current_theme_label (panel, panel->current_icon_name);
+
+  g_settings_set_string (panel->interface_settings, "icon-theme", panel->current_icon_name);
+  g_settings_set_string (panel->bg_settings, "picture-uri", panel->current_bg_name);
+
+bail:
+  g_list_free_full (list, (GDestroyNotify) gtk_tree_path_free);
+
+return FALSE;
+}
+
+static void
+cc_themes_panel_dispose (GObject *object)
+{
+  CcThemesPanel *panel = CC_THEMES_PANEL (object);
+
+  if (panel->interface_settings)
+    g_settings_set_string (panel->interface_settings, "icon-theme", panel->current_icon_name);
+  if (panel->bg_settings)
+    g_settings_set_string (panel->bg_settings, "picture-uri", panel->current_bg_name);
+
+  g_clear_object (&panel->interface_settings);
+  g_clear_object (&panel->wm_settings);
+  g_clear_object (&panel->bg_settings);
+
+  g_clear_object (&panel->builder);
+
+  G_OBJECT_CLASS (cc_themes_panel_parent_class)->dispose (object);
+}
+
+static void
+cc_themes_panel_class_init (CcThemesPanelClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  CcPanelClass *panel_class = CC_PANEL_CLASS (klass);
+
+  object_class->dispose = cc_themes_panel_dispose;
+
+  panel_class->get_help_uri = cc_themes_panel_get_help_uri;
+}
+
+static void
+cc_themes_panel_init (CcThemesPanel *panel)
+{
+  gchar *objects[] = {"themes-main-scrolled-window", NULL};
+  g_autoptr(GError) err = NULL;
+  GtkWidget *w;
+  gint button_val;
+  gdouble i_val;
+  GtkWidget *themes_list_sw;
+  GtkWidget *theme_apply_button;
+  GtkWidget *current_theme_drawingarea;
+  GtkTreeIter iter;
+
+  g_resources_register (cc_themes_get_resource ());
+
+  panel->builder = gtk_builder_new ();
+  gtk_builder_add_objects_from_resource (panel->builder,
+                                         "/org/gnome/control-center/themes/themes.ui",
+                                         objects, &err);
+  if (err)
+  {
+    g_warning ("Could not load ui: %s", err->message);
+    return;
+  }
+
+  panel->theme_apply_button = WID ("theme-apply-button");
+  panel->themes_list_sw = WID ("themes-list-sw");
+
+  panel->interface_settings = g_settings_new ("org.gnome.desktop.interface");
+  panel->wm_settings = g_settings_new ("org.gnome.desktop.wm.preferences");
+  panel->bg_settings = g_settings_new ("org.gnome.desktop.background");
+
+  panel->themes_liststore = load_themes_liststore(panel);
+
+  panel->current_icon_name = g_settings_get_string (panel->interface_settings, "icon-theme");
+  panel->current_bg_name = g_settings_get_string (panel->bg_settings, "picture-uri");
+
+// create icon view from list store
+  panel->icon_view = gtk_icon_view_new_with_model (GTK_TREE_MODEL (panel->themes_liststore));
+  gtk_icon_view_set_selection_mode (GTK_ICON_VIEW (panel->icon_view),
+                                    GTK_SELECTION_SINGLE);
+
+  gtk_icon_view_set_text_column (GTK_ICON_VIEW (panel->icon_view), COL_ICON_NAME);
+
+  gtk_icon_view_set_pixbuf_column (GTK_ICON_VIEW (panel->icon_view), COL_THUMBNAIL);
+  gtk_icon_view_set_columns (GTK_ICON_VIEW (panel->icon_view), 3);
+  gtk_icon_view_set_item_width (GTK_ICON_VIEW (panel->icon_view), 120);
+  gtk_icon_view_set_column_spacing (GTK_ICON_VIEW (panel->icon_view), 10);
+  gtk_icon_view_set_margin (GTK_ICON_VIEW (panel->icon_view), 10);
+
+  g_signal_connect (WID ("current-theme-drawingarea"), "draw", G_CALLBACK(on_draw_theme), panel);
+  g_signal_connect (panel->theme_apply_button, "clicked", G_CALLBACK (on_clicked_apply), panel);
+  g_signal_connect (panel->icon_view, "selection-changed",
+                    G_CALLBACK (on_selection_theme), panel);
+
+  gtk_scrolled_window_set_shadow_type (panel->themes_list_sw, GTK_SHADOW_ETCHED_IN);
+  gtk_scrolled_window_set_policy (panel->themes_list_sw,
+                                  GTK_POLICY_AUTOMATIC,
+                                  GTK_POLICY_AUTOMATIC);
+
+  gtk_container_add (GTK_CONTAINER (panel->themes_list_sw), panel->icon_view);
+  gtk_widget_grab_focus (panel->icon_view);
+
+  w = WID ("themes-main-scrolled-window");
+  gtk_container_add (GTK_CONTAINER (panel), w);
+  gtk_widget_show_all (GTK_WIDGET (panel));
+}
diff --git a/panels/themes/cc-themes-panel.h b/panels/themes/cc-themes-panel.h
new file mode 100644
index 0000000..1a28cb9
--- /dev/null
+++ b/panels/themes/cc-themes-panel.h
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2010 Intel, Inc
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#ifndef _CC_THEMES_PANEL_H
+#define _CC_THEMES_PANEL_H
+
+#include <shell/cc-panel.h>
+
+#define CC_TYPE_THEMES_PANEL (cc_themes_panel_get_type ())
+
+G_DECLARE_FINAL_TYPE (CcThemesPanel, cc_themes_panel, CC, THEMES_PANEL, CcPanel)
+
+G_END_DECLS
+
+#endif /* _CC_THEMES_PANEL_H */
diff --git a/panels/themes/gnome-themes-panel.desktop.in.in b/panels/themes/gnome-themes-panel.desktop.in.in
new file mode 100644
index 0000000..4a43041
--- /dev/null
+++ b/panels/themes/gnome-themes-panel.desktop.in.in
@@ -0,0 +1,14 @@
+[Desktop Entry]
+Name=Themes
+Comment=Change your Thema for window and icon
+Exec=gnome-control-center themes
+# Translators: Do NOT translate or transliterate this text (this is an icon file name)!
+Icon=preferences-desktop-wallpaper
+Terminal=false
+Type=Application
+NoDisplay=true
+StartupNotify=true
+Categories=GNOME;GTK;Settings;DesktopSettings;X-GNOME-Settings-Panel;X-GNOME-PersonalizationSettings;
+OnlyShowIn=GNOME;
+# Translators: Search terms to find the Background panel. Do NOT translate or localize the semicolons! The list MUST also end with a semicolon!
+Keywords=Theme;Desktop;
diff --git a/panels/themes/meson.build b/panels/themes/meson.build
new file mode 100644
index 0000000..7d21107
--- /dev/null
+++ b/panels/themes/meson.build
@@ -0,0 +1,52 @@
+panels_list += cappletname
+desktop = 'gnome-@0@-panel.desktop'.format(cappletname)
+
+desktop_in = configure_file(
+  input: desktop + '.in.in',
+  output: desktop + '.in',
+  configuration: desktop_conf
+)
+
+i18n.merge_file(
+  desktop,
+  type: 'desktop',
+  input: desktop_in,
+  output: desktop,
+  po_dir: po_dir,
+  install: true,
+  install_dir: control_center_desktopdir
+)
+
+sources = files(
+  'cc-themes-panel.c',
+)
+
+resource_data = files(
+  'themes.ui'
+)
+
+sources += gnome.compile_resources(
+  'cc-' + cappletname + '-resources',
+  cappletname + '.gresource.xml',
+  c_name: 'cc_' + cappletname,
+  dependencies: resource_data,
+  export: true
+)
+
+deps = common_deps + [
+  cups_dep,
+  m_dep,
+  polkit_gobject_dep,
+  dependency('smbclient')
+]
+
+cflags += '-DGNOMELOCALEDIR="@0@"'.format(control_center_localedir)
+
+themes_panel_lib = static_library(
+  cappletname,
+  sources: sources,
+  include_directories: [top_inc, common_inc, shell_inc],
+  dependencies: deps,
+  c_args: cflags
+)
+panels_libs += [ themes_panel_lib ]
diff --git a/panels/themes/themes.gresource.xml b/panels/themes/themes.gresource.xml
new file mode 100644
index 0000000..b3915eb
--- /dev/null
+++ b/panels/themes/themes.gresource.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<gresources>
+  <gresource prefix="/org/gnome/control-center/themes">
+    <file preprocess="xml-stripblanks">themes.ui</file>
+  </gresource>
+</gresources>
+
diff --git a/panels/themes/themes.ui b/panels/themes/themes.ui
new file mode 100644
index 0000000..659fb6a
--- /dev/null
+++ b/panels/themes/themes.ui
@@ -0,0 +1,180 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.22.1 -->
+<interface>
+  <requires lib="gtk+" version="3.20"/>
+  <object class="GtkSizeGroup" id="sizegroup1">
+    <property name="mode">both</property>
+  </object>
+  <object class="GtkScrolledWindow" id="themes-main-scrolled-window">
+    <property name="visible">True</property>
+    <property name="can_focus">True</property>
+    <property name="shadow_type">in</property>
+    <property name="min_content_width">700</property>
+    <property name="min_content_height">400</property>
+    <child>
+      <object class="GtkViewport">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <child>
+          <object class="GtkBox">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="hexpand">True</property>
+            <property name="vexpand">True</property>
+            <property name="orientation">vertical</property>
+            <property name="spacing">1</property>
+            <property name="baseline_position">top</property>
+            <child>
+              <object class="GtkFixed">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <child>
+                  <object class="GtkBox">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="halign">start</property>
+                    <property name="valign">start</property>
+                    <child>
+                      <object class="GtkLabel">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="halign">start</property>
+                        <property name="valign">start</property>
+                        <property name="label" translatable="yes">Current Theme : </property>
+                        <attributes>
+                          <attribute name="weight" value="bold"/>
+                        </attributes>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">0</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkLabel" id="current-theme-label">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="halign">start</property>
+                        <property name="valign">start</property>
+                        <property name="label" translatable="yes">label</property>
+                        <attributes>
+                          <attribute name="weight" value="bold"/>
+                        </attributes>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">1</property>
+                      </packing>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="x">10</property>
+                    <property name="y">13</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkBox">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="orientation">vertical</property>
+                    <child>
+                      <object class="GtkButton" id="theme-apply-button">
+                        <property name="label" translatable="yes">Apply</property>
+                        <property name="width_request">80</property>
+                        <property name="height_request">20</property>
+                        <property name="visible">True</property>
+                        <property name="can_focus">True</property>
+                        <property name="receives_default">True</property>
+                        <property name="halign">center</property>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">False</property>
+                        <property name="position">0</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkDrawingArea" id="current-theme-drawingarea">
+                        <property name="width_request">330</property>
+                        <property name="height_request">234</property>
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="margin_top">15</property>
+                        <property name="margin_bottom">10</property>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">1</property>
+                      </packing>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="x">208</property>
+                    <property name="y">10</property>
+                  </packing>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkBox" id="themes-list-box">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="orientation">vertical</property>
+                <child>
+                  <object class="GtkLabel">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="halign">start</property>
+                    <property name="valign">start</property>
+                    <property name="margin_left">25</property>
+                    <property name="label" translatable="yes">Theme List</property>
+                    <attributes>
+                      <attribute name="weight" value="bold"/>
+                    </attributes>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">0</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkScrolledWindow" id="themes-list-sw">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="margin_left">25</property>
+                    <property name="margin_right">25</property>
+                    <property name="margin_top">10</property>
+                    <property name="margin_bottom">10</property>
+                    <property name="shadow_type">in</property>
+                    <child>
+                      <placeholder/>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="expand">True</property>
+                    <property name="fill">True</property>
+                    <property name="position">1</property>
+                  </packing>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">True</property>
+                <property name="fill">True</property>
+                <property name="position">2</property>
+              </packing>
+            </child>
+          </object>
+        </child>
+      </object>
+    </child>
+  </object>
+</interface>
diff --git a/panels/thunderbolt/cc-bolt-panel.ui b/panels/thunderbolt/cc-bolt-panel.ui
index 226353c..68d340a 100644
--- a/panels/thunderbolt/cc-bolt-panel.ui
+++ b/panels/thunderbolt/cc-bolt-panel.ui
@@ -171,6 +171,22 @@
                         <property name="top_attach">1</property>
                       </packing>
                     </child>
+                    <child>
+                      <object class="GtkBox" id="details-supporter">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="expand">False</property>
+                        <property name="halign">center</property>
+                        <property name="valign">end</property>
+                        <property name="orientation">vertical</property>
+                        <property name="margin">25</property>
+                      </object>
+                      <packing>
+                        <property name="left_attach">1</property>
+                        <property name="top_attach">2</property>
+                      </packing>
+                    </child>
+
 
                   </object>
                 </child>
diff --git a/panels/universal-access/cc-ua-panel.c b/panels/universal-access/cc-ua-panel.c
index ee4665d..63c4cae 100644
--- a/panels/universal-access/cc-ua-panel.c
+++ b/panels/universal-access/cc-ua-panel.c
@@ -2,6 +2,7 @@
  *
  * Copyright (C) 2010 Intel, Inc
  * Copyright (C) 2008 William Jon McCann <jmccann@redhat.com>
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -31,7 +32,7 @@
 #include "cc-ua-panel.h"
 #include "cc-ua-resources.h"
 
-#include "zoom-options.h"
+//#include "zoom-options.h"
 
 #define DPI_FACTOR_LARGE 1.25
 #define DPI_FACTOR_NORMAL 1.0
@@ -128,15 +129,15 @@ struct _CcUaPanel
   GtkWidget *repeat_keys_switch;
   GtkWidget *row_accessx;
   GtkWidget *row_click_assist;
-  GtkWidget *row_cursor_blinking;
+  //GtkWidget *row_cursor_blinking;
   GtkWidget *row_cursor_size;
   GtkWidget *row_repeat_keys;
   GtkWidget *row_screen_reader;
   GtkWidget *row_sound_keys;
   GtkWidget *row_visual_alerts;
-  GtkWidget *row_zoom;
+  //GtkWidget *row_zoom;
   GtkWidget *scale_double_click_delay;
-  GtkWidget *screen_keyboard_switch;
+  //GtkWidget *screen_keyboard_switch;
   GtkWidget *screen_reader_dialog;
   GtkWidget *screen_reader_switch;
   GtkWidget *section_status;
@@ -166,11 +167,11 @@ struct _CcUaPanel
   GtkWidget *value_highcontrast;
   GtkWidget *value_large_text;
   GtkWidget *value_repeat_keys;
-  GtkWidget *value_row_cursor_blinking;
+  //GtkWidget *value_row_cursor_blinking;
   GtkWidget *value_screen_reader;
   GtkWidget *value_sound_keys;
   GtkWidget *value_visual_alerts;
-  GtkWidget *value_zoom;
+  //GtkWidget *value_zoom;
   GtkWidget *visual_alerts_dialog;
   GtkWidget *visual_alerts_screen_radio;
   GtkWidget *visual_alerts_switch;
@@ -186,7 +187,7 @@ struct _CcUaPanel
   GSettings *application_settings;
   GSettings *gsd_mouse_settings;
 
-  ZoomOptions *zoom_options;
+  //ZoomOptions *zoom_options;
 
   GtkAdjustment *focus_adjustment;
 
@@ -215,7 +216,7 @@ cc_ua_panel_dispose (GObject *object)
   g_clear_object (&self->application_settings);
   g_clear_object (&self->gsd_mouse_settings);
 
-  g_clear_object (&self->zoom_options);
+  //g_clear_object (&self->zoom_options);
 
   g_clear_pointer (&self->sections, g_list_free);
   g_clear_pointer (&self->sections_reverse, g_list_free);
@@ -247,7 +248,7 @@ cc_ua_panel_class_init (CcUaPanelClass *klass)
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, cursor_blinking_switch);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, cursor_size_dialog);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, cursor_size_grid);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, list_hearing);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, list_hearing);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, list_pointing);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, list_seeing);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, list_typing);
@@ -269,17 +270,16 @@ cc_ua_panel_class_init (CcUaPanelClass *klass)
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, repeat_keys_switch);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_accessx);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_click_assist);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_cursor_blinking);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_cursor_blinking);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_cursor_size);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_repeat_keys);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_screen_reader);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_screen_reader);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_sound_keys);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_visual_alerts);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_zoom);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, row_visual_alerts);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, scale_double_click_delay);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, screen_keyboard_switch);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, screen_keyboard_switch);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, screen_reader_dialog);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, screen_reader_switch);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, screen_reader_switch);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, section_status);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, sound_keys_dialog);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, sound_keys_switch);
@@ -307,30 +307,29 @@ cc_ua_panel_class_init (CcUaPanelClass *klass)
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_highcontrast);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_large_text);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_repeat_keys);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_row_cursor_blinking);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_screen_reader);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_row_cursor_blinking);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_screen_reader);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_sound_keys);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_visual_alerts);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_zoom);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, value_visual_alerts);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, visual_alerts_dialog);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, visual_alerts_screen_radio);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, visual_alerts_switch);
-  gtk_widget_class_bind_template_child (widget_class, CcUaPanel, visual_alerts_test_button);
+  //gtk_widget_class_bind_template_child (widget_class, CcUaPanel, visual_alerts_test_button);
   gtk_widget_class_bind_template_child (widget_class, CcUaPanel, visual_alerts_window_radio);
 }
 
 /* zoom options dialog */
-static void
-zoom_options_launch (CcUaPanel *self)
-{
-  if (self->zoom_options == NULL)
-    {
-      GtkWindow *window = GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (self)));
-      self->zoom_options = zoom_options_new (window);
-    }
-
-  gtk_window_present_with_time (GTK_WINDOW (self->zoom_options), GDK_CURRENT_TIME);
-}
+//static void
+//zoom_options_launch (CcUaPanel *self)
+//{
+//  if (self->zoom_options == NULL)
+//    {
+//      GtkWindow *window = GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (self)));
+//      self->zoom_options = zoom_options_new (window);
+//    }
+//
+//  gtk_window_present_with_time (GTK_WINDOW (self->zoom_options), GDK_CURRENT_TIME);
+//}
 
 /* cursor size dialog */
 static void
@@ -620,11 +619,11 @@ activate_row (CcUaPanel *self, GtkListBoxRow *row)
           toggle_switch (self->value_large_text);
           return;
         }
-      if (!g_strcmp0 (widget_name, "row_screen_keyboard"))
-        {
-          toggle_switch (self->screen_keyboard_switch);
-          return;
-        }
+//      if (!g_strcmp0 (widget_name, "row_screen_keyboard"))
+//        {
+//          toggle_switch (self->screen_keyboard_switch);
+//          return;
+//        }
       if (!g_strcmp0 (widget_name, "row_mouse_keys"))
         {
           toggle_switch (self->mouse_keys_switch);
@@ -633,12 +632,12 @@ activate_row (CcUaPanel *self, GtkListBoxRow *row)
     }
 
   /* Check dialog to open */
-  dialog_id = (const gchar *)g_object_get_data (G_OBJECT (row), "dialog-id");
-  if (g_strcmp0 (dialog_id, "zoom") == 0)
-    {
-      zoom_options_launch (self);
-      return;
-    }
+//  dialog_id = (const gchar *)g_object_get_data (G_OBJECT (row), "dialog-id");
+//  if (g_strcmp0 (dialog_id, "zoom") == 0)
+//    {
+//      zoom_options_launch (self);
+//      return;
+//    }
 
   dialog = (GtkWidget *)g_object_get_data (G_OBJECT (row), "dialog");
   if (dialog == NULL)
@@ -695,29 +694,29 @@ cc_ua_panel_init_seeing (CcUaPanel *self)
 
   /* zoom */
 
-  g_settings_bind_with_mapping (self->application_settings, "screen-magnifier-enabled",
-                                self->value_zoom,
-                                "label", G_SETTINGS_BIND_GET,
-                                on_off_label_mapping_get,
-                                NULL, NULL, NULL);
+//  g_settings_bind_with_mapping (self->application_settings, "screen-magnifier-enabled",
+//                                self->value_zoom,
+//                                "label", G_SETTINGS_BIND_GET,
+//                                on_off_label_mapping_get,
+//                                NULL, NULL, NULL);
 
-  g_object_set_data (G_OBJECT (self->row_zoom), "dialog-id", "zoom");
+  //g_object_set_data (G_OBJECT (self->row_zoom), "dialog-id", "zoom");
 
   /* screen reader */
 
-  g_settings_bind_with_mapping (self->application_settings, "screen-reader-enabled",
-                                self->value_screen_reader, "label",
-                                G_SETTINGS_BIND_GET,
-                                on_off_label_mapping_get,
-                                NULL, NULL, NULL);
+//  g_settings_bind_with_mapping (self->application_settings, "screen-reader-enabled",
+//                                self->value_screen_reader, "label",
+//                                G_SETTINGS_BIND_GET,
+//                                on_off_label_mapping_get,
+//                                NULL, NULL, NULL);
 
-  g_settings_bind (self->application_settings, "screen-reader-enabled",
-                   self->screen_reader_switch, "active",
-                   G_SETTINGS_BIND_DEFAULT);
+//  g_settings_bind (self->application_settings, "screen-reader-enabled",
+//                   self->screen_reader_switch, "active",
+//                   G_SETTINGS_BIND_DEFAULT);
 
   self->toplevels = g_slist_prepend (self->toplevels, self->screen_reader_dialog);
 
-  g_object_set_data (G_OBJECT (self->row_screen_reader), "dialog", self->screen_reader_dialog);
+//  g_object_set_data (G_OBJECT (self->row_screen_reader), "dialog", self->screen_reader_dialog);
   g_signal_connect (self->screen_reader_dialog, "delete-event",
                     G_CALLBACK (gtk_widget_hide_on_delete), NULL);
 
@@ -844,15 +843,15 @@ on_repeat_keys_toggled (GSettings *settings, const gchar *key, CcUaPanel *self)
   gtk_widget_set_sensitive (self->repeat_keys_speed_grid, on);
 }
 
-static void
-on_cursor_blinking_toggled (GSettings *settings, const gchar *key, CcUaPanel *self)
-{
-  gboolean on;
-
-  on = g_settings_get_boolean (settings, KEY_CURSOR_BLINKING);
-
-  gtk_label_set_text (GTK_LABEL (self->value_row_cursor_blinking), on ? _("On") : _("Off"));
-}
+//static void
+//on_cursor_blinking_toggled (GSettings *settings, const gchar *key, CcUaPanel *self)
+//{
+//  gboolean on;
+//
+//  on = g_settings_get_boolean (settings, KEY_CURSOR_BLINKING);
+//
+//  gtk_label_set_text (GTK_LABEL (self->value_row_cursor_blinking), on ? _("On") : _("Off"));
+//}
 
 static void
 update_accessx_label (GSettings *settings, const gchar *key, CcUaPanel *self)
@@ -882,9 +881,9 @@ cc_ua_panel_init_keyboard (CcUaPanel *self)
                             G_CALLBACK (activate_row), self);
 
   /* on-screen keyboard */
-  g_settings_bind (self->application_settings, KEY_SCREEN_KEYBOARD_ENABLED,
-                   self->screen_keyboard_switch, "active",
-                   G_SETTINGS_BIND_DEFAULT);
+//  g_settings_bind (self->application_settings, KEY_SCREEN_KEYBOARD_ENABLED,
+//                   self->screen_keyboard_switch, "active",
+//                   G_SETTINGS_BIND_DEFAULT);
 
   /* Repeat keys */
   g_signal_connect (self->kb_desktop_settings, "changed",
@@ -911,12 +910,12 @@ cc_ua_panel_init_keyboard (CcUaPanel *self)
                    G_SETTINGS_BIND_DEFAULT);
 
   /* Cursor Blinking */
-  g_signal_connect (self->interface_settings, "changed",
-                    G_CALLBACK (on_cursor_blinking_toggled), self);
+//  g_signal_connect (self->interface_settings, "changed",
+//                    G_CALLBACK (on_cursor_blinking_toggled), self);
 
   self->toplevels = g_slist_prepend (self->toplevels, self->cursor_blinking_dialog);
 
-  g_object_set_data (G_OBJECT (self->row_cursor_blinking), "dialog", self->cursor_blinking_dialog);
+  //g_object_set_data (G_OBJECT (self->row_cursor_blinking), "dialog", self->cursor_blinking_dialog);
 
   g_signal_connect (self->cursor_blinking_dialog, "delete-event",
                     G_CALLBACK (gtk_widget_hide_on_delete), NULL);
@@ -925,7 +924,7 @@ cc_ua_panel_init_keyboard (CcUaPanel *self)
   g_settings_bind (self->interface_settings, KEY_CURSOR_BLINKING,
                    sw, "active",
                    G_SETTINGS_BIND_DEFAULT);
-  on_cursor_blinking_toggled (self->interface_settings, NULL, self);
+//  on_cursor_blinking_toggled (self->interface_settings, NULL, self);
 
   g_settings_bind (self->interface_settings, KEY_CURSOR_BLINKING_TIME,
                    gtk_range_get_adjustment (GTK_RANGE (self->cursor_blinking_scale)), "value",
@@ -1120,7 +1119,7 @@ cc_ua_panel_init (CcUaPanel *self)
 
   cc_ua_panel_init_status (self);
   cc_ua_panel_init_seeing (self);
-  cc_ua_panel_init_hearing (self);
+  //cc_ua_panel_init_hearing (self);
   cc_ua_panel_init_keyboard (self);
   cc_ua_panel_init_mouse (self);
 
diff --git a/panels/universal-access/uap.ui b/panels/universal-access/uap.ui
index f417e9e..046eb9c 100644
--- a/panels/universal-access/uap.ui
+++ b/panels/universal-access/uap.ui
@@ -301,7 +301,7 @@
                                     </child>
                                   </object>
                                 </child>
-                                <child>
+                                <!--<child>
                                   <object class="GtkListBoxRow" id="row_zoom">
                                     <property name="visible">True</property>
                                     <property name="can_focus">True</property>
@@ -346,8 +346,8 @@
                                       </object>
                                     </child>
                                   </object>
-                                </child>
-                                <child>
+                                </child>-->
+                                <!--<child>
                                   <object class="GtkListBoxRow" id="row_screen_reader">
                                     <property name="visible">True</property>
                                     <property name="can_focus">True</property>
@@ -392,7 +392,7 @@
                                       </object>
                                     </child>
                                   </object>
-                                </child>
+                                </child>-->
                                 <child>
                                   <object class="GtkListBoxRow" id="row_sound_keys">
                                     <property name="visible">True</property>
@@ -458,7 +458,7 @@
                         <property name="position">1</property>
                       </packing>
                     </child>
-                    <child>
+                    <!--<child>
                       <object class="GtkBox" id="section_hearing">
                         <property name="visible">True</property>
                         <property name="can_focus">False</property>
@@ -563,7 +563,7 @@
                         <property name="fill">True</property>
                         <property name="position">2</property>
                       </packing>
-                    </child>
+                    </child>-->
                     <child>
                       <object class="GtkBox" id="section_typing">
                         <property name="visible">True</property>
@@ -605,7 +605,7 @@
                                 <accessibility>
                                   <relation target="heading_typing" type="labelled-by"/>
                                 </accessibility>
-                                <child>
+                                <!--<child>
                                   <object class="GtkListBoxRow" id="row_screen_keyboard">
                                     <property name="visible">True</property>
                                     <property name="can_focus">True</property>
@@ -651,7 +651,7 @@
                                       </object>
                                     </child>
                                   </object>
-                                </child>
+                                </child>-->
                                 <child>
                                   <object class="GtkListBoxRow" id="row_repeat_keys">
                                     <property name="visible">True</property>
@@ -698,7 +698,7 @@
                                     </child>
                                   </object>
                                 </child>
-                                <child>
+                                <!--<child>
                                   <object class="GtkListBoxRow" id="row_cursor_blinking">
                                     <property name="visible">True</property>
                                     <property name="can_focus">True</property>
@@ -743,7 +743,7 @@
                                       </object>
                                     </child>
                                   </object>
-                                </child>
+                                </child>-->
                                 <child>
                                   <object class="GtkListBoxRow" id="row_accessx">
                                     <property name="visible">True</property>
@@ -1032,11 +1032,11 @@
       <widget name="row_highcontrast"/>
       <widget name="row_large_text"/>
       <widget name="row_cursor_size"/>
-      <widget name="row_zoom"/>
-      <widget name="row_screen_reader"/>
+      <!--<widget name="row_zoom"/>-->
+      <!--<widget name="row_screen_reader"/>-->
       <widget name="row_sound_keys"/>
-      <widget name="row_visual_alerts"/>
-      <widget name="row_screen_keyboard"/>
+      <!--<widget name="row_visual_alerts"/>-->
+      <!--<widget name="row_screen_keyboard"/>-->
       <widget name="row_accessx"/>
       <widget name="row_mouse_keys"/>
       <widget name="row_click_assist"/>
@@ -1413,9 +1413,9 @@
         </child>
       </object>
     </child>
-    <action-widgets>
+    <!--<action-widgets>
       <action-widget response="0">visual_alerts_test_button</action-widget>
-    </action-widgets>
+    </action-widgets>-->
   </object>
   <object class="GtkAdjustment" id="typing_bouncekeys_delay_adjustment">
     <property name="upper">900</property>
diff --git a/panels/user-accounts/meson.build b/panels/user-accounts/meson.build
index 0b0a4fe..7b750df 100644
--- a/panels/user-accounts/meson.build
+++ b/panels/user-accounts/meson.build
@@ -178,7 +178,8 @@ endif
 cflags += [
   '-DGNOMELOCALEDIR="@0@"'.format(control_center_localedir),
   '-DHAVE_LIBPWQUALITY',
-  '-DUM_PIXMAP_DIR="@0@"'.format(join_paths(control_center_pkgdatadir, 'pixmaps'))
+  '-DUM_PIXMAP_DIR="@0@"'.format(join_paths(control_center_pkgdatadir, 'pixmaps')),
+  '-DECRYPTFS_DIR="/home/.ecryptfs"'
 ]
 
 panels_libs += static_library(
diff --git a/panels/user-accounts/pw-utils.c b/panels/user-accounts/pw-utils.c
index 8b2c39f..510fd36 100644
--- a/panels/user-accounts/pw-utils.c
+++ b/panels/user-accounts/pw-utils.c
@@ -1,6 +1,7 @@
 /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
  *
  * Copyright 2012  Red Hat, Inc,
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.k>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -94,7 +95,8 @@ pw_error_hint (gint error)
         case PWQ_ERROR_CRACKLIB_CHECK:
                 return C_("Password hint", "Try to avoid common words.");
         case PWQ_ERROR_PALINDROME:
-                return C_("Password hint", "Try to avoid reordering existing words.");
+                return C_("Password hint", "Do not enter the same words consecutively.");
+                //return C_("Password hint", "Try to avoid reordering existing words.");
         case PWQ_ERROR_MIN_DIGITS:
                 return C_("Password hint", "Try to use more numbers.");
         case PWQ_ERROR_MIN_UPPERS:
diff --git a/panels/user-accounts/um-user-panel.c b/panels/user-accounts/um-user-panel.c
index eaa77bd..7d25221 100644
--- a/panels/user-accounts/um-user-panel.c
+++ b/panels/user-accounts/um-user-panel.c
@@ -1,6 +1,7 @@
 /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
  *
  * Copyright 2009-2010  Red Hat, Inc,
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -966,6 +967,19 @@ restart_now (CcUserPanel *self)
         g_object_unref (bus);
 }
 
+static void
+response_restart_dialog (GtkDialog* dialog,
+                         gint id,
+                         gpointer user_data)
+{
+    CcUserPanel *self = user_data;
+
+    if (id == -8)
+        restart_now (self);
+    
+    gtk_widget_destroy (dialog);
+}
+
 static void
 show_restart_notification (CcUserPanel *self, const gchar *locale)
 {
@@ -976,7 +990,19 @@ show_restart_notification (CcUserPanel *self, const gchar *locale)
                 setlocale (LC_MESSAGES, locale);
         }
 
-        gtk_revealer_set_reveal_child (GTK_REVEALER (self->notification), TRUE);
+        //gtk_revealer_set_reveal_child (GTK_REVEALER (self->notification), TRUE);
+        GtkWidget* restart_dialog = gtk_message_dialog_new (NULL,
+                                                            0,
+                                                            GTK_MESSAGE_INFO,
+                                                            GTK_BUTTONS_YES_NO,
+                                                            _("User infomations has changed.\nChanges take effect after your session needs to be restarted.\nDo you want restart?"));
+
+        g_signal_connect (restart_dialog,
+                          "response",
+                          G_CALLBACK (response_restart_dialog),
+                          self);
+
+        gtk_widget_show (restart_dialog);
 
         if (locale) {
                 setlocale (LC_MESSAGES, current_locale);
diff --git a/panels/wacom/cc-wacom-panel.c b/panels/wacom/cc-wacom-panel.c
index 0cb2f42..896032a 100644
--- a/panels/wacom/cc-wacom-panel.c
+++ b/panels/wacom/cc-wacom-panel.c
@@ -1,5 +1,6 @@
 /*
  * Copyright © 2011 Red Hat, Inc.
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -101,7 +102,7 @@ update_visibility (GsdDeviceManager *manager,
 	application = CC_APPLICATION (g_application_get_default ());
 	cc_shell_model_set_panel_visibility (cc_application_get_model (application),
 					     "wacom",
-					     i > 0 ? CC_PANEL_VISIBLE : CC_PANEL_VISIBLE_IN_SEARCH);
+					     i > 0 ? CC_PANEL_VISIBLE : CC_PANEL_HIDDEN);
 
 	g_debug ("Wacom panel visible: %s", i > 0 ? "yes" : "no");
 }
diff --git a/po/POTFILES.in b/po/POTFILES.in
index 43c542b..ce2d45a 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -33,6 +33,12 @@ panels/datetime/ydm.ui
 panels/display/cc-display-panel.c
 panels/display/cc-night-light-dialog.ui
 panels/display/gnome-display-panel.desktop.in.in
+panels/font/cc-font-panel.c
+panels/font/font.ui
+panels/font/gnome-font-panel.desktop.in.in
+panals/themes/cc-themes-panel.c
+panels/themes/themes.ui
+panels/themes/gnome-themes-panel.desktop.in.in
 panels/info/cc-info-overview-panel.c
 panels/info/cc-info-removable-media-panel.c
 panels/info/gnome-default-apps-panel.desktop.in.in
diff --git a/po/en.po b/po/en.po
index b5bf16d..8a8f356 100644
--- a/po/en.po
+++ b/po/en.po
@@ -1,5 +1,6 @@
 # SOME DESCRIPTIVE TITLE.
 # Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
 # This file is distributed under the same license as the PACKAGE package.
 # FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
 #
@@ -3193,3 +3194,135 @@ msgstr ""
 #: ../shell/shell.ui.h:2
 msgid "_All Settings"
 msgstr ""
+
+msgid "Font"
+msgstr ""
+
+#: ../panels/font/font.ui:10
+msgid "full"
+msgstr ""
+
+#: ../panels/font/font.ui:13
+msgid "medium"
+msgstr ""
+
+#: ../panels/font/font.ui:16
+msgid "slight"
+msgstr ""
+
+#: ../panels/font/font.ui:19
+msgid "none"
+msgstr ""
+
+#: ../panels/font/font.ui:22
+msgid "rgba"
+msgstr ""
+
+#: ../panels/font/font.ui:25
+msgid "grayscale"
+msgstr ""
+
+#: ../panels/font/font.ui:118
+msgid "Interface Text"
+msgstr ""
+
+#: ../panels/font/font.ui:172
+msgid "Document Text"
+msgstr ""
+
+#: ../panels/font/font.ui:226
+msgid "Monospace Text"
+msgstr ""
+
+#: ../panels/font/font.ui:280 ../panels/font/font.ui:375
+#: ../panels/font/font.ui:425
+msgid "Legacy Window Titles"
+msgstr ""
+
+#. List of applications.
+#: ../panels/font/font.ui:328
+msgid "Font Rendering Settings"
+msgstr ""
+
+#: ../panels/font/font.ui:425
+msgid "AntiAliasing"
+msgstr ""
+
+#: ../panels/font/font.ui:480
+msgid "Scale Constant"
+msgstr ""
+
+msgid "Show settings list"
+msgstr ""
+
+msgid "Show side panel list that matches the User settings values."
+msgstr ""
+
+#: ../panels/themes/themes.ui:65
+msgid "Apply"
+msgstr ""
+
+#: ../panels/themes/gnome-themes-panel.desktop.in.in:4
+msgid "Change your Thema for window and icon"
+msgstr ""
+
+#: ../panels/themes/themes.ui:37
+msgid "Current Theme : "
+msgstr ""
+
+#: ../panels/themes/themes.ui:116
+msgid "Theme List"
+msgstr ""
+
+#: ../panels/themes/gnome-themes-panel.desktop.in.in:3
+msgid "Themes"
+msgstr ""
+
+#: ../panels/themes/themes.ui:52
+msgid "theme"
+msgstr ""
+
+msgid "Gooroom Icon Theme %s"
+msgstr ""
+
+#: ../panels/font/cc-font-panel.c:339
+msgid "_small"
+msgstr ""
+
+#: ../panels/font/cc-font-panel.c:340
+msgid "_medium"
+msgstr ""
+
+#: ../panels/font/cc-font-panel.c:341
+msgid "_large"
+msgstr ""
+
+#: ../panels/user-accounts/um-user-panel.c:997
+msgid ""
+"Your session needs to be restarted for changes to take effect.\n"
+"Do you want restart?"
+msgstr ""
+"Your session needs to be restarted for changes to take effect.\n"
+"Do you want restart?"
+
+#: ../panels/power/cc-power-panel.c:1842
+msgid "Screen dims when the computer operates on battery power."
+msgstr ""
+
+#: ../panels/printers/cc-printer-panel.c:1136
+msgid ""
+"Media control access not permission.\n"
+"To use, change access permission to \"allow\""
+msgstr "Media control access not permission."
+"To use, change access permission to \"allow\""
+
+#: ../panels/user-accounts/um-user-panel.c:997
+msgid ""
+"User infomations has changed.\n"
+"Changes take effect after your session needs to be restarted.\n"
+"Do you want restart?"
+msgstr ""
+"User infomations has changed.\n"
+"Changes take effect after your session needs to be restarted.\n"
+"Do you want restart?"
+
diff --git a/po/en_GB.po b/po/en_GB.po
index 200d00a..941a474 100644
--- a/po/en_GB.po
+++ b/po/en_GB.po
@@ -5,6 +5,7 @@
 # Philip Withnall <philip@tecnocode.co.uk>, 2010, 2013.
 # Chris Leonard <cjl@laptop.org>, 2012.
 # Bruce Cowan <bruce@bcowan.eu>, 2009, 2010, 2011, 2012, 2013, 2016, 2017, 2018.
+# Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
 #
 msgid ""
 msgstr ""
@@ -7739,6 +7740,69 @@ msgstr[1] "%u Inputs"
 msgid "System Sounds"
 msgstr "System Sounds"
 
+msgid "Font"
+msgstr "Font"
+
+#: ../panels/font/font.ui:10
+msgid "full"
+msgstr "Full"
+
+#: ../panels/font/font.ui:13
+msgid "medium"
+msgstr "Medium"
+
+#: ../panels/font/font.ui:16
+msgid "slight"
+msgstr "Slight"
+
+#: ../panels/font/font.ui:19
+msgid "none"
+msgstr "None"
+
+#: ../panels/font/font.ui:22
+msgid "rgba"
+msgstr "Sub Pixel(For LCD Display)"
+
+#: ../panels/font/font.ui:25
+msgid "grayscale"
+msgstr "Standard(Grayscale)"
+
+#: ../panels/font/font.ui:118
+msgid "Interface Text"
+msgstr "Interface Text"
+
+#: ../panels/font/font.ui:172
+msgid "Document Text"
+msgstr "Document Text"
+
+#: ../panels/font/font.ui:226
+msgid "Monospace Text"
+msgstr "Monospace Text"
+
+#: ../panels/font/font.ui:280 ../panels/font/font.ui:375
+#: ../panels/font/font.ui:425
+msgid "Legacy Window Titles"
+msgstr "Legacy Window Titles"
+
+#. List of applications.
+#: ../panels/font/font.ui:328
+msgid "Font Rendering Settings"
+msgstr "Font Rendering Settings"
+
+#: ../panels/font/font.ui:425
+msgid "AntiAliasing"
+msgstr "AntiAliasing"
+
+#: ../panels/font/font.ui:480
+msgid "Scale Constant"
+msgstr "Scale Constant"
+
+msgid "Show settings list"
+msgstr "Show settings list"
+
+msgid "Show side panel list that matches the User settings values."
+msgstr "Show side panel list that matches the User settings values."
+
 #~ msgid "_Verify New Password"
 #~ msgstr "_Verify New Password"
 
@@ -12359,9 +12423,6 @@ msgstr "System Sounds"
 #~ "The theme you have selected suggests a new font. A preview of the font is "
 #~ "shown below."
 
-#~ msgid "Themes"
-#~ msgstr "Themes"
-
 #~ msgid "Description"
 #~ msgstr "Description"
 
@@ -13309,3 +13370,80 @@ msgstr "System Sounds"
 
 #~ msgid "The typing monitor is already running."
 #~ msgstr "The typing monitor is already running."
+
+#: ../panels/themes/gnome-themes-panel.desktop.in.in:4
+msgid "Change your Thema for window and icon"
+msgstr "Change your Thema for window and icon"
+
+#: ../panels/themes/themes.ui:37
+msgid "Current Theme : "
+msgstr "Current Theme : "
+
+#: ../panels/themes/themes.ui:116
+msgid "Theme List"
+msgstr "Theme List"
+
+#: ../panels/themes/gnome-themes-panel.desktop.in.in:3
+msgid "Themes"
+msgstr "Themes"
+
+#: ../panels/themes/themes.ui:52
+msgid "theme"
+msgstr "theme"
+
+msgid "Gooroom Icon Theme %s"
+msgstr "Gooroom Theme %s"
+
+#: ../panels/font/cc-font-panel.c:339
+msgid "_small"
+msgstr "Small"
+
+#: ../panels/font/cc-font-panel.c:340
+msgid "_medium"
+msgstr "Medium"
+
+#: ../panels/font/cc-font-panel.c:341
+msgid "_large"
+msgstr "Large"
+
+#: ../panels/network/network.ui.h:23
+#: ../panels/user-accounts/um-lockbutton.c:356
+msgid "Unlock"
+msgstr "Unlock"
+
+#: ../panels/user-accounts/um-user-panel.c:997
+msgid ""
+"Your session needs to be restarted for changes to take effect.\n"
+"Do you want restart?"
+msgstr ""
+""
+""
+
+#: ../panels/datetime/datetime.ui:333
+#: ../panels/datetime/datetime.ui:441
+msgid "Apply network time when connecting to the Internet"
+msgstr ""
+
+#: panels/user-accounts/pw-utils.c:97
+msgctxt "Password hint"
+msgid "Do not enter the same words consecutively."
+msgstr ""
+
+#: ../panels/printers/cc-printer-panel.c:1136
+msgid ""
+"Media control access not permission.\n"
+"To use, change access permission to \"allow\""
+msgstr ""
+"Media control access not permission."
+"To use, change access permission to \"allow\""
+
+#: ../panels/user-accounts/um-user-panel.c:997
+msgid ""
+"User infomations has changed.\n"
+"Changes take effect after your session needs to be restarted.\n"
+"Do you want restart?"
+msgstr ""
+"User infomations has changed.\n"
+"Changes take effect after your session needs to be restarted.\n"
+"Do you want restart?"
+
diff --git a/po/ko.po b/po/ko.po
index a891961..0ff0d97 100644
--- a/po/ko.po
+++ b/po/ko.po
@@ -4,6 +4,7 @@
 # Young-Ho Cha <ganadist@chollian.net>, 2002, 2006.
 # Seong-ho Cho <darkcircle.0426@gmail.com>, 2011, 2012.
 # Changwoo Ryu <cwryu@debian.org>, 2002-2018.
+# Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
 #
 #
 # - 주의: 여러가지 분야의 어려운 용어가 많습니다. 충분히 시간을 두고 실제 의미가
@@ -7706,3 +7707,163 @@ msgstr[0] "%u개 입력"
 #: subprojects/gvc/gvc-mixer-control.c:2738
 msgid "System Sounds"
 msgstr "시스템 사운드"
+
+msgid "Font"
+msgstr "글꼴"
+
+#: ../panels/font/font.ui:10
+msgid "full"
+msgstr "완전히"
+
+#: ../panels/font/font.ui:13
+msgid "medium"
+msgstr "적당히"
+
+#: ../panels/font/font.ui:16
+msgid "slight"
+msgstr "조금"
+
+#: ../panels/font/font.ui:19
+msgid "none"
+msgstr "없음"
+
+#: ../panels/font/font.ui:22
+msgid "rgba"
+msgstr "서브픽셀(LCD 화면용)"
+
+#: ../panels/font/font.ui:25
+msgid "grayscale"
+msgstr "표준(흑백)"
+
+#: ../panels/font/font.ui:118
+msgid "Interface Text"
+msgstr "인터페이스 텍스트"
+
+#: ../panels/font/font.ui:172
+msgid "Document Text"
+msgstr "문서 텍스트"
+
+#: ../panels/font/font.ui:226
+msgid "Monospace Text"
+msgstr "고정폭 텍스트"
+
+#: ../panels/font/font.ui:280 ../panels/font/font.ui:375
+#: ../panels/font/font.ui:425
+msgid "Legacy Window Titles"
+msgstr "이전 방식 창 제목"
+
+#. List of applications.
+#: ../panels/font/font.ui:328
+msgid "Font Rendering Settings"
+msgstr "글꼴 그리기 설정"
+
+#: ../panels/font/font.ui:425
+msgid "AntiAliasing"
+msgstr "안티 알리아싱"
+
+#: ../panels/font/font.ui:480
+msgid "Scale Constant"
+msgstr "스케일 상수"
+
+msgid "Show settings list"
+msgstr "패널 목록을 숨김"
+
+msgid "Show side panel list that matches the User settings values."
+msgstr "사용자 설정 값과 일치하는 사이드 목록을 숨깁니다."
+
+#: ../panels/themes/themes.ui:65
+msgid "Apply"
+msgstr "적용"
+
+#: ../panels/themes/gnome-themes-panel.desktop.in.in:4
+msgid "Change your Thema for window and icon"
+msgstr "아이콘 또는 윈도우 창의 테마를 변경합니다."
+
+#: ../panels/themes/themes.ui:37
+msgid "Current Theme : "
+msgstr "현재 테마 : "
+
+#: ../panels/themes/themes.ui:116
+msgid "Theme List"
+msgstr "테마 목록"
+
+#: ../panels/themes/gnome-themes-panel.desktop.in.in:3
+msgid "Themes"
+msgstr "테마"
+
+#: ../panels/themes/themes.ui:52
+msgid "theme"
+msgstr "테마"
+
+msgid "Gooroom Icon Theme %s"
+msgstr "구름 테마 %s"
+
+#: ../panels/font/cc-font-panel.c:339
+msgid "_small"
+msgstr "작게"
+
+#: ../panels/font/cc-font-panel.c:340
+msgid "_medium"
+msgstr "중간"
+
+#: ../panels/font/cc-font-panel.c:341
+msgid "_large"
+msgstr "크게"
+
+#: ../panels/user-accounts/um-lockbutton.c:365
+msgid "Locked"
+msgstr "잠김"
+
+#: ../panels/network/network.ui.h:23
+#: ../panels/user-accounts/um-lockbutton.c:356
+msgid "Unlock"
+msgstr "잠금 해제"
+
+#: ../panels/user-accounts/um-lockbutton.c:383
+msgid ""
+"Dialog is locked.\n"
+"Click to make changes"
+msgstr ""
+"대화창이 잠겼습니다.\n"
+"바꾸려면 누르십시오"
+
+#: ../panels/user-accounts/um-user-panel.c:998
+msgid ""
+"Your session needs to be restarted for changes to take effect.\n"
+"Do you want restart?"
+msgstr ""
+"바뀐 사항을 적용하려면 세션을 다시 시작해야 합니다.\n"
+"다시 시작하시겠습니까?"
+
+#: ../panels/datetime/datetime.ui:333
+#: ../panels/datetime/datetime.ui:441
+msgid "Apply network time when connecting to the Internet"
+msgstr "인터넷 연결 시 네트워크 시간 적용"
+
+#: panels/user-accounts/pw-utils.c:97
+msgctxt "Password hint"
+msgid "Do not enter the same words consecutively."
+msgstr "같은 단어를 연속해서 입력하지 마십시오."
+
+#: ../panels/power/cc-power-panel.c:1842
+msgid "Screen dims when the computer operates on battery power."
+msgstr "컴퓨터가 배터리 전원으로 동작하면 화면이 어두워 집니다."
+
+#: ../panels/printers/cc-printer-panel.c:1136
+msgid ""
+"Media control access not permission.\n"
+"To use, change access permission to \"allow\""
+msgstr ""
+"매체제어 접근 권한이 없습니다.\n"
+"사용하시려면 접근 권한을 \"allow\"로 변경하십시오."
+
+#: ../panels/user-accounts/um-user-panel.c:997
+msgid ""
+"User infomations has changed.\n"
+"Changes take effect after your session needs to be restarted.\n"
+"Do you want restart?"
+msgstr ""
+"사용자 정보가 변경되었습니다.\n"
+"세션을 다시 시작해야 변경 사항이 적용됩니다.\n"
+"다시 시작하시겠습니까?"
+
diff --git a/shell/cc-application.c b/shell/cc-application.c
index 8ffb2bd..fb15a64 100644
--- a/shell/cc-application.c
+++ b/shell/cc-application.c
@@ -1,5 +1,6 @@
 /*
  * Copyright © 2013 Red Hat, Inc.
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License
@@ -227,9 +228,9 @@ static void
 cc_application_startup (GApplication *application)
 {
   CcApplication *self = CC_APPLICATION (application);
-  GMenu *section;
-  GMenu *menu;
-  const gchar *help_accels[] = { "F1", NULL };
+  //GMenu *section;
+  //GMenu *menu;
+  //const gchar *help_accels[] = { "F1", NULL };
 
   g_action_map_add_action_entries (G_ACTION_MAP (self),
                                    cc_app_actions,
@@ -246,20 +247,20 @@ cc_application_startup (GApplication *application)
     }
 #endif /* HAVE_WACOM || HAVE_CHEESE */
 
-  menu = g_menu_new ();
+  //menu = g_menu_new ();
 
-  section = g_menu_new ();
-  g_menu_append (section, _("Keyboard Shortcuts"), "win.show-help-overlay");
-  g_menu_append (section, _("Help"), "app.help");
-  g_menu_append (section, _("Quit"), "app.quit");
+  //section = g_menu_new ();
+  //g_menu_append (section, _("Keyboard Shortcuts"), "win.show-help-overlay");
+  //g_menu_append (section, _("Help"), "app.help");
+  //g_menu_append (section, _("Quit"), "app.quit");
 
-  g_menu_append_section (menu, NULL, G_MENU_MODEL (section));
+  //g_menu_append_section (menu, NULL, G_MENU_MODEL (section));
 
-  gtk_application_set_app_menu (GTK_APPLICATION (application),
-                                G_MENU_MODEL (menu));
+  //gtk_application_set_app_menu (GTK_APPLICATION (application),
+  //                              G_MENU_MODEL (menu));
 
-  gtk_application_set_accels_for_action (GTK_APPLICATION (application),
-                                         "app.help", help_accels);
+  //gtk_application_set_accels_for_action (GTK_APPLICATION (application),
+  //                                       "app.help", help_accels);
 
   self->model = cc_shell_model_new ();
   self->window = cc_window_new (GTK_APPLICATION (application), self->model);
diff --git a/shell/cc-panel-list.c b/shell/cc-panel-list.c
index 39a46b4..bb4661f 100644
--- a/shell/cc-panel-list.c
+++ b/shell/cc-panel-list.c
@@ -1,6 +1,7 @@
 /* cc-panel-list.c
  *
  * Copyright (C) 2016 Endless, Inc
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -329,6 +330,8 @@ static const gchar * const panel_order[] = {
   "mobile-broadband",
   "bluetooth",
   "background",
+  "font",
+  "themes",
   "notifications",
   "search",
   "region",
@@ -516,6 +519,25 @@ header_func (GtkListBoxRow *row,
     }
 }
 
+// set visible details_row & devices_row
+static void 
+show_panel_list_row_box (GtkWidget *listbox, GtkWidget *row)
+{
+  GList   *child_list, *l;
+
+  gtk_widget_hide ((GtkWidget*)row);
+  child_list = gtk_container_get_children (GTK_CONTAINER (listbox));
+  for (l = child_list; l != NULL; l = l->next)
+  {
+    RowData *rd = g_object_get_data (l->data, "data");
+    if (gtk_widget_get_visible (rd->row))
+    {
+      gtk_widget_show ((GtkWidget*)row);
+      break;
+    }
+  }
+}
+
 /*
  * Callbacks
  */
@@ -525,6 +547,7 @@ row_activated_cb (GtkWidget     *listbox,
                   CcPanelList   *self)
 {
   RowData *data;
+  GList   *child_list, *l;
 
   /* Details */
   if (row == self->details_row)
@@ -556,6 +579,10 @@ row_activated_cb (GtkWidget     *listbox,
         gtk_list_box_unselect_all (GTK_LIST_BOX (self->devices_listbox));
     }
 
+  // visible details & devices list row box
+  show_panel_list_row_box (self->details_listbox, self->details_row);
+  show_panel_list_row_box (self->devices_listbox, self->devices_row);
+
   /*
    * Since we're not sure that the activated row is in the
    * current view, set the view here.
@@ -829,10 +856,21 @@ cc_panel_list_activate (CcPanelList *self)
 
   listbox = get_listbox_from_view (self, self->view);
 
-  /* Select the first visible row */
-  do
-    row = gtk_list_box_get_row_at_index (GTK_LIST_BOX (listbox), i++);
-  while (row && !gtk_widget_get_visible (GTK_WIDGET (row)));
+  /* 패널 검색에서 텍스트를 입력 후 Enter 또는 뒤로 가기를 한 경우
+     무조건 privacy패널을 선택하는 오류가 있어서 주석처리함... */
+//  /* Select the first visible row */
+//  do
+//    row = gtk_list_box_get_row_at_index (GTK_LIST_BOX (listbox), i++);
+//  while (row && !gtk_widget_get_visible (GTK_WIDGET (row)));
+
+  if (self->view == CC_PANEL_LIST_SEARCH)
+    row = gtk_list_box_get_row_at_y (GTK_LIST_BOX (listbox), 0);
+  else   
+    {  
+      row = gtk_list_box_get_selected_row (GTK_LIST_BOX (listbox));
+      if (!row)
+        row = gtk_list_box_get_row_at_index (GTK_LIST_BOX (listbox), 0);
+    }
 
   /* If the row is valid, activate it */
   if (row)
diff --git a/shell/cc-panel-loader.c b/shell/cc-panel-loader.c
index 6b5c6e3..426af1c 100644
--- a/shell/cc-panel-loader.c
+++ b/shell/cc-panel-loader.c
@@ -1,6 +1,7 @@
 /* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
 /*
  * Copyright (c) 2012 Giovanni Campagna <scampa.giovanni@gmail.com>
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * The Control Center is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by the
@@ -46,7 +47,7 @@ extern GType cc_mouse_panel_get_type (void);
 extern GType cc_network_panel_get_type (void);
 extern GType cc_wifi_panel_get_type (void);
 #endif /* BUILD_NETWORK */
-extern GType cc_notifications_panel_get_type (void);
+//extern GType cc_notifications_panel_get_type (void);
 extern GType cc_goa_panel_get_type (void);
 extern GType cc_power_panel_get_type (void);
 extern GType cc_printers_panel_get_type (void);
@@ -55,6 +56,8 @@ extern GType cc_region_panel_get_type (void);
 extern GType cc_search_panel_get_type (void);
 extern GType cc_sharing_panel_get_type (void);
 extern GType cc_sound_panel_get_type (void);
+extern GType cc_font_panel_get_type (void);
+extern GType cc_themes_panel_get_type (void);
 #ifdef BUILD_THUNDERBOLT
 extern GType cc_bolt_panel_get_type (void);
 #endif /* BUILD_THUNDERBOLT */
@@ -91,6 +94,8 @@ static struct {
 #ifdef BUILD_BLUETOOTH
   PANEL_TYPE("bluetooth",        cc_bluetooth_panel_get_type,            NULL),
 #endif
+  PANEL_TYPE("font",             cc_font_panel_get_type,                 NULL),
+  PANEL_TYPE("themes",           cc_themes_panel_get_type,               NULL),
   PANEL_TYPE("color",            cc_color_panel_get_type,                NULL),
   PANEL_TYPE("datetime",         cc_date_time_panel_get_type,            NULL),
   PANEL_TYPE("display",          cc_display_panel_get_type,              NULL),
@@ -101,9 +106,10 @@ static struct {
   PANEL_TYPE("mouse",            cc_mouse_panel_get_type,                NULL),
 #ifdef BUILD_NETWORK
   PANEL_TYPE("network",          cc_network_panel_get_type,              NULL),
-  PANEL_TYPE("wifi",             cc_wifi_panel_get_type,                 cc_wifi_panel_static_init_func),
+  //PANEL_TYPE("wifi",             cc_wifi_panel_get_type,                 cc_wifi_panel_static_init_func),
+  PANEL_TYPE("wifi",             cc_wifi_panel_get_type,                 NULL),
 #endif
-  PANEL_TYPE("notifications",    cc_notifications_panel_get_type,        NULL),
+//  PANEL_TYPE("notifications",    cc_notifications_panel_get_type,        NULL),
   PANEL_TYPE("online-accounts",  cc_goa_panel_get_type,                  NULL),
   PANEL_TYPE("power",            cc_power_panel_get_type,                NULL),
   PANEL_TYPE("printers",         cc_printers_panel_get_type,             NULL),
@@ -172,6 +178,26 @@ parse_categories (GDesktopAppInfo *app)
   return retval;
 }
 
+void
+cc_panel_loader_visible_from_schema (CcShellModel *model)
+{
+  g_auto(GStrv) whiteList;
+  GSettings *settings;
+  settings = g_settings_new ("org.gnome.ControlCenter");
+  whiteList = g_settings_get_strv (settings, "whitelist-panels");
+
+  for (gint i = 0; i < G_N_ELEMENTS (all_panels); i++)
+  {
+    for (int j = 0; j < whiteList[j] != NULL; j++)
+    {
+      if (g_strcmp0(all_panels[i].name, whiteList[j]) == 0)
+        cc_shell_model_set_panel_visibility (model, all_panels[i].name, CC_PANEL_VISIBLE);
+    }
+  }
+
+  g_clear_object (&settings);
+}
+
 void
 cc_panel_loader_fill_model (CcShellModel *model)
 {
@@ -182,6 +208,7 @@ cc_panel_loader_fill_model (CcShellModel *model)
       g_autoptr (GDesktopAppInfo) app;
       g_autofree gchar *desktop_name = NULL;
       gint category;
+      gboolean isVisible = TRUE;
 
       desktop_name = g_strconcat ("gnome-", all_panels[i].name, "-panel.desktop", NULL);
       app = g_desktop_app_info_new (desktop_name);
@@ -200,7 +227,7 @@ cc_panel_loader_fill_model (CcShellModel *model)
       if (!g_desktop_app_info_get_show_in (app, NULL))
         continue;
 
-      cc_shell_model_add_item (model, category, G_APP_INFO (app), all_panels[i].name);
+        cc_shell_model_add_item (model, category, G_APP_INFO (app), all_panels[i].name);
     }
 
   /* If there's an static init function, execute it after adding all panels to
@@ -214,6 +241,8 @@ cc_panel_loader_fill_model (CcShellModel *model)
         all_panels[i].static_init_func ();
     }
 #endif
+
+  cc_panel_loader_visible_from_schema (model);
 }
 
 #ifndef CC_PANEL_LOADER_NO_GTYPES
diff --git a/shell/cc-shell-model.c b/shell/cc-shell-model.c
index a84de3e..1826db1 100644
--- a/shell/cc-shell-model.c
+++ b/shell/cc-shell-model.c
@@ -1,6 +1,7 @@
 /*
  * Copyright (c) 2009, 2010 Intel, Inc.
  * Copyright (c) 2010 Red Hat, Inc.
+ * Copyright (C) 2019 gooroom <gooroom@gooroom.kr>
  *
  * The Control Center is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by the
@@ -337,7 +338,7 @@ cc_shell_model_add_item (CcShellModel    *model,
                                      COL_CASEFOLDED_DESCRIPTION, casefolded_description,
                                      COL_GICON, icon,
                                      COL_KEYWORDS, keywords,
-                                     COL_VISIBILITY, CC_PANEL_VISIBLE,
+                                     COL_VISIBILITY, CC_PANEL_HIDDEN,
                                      -1);
 
   g_free (casefolded_name);
@@ -420,6 +421,36 @@ cc_shell_model_set_sort_terms (CcShellModel  *self,
                                            NULL);
 }
 
+gboolean
+cc_shell_model_get_panel_visibility (CcShellModel *self,
+                                          const gchar  *id)
+{
+  GtkTreeModel *model;
+  GtkTreeIter iter;
+  gboolean valid;
+  gboolean visibility = FALSE;
+
+  g_return_if_fail (CC_IS_SHELL_MODEL (self));
+  
+  model = GTK_TREE_MODEL (self);
+  valid = gtk_tree_model_get_iter_first (model, &iter);
+  while (valid)
+  {
+    g_autofree gchar *item_id = NULL;
+
+    gtk_tree_model_get (model, &iter, COL_ID, &item_id, -1);
+    if (g_str_equal (id, item_id))
+      break;
+
+    valid = gtk_tree_model_iter_next (model, &iter);
+  }
+  g_assert (valid);
+
+  gtk_tree_model_get (GTK_LIST_STORE (self), &iter, COL_VISIBILITY, visibility, -1);
+
+  return visibility;
+}
+
 void
 cc_shell_model_set_panel_visibility (CcShellModel      *self,
                                      const gchar       *id,
diff --git a/shell/org.gnome.ControlCenter.gschema.xml b/shell/org.gnome.ControlCenter.gschema.xml
index 40350bc..8651b38 100644
--- a/shell/org.gnome.ControlCenter.gschema.xml
+++ b/shell/org.gnome.ControlCenter.gschema.xml
@@ -15,5 +15,10 @@
         Whether Settings should show a warning when running a development build.
       </description>
     </key>
+    <key name="whitelist-panels" type="as">
+      <default>['bluetooth', 'background', 'search', 'region', 'universal-access', 'font', 'online-accounts', 'privacy', 'sharing', 'sound', 'power', 'network', 'wifi', 'wacom', 'display', 'keyboard', 'printers', 'mouse', 'removable-media', 'thunderbolt', 'color', 'info-overview', 'datetime', 'user-accounts', 'default-apps', 'themes']</default>
+      <summary>Show settings list</summary>
+      <description>Show side panel list that matches the User settings values.</description>
+    </key>
   </schema>
 </schemalist>
-- 
2.20.1

