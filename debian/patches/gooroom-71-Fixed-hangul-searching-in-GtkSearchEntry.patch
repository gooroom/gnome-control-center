diff --git a/panels/common/cc-language-chooser.c b/panels/common/cc-language-chooser.c
index 445952a..89d0f0c 100644
--- a/panels/common/cc-language-chooser.c
+++ b/panels/common/cc-language-chooser.c
@@ -255,24 +255,43 @@ sort_languages (GtkListBoxRow *a,
 }
 
 static void
-filter_changed (CcLanguageChooser *chooser)
+update_filter_words (CcLanguageChooser *chooser, const gchar *filter_text)
 {
         g_autofree gchar *filter_contents = NULL;
 
         g_clear_pointer (&chooser->filter_words, g_strfreev);
 
-        filter_contents =
-                cc_util_normalize_casefold_and_unaccent (gtk_entry_get_text (GTK_ENTRY (chooser->language_filter_entry)));
+        filter_contents = cc_util_normalize_casefold_and_unaccent (filter_text);
         if (!filter_contents) {
-                gtk_list_box_invalidate_filter (GTK_LIST_BOX (chooser->language_listbox));
-                gtk_list_box_set_placeholder (GTK_LIST_BOX (chooser->language_listbox), NULL);
-                return;
+          gtk_list_box_invalidate_filter (GTK_LIST_BOX (chooser->language_listbox));
+          gtk_list_box_set_placeholder (GTK_LIST_BOX (chooser->language_listbox), NULL);
+          return;
         }
         chooser->filter_words = g_strsplit_set (g_strstrip (filter_contents), " ", 0);
         gtk_list_box_set_placeholder (GTK_LIST_BOX (chooser->language_listbox), chooser->no_results);
         gtk_list_box_invalidate_filter (GTK_LIST_BOX (chooser->language_listbox));
 }
 
+static void
+filter_entry_preedit_changed_cb (GtkEntry          *entry,
+                                 gchar             *preedit,
+                                 CcLanguageChooser *chooser)
+{
+        const gchar *text;
+        g_autofree gchar *filter_text = NULL;
+
+        text = gtk_entry_get_text (GTK_ENTRY (entry));
+        filter_text = (preedit == NULL) ? g_strdup (text) : g_strdup_printf ("%s%s", text, preedit);
+
+        update_filter_words (chooser, filter_text);
+}
+
+static void
+filter_changed (CcLanguageChooser *chooser)
+{
+        update_filter_words (chooser, gtk_entry_get_text (GTK_ENTRY (chooser->language_filter_entry)));
+}
+
 static void
 show_more (CcLanguageChooser *chooser, gboolean visible)
 {
@@ -393,6 +412,8 @@ cc_language_chooser_init (CcLanguageChooser *chooser)
 
         g_signal_connect_swapped (chooser->language_filter_entry, "search-changed",
                                   G_CALLBACK (filter_changed), chooser);
+        g_signal_connect (chooser->language_filter_entry, "preedit-changed",
+                          G_CALLBACK (filter_entry_preedit_changed_cb), chooser);
 
         g_signal_connect (chooser->language_listbox, "row-activated",
                           G_CALLBACK (row_activated), chooser);
diff --git a/panels/datetime/cc-datetime-panel.c b/panels/datetime/cc-datetime-panel.c
index 710046f..c65943f 100644
--- a/panels/datetime/cc-datetime-panel.c
+++ b/panels/datetime/cc-datetime-panel.c
@@ -25,6 +25,7 @@
 
 #include <langinfo.h>
 #include <sys/time.h>
+#include "cc-util.h"
 #include "list-box-helper.h"
 #include "cc-timezone-map.h"
 #include "timedated.h"
@@ -125,6 +126,9 @@ struct _CcDateTimePanel
 
   GPermission *permission;
   GPermission *tz_permission;
+
+  gchar *filter_text;
+  gchar *preedit_text;
 };
 
 CC_PANEL_REGISTER (CcDateTimePanel, cc_date_time_panel)
@@ -164,6 +168,8 @@ cc_date_time_panel_dispose (GObject *object)
 
   g_clear_pointer (&panel->listboxes, g_list_free);
   g_clear_pointer (&panel->listboxes_reverse, g_list_free);
+  g_clear_pointer (&panel->filter_text, g_free);
+  g_clear_pointer (&panel->preedit_text, g_free);
 
   G_OBJECT_CLASS (cc_date_time_panel_parent_class)->dispose (object);
 }
@@ -510,16 +516,12 @@ city_changed_cb (GtkEntryCompletion *entry_completion,
                  GtkTreeIter        *iter,
                  CcDateTimePanel *self)
 {
-  GtkWidget *entry;
   g_autofree gchar *zone = NULL;
 
   gtk_tree_model_get (model, iter,
                       CITY_COL_ZONE, &zone, -1);
   cc_timezone_map_set_timezone (CC_TIMEZONE_MAP (self->map), zone);
 
-  entry = gtk_entry_completion_get_entry (GTK_ENTRY_COMPLETION (entry_completion));
-  //gtk_entry_set_text (GTK_ENTRY (entry), "");
-
   return TRUE;
 }
 
@@ -1031,6 +1033,69 @@ format_hours_combobox (GtkSpinButton   *spin,
   return TRUE;
 }
 
+static void
+filter_changed (CcDateTimePanel *self)
+{
+  const gchar *text;
+  text = gtk_entry_get_text (GTK_ENTRY (self->timezone_searchentry));
+
+  g_clear_pointer (&self->filter_text, g_free);
+
+  if (self->preedit_text) {
+    self->filter_text = g_strdup_printf ("%s%s", text, self->preedit_text);
+    g_clear_pointer (&self->preedit_text, g_free);
+  } else {
+    self->filter_text = g_strdup (text);
+  }
+}
+
+static void
+filter_preedit_changed (GtkEntry        *entry,
+                        gchar           *preedit,
+                        CcDateTimePanel *self)
+{
+  g_clear_pointer (&self->preedit_text, g_free);
+  self->preedit_text = (preedit) ? g_strdup (preedit) : NULL;
+
+  g_signal_emit_by_name (G_OBJECT (entry), "changed", 0);
+}
+
+static gboolean
+match_func (GtkEntryCompletion *completion,
+            const gchar        *key,
+            GtkTreeIter        *iter,
+            gpointer            user_data)
+{
+  gchar *item = NULL;
+  gboolean ret = FALSE;
+  GtkTreeModel *model;
+  gchar *filter_text = NULL;
+
+  CcDateTimePanel *self = CC_DATE_TIME_PANEL (user_data);
+
+  if (!self->filter_text || strlen (self->filter_text) == 0)
+    return ret;
+
+  model = gtk_entry_completion_get_model (completion);
+
+  filter_text = cc_util_normalize_casefold_and_unaccent (self->filter_text);
+
+  gtk_tree_model_get (model, iter, CITY_COL_CITY_HUMAN_READABLE, &item, -1);
+  if (item != NULL) {
+    gchar *filter_contents = NULL;
+    filter_contents = cc_util_normalize_casefold_and_unaccent (item);
+    if (strstr (filter_contents, filter_text) != NULL)
+      ret = TRUE;
+
+    g_free (item);
+    g_free (filter_contents);
+  }
+
+  g_free (filter_text);
+
+  return ret;
+}
+
 static void
 setup_timezone_dialog (CcDateTimePanel *self)
 {
@@ -1044,11 +1109,16 @@ setup_timezone_dialog (CcDateTimePanel *self)
 
   /* Create the completion object */
   completion = gtk_entry_completion_new ();
-  gtk_entry_set_completion (GTK_ENTRY (self->timezone_searchentry), completion);
-
+  gtk_entry_completion_set_minimum_key_length (completion, 0);
   gtk_entry_completion_set_model (completion, GTK_TREE_MODEL (self->city_modelsort));
-
   gtk_entry_completion_set_text_column (completion, CITY_COL_CITY_HUMAN_READABLE);
+  gtk_entry_completion_set_match_func (completion, match_func, self, NULL);
+  gtk_entry_set_completion (GTK_ENTRY (self->timezone_searchentry), completion);
+
+  g_signal_connect_swapped (self->timezone_searchentry, "changed",
+                            G_CALLBACK (filter_changed), self);
+  g_signal_connect (self->timezone_searchentry, "preedit-changed",
+                    G_CALLBACK (filter_preedit_changed), self);
 }
 
 static char *
@@ -1227,6 +1297,8 @@ cc_date_time_panel_init (CcDateTimePanel *self)
 
   gtk_widget_init_template (GTK_WIDGET (self));
 
+  self->filter_text = NULL;
+  self->preedit_text = NULL;
   self->cancellable = g_cancellable_new ();
   error = NULL;
   self->dtm = timedate1_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
diff --git a/panels/font/cc-font-chooser-widget.c b/panels/font/cc-font-chooser-widget.c
index 09c334d..74832a2 100644
--- a/panels/font/cc-font-chooser-widget.c
+++ b/panels/font/cc-font-chooser-widget.c
@@ -72,6 +72,7 @@ struct _CcFontChooserWidgetPrivate
 
   GList                *feature_items;
   GAction              *tweak_action;
+  gchar                *filter_text;
 };
 
 /* This is the initial fixed height and the top padding of the preview entry */
@@ -313,6 +314,27 @@ static void
 text_changed_cb (GtkEntry             *entry,
                  CcFontChooserWidget *fc)
 {
+  CcFontChooserWidgetPrivate *priv = fc->priv;
+
+  g_free (priv->filter_text);
+  priv->filter_text = g_strdup (gtk_entry_get_text (GTK_ENTRY (priv->search_entry)));
+
+  cc_font_chooser_widget_refilter_font_list (fc);
+}
+
+static void
+preedit_changed_cb (GtkEntry            *entry,
+                    gchar               *preedit,
+                    CcFontChooserWidget *fc)
+{
+  const gchar *text;
+  CcFontChooserWidgetPrivate *priv = fc->priv;
+
+  text = gtk_entry_get_text (GTK_ENTRY (priv->search_entry));
+
+  g_free (priv->filter_text);
+  priv->filter_text = (preedit == NULL) ? g_strdup (text) : g_strdup_printf ("%s%s", text, preedit);
+
   cc_font_chooser_widget_refilter_font_list (fc);
 }
 
@@ -660,6 +682,7 @@ cc_font_chooser_widget_class_init (CcFontChooserWidgetClass *klass)
 
   gtk_widget_class_bind_template_callback (widget_class, text_changed_cb);
   gtk_widget_class_bind_template_callback (widget_class, stop_search_cb);
+  gtk_widget_class_bind_template_callback (widget_class, preedit_changed_cb);
   gtk_widget_class_bind_template_callback (widget_class, cursor_changed_cb);
   gtk_widget_class_bind_template_callback (widget_class, row_activated_cb);
   gtk_widget_class_bind_template_callback (widget_class, cc_font_chooser_widget_set_cell_size);
@@ -761,6 +784,8 @@ cc_font_chooser_widget_init (CcFontChooserWidget *fontchooser)
   priv->axes = g_hash_table_new_full (axis_hash, axis_equal, NULL, axis_free);
 #endif
 
+  priv->filter_text = NULL;
+
   /* Default preview string  */
   priv->preview_text = g_strdup (pango_language_get_sample_string (NULL));
   priv->show_preview_entry = TRUE;
@@ -938,7 +963,6 @@ visible_func (GtkTreeModel *model,
 {
   CcFontChooserWidgetPrivate *priv = user_data;
   gboolean result = TRUE;
-  const gchar *search_text;
   gchar **split_terms;
   gchar *font_name, *font_name_casefold;
   guint i;
@@ -963,8 +987,7 @@ visible_func (GtkTreeModel *model,
     }
 
   /* If there's no filter string we show the item */
-  search_text = gtk_entry_get_text (GTK_ENTRY (priv->search_entry));
-  if (strlen (search_text) == 0)
+  if (!priv->filter_text || strlen (priv->filter_text) == 0)
     return TRUE;
 
   gtk_tree_model_get (model, iter,
@@ -974,7 +997,7 @@ visible_func (GtkTreeModel *model,
   if (font_name == NULL)
     return FALSE;
 
-  split_terms = g_strsplit (search_text, " ", 0);
+  split_terms = g_strsplit (priv->filter_text, " ", 0);
   font_name_casefold = g_utf8_casefold (font_name, -1);
 
   for (i = 0; split_terms[i] && result; i++)
@@ -1103,6 +1126,7 @@ cc_font_chooser_widget_finalize (GObject *object)
     priv->filter_data_destroy (priv->filter_data);
 
   g_free (priv->preview_text);
+  g_free (priv->filter_text);
 
   g_clear_object (&priv->font_map);
 
diff --git a/panels/font/font-chooser-widget.ui b/panels/font/font-chooser-widget.ui
index ac0affc..e0b1167 100644
--- a/panels/font/font-chooser-widget.ui
+++ b/panels/font/font-chooser-widget.ui
@@ -53,6 +53,7 @@
                 <property name="placeholder-text" translatable="yes">Search font name</property>
                 <signal name="search-changed" handler="text_changed_cb" swapped="no"/>
                 <signal name="stop-search" handler="stop_search_cb" swapped="no"/>
+                <signal name="preedit-changed" handler="preedit_changed_cb" swapped="no"/>
               </object>
               <packing>
                 <property name="left-attach">0</property>
diff --git a/panels/keyboard/cc-keyboard-panel.c b/panels/keyboard/cc-keyboard-panel.c
index 51541cf..4f0b558 100644
--- a/panels/keyboard/cc-keyboard-panel.c
+++ b/panels/keyboard/cc-keyboard-panel.c
@@ -62,6 +62,8 @@ struct _CcKeyboardPanel
 
   GRegex             *pictures_regex;
 
+  gchar              *filter_text;
+
   CcKeyboardManager  *manager;
 };
 
@@ -217,6 +219,30 @@ reset_shortcut_cb (GtkWidget      *reset_button,
   cc_keyboard_manager_reset_shortcut (self->manager, item);
 }
 
+static void
+search_entry_text_changed_cb (CcKeyboardPanel *self)
+{
+  const gchar *text = gtk_entry_get_text (GTK_ENTRY (self->search_entry));
+
+  g_clear_pointer (&self->filter_text, g_free);
+  self->filter_text = (text == NULL) ? g_strdup ("") : g_strdup (text);
+
+  gtk_list_box_invalidate_filter (GTK_LIST_BOX (self->listbox));
+}
+
+static void
+search_entry_preedit_changed_cb (GtkEntry        *entry,
+                                 gchar           *preedit,
+                                 CcKeyboardPanel *self)
+{
+  const gchar *text = gtk_entry_get_text (GTK_ENTRY (self->search_entry));
+
+  g_clear_pointer (&self->filter_text, g_free);
+  self->filter_text = (preedit == NULL) ? g_strdup (text) : g_strdup_printf ("%s%s", text, preedit);
+
+  gtk_list_box_invalidate_filter (GTK_LIST_BOX (self->listbox));
+}
+
 static void
 add_item (CcKeyboardPanel *self,
           CcKeyboardItem  *item,
@@ -546,7 +572,7 @@ filter_function (GtkListBoxRow *row,
   g_auto(GStrv) terms = NULL;
   guint i;
 
-  if (gtk_entry_get_text_length (GTK_ENTRY (self->search_entry)) == 0)
+  if (self->filter_text && g_str_equal (self->filter_text, ""))
     return TRUE;
 
   /* When searching, the '+' row is always hidden */
@@ -556,7 +582,7 @@ filter_function (GtkListBoxRow *row,
   data = g_object_get_data (G_OBJECT (row), "data");
   item = data->item;
   name = cc_util_normalize_casefold_and_unaccent (cc_keyboard_item_get_description (item));
-  search = cc_util_normalize_casefold_and_unaccent (gtk_entry_get_text (GTK_ENTRY (self->search_entry)));
+  search = cc_util_normalize_casefold_and_unaccent (self->filter_text);
   terms = g_strsplit (search, " ", -1);
 
   for (i = 0; terms && terms[i]; i++)
@@ -622,6 +648,7 @@ cc_keyboard_panel_finalize (GObject *object)
   CcKeyboardPanel *self = CC_KEYBOARD_PANEL (object);
   GtkWidget *window;
 
+  g_clear_pointer (&self->filter_text, g_free);
   g_clear_pointer (&self->pictures_regex, g_regex_unref);
   g_clear_object (&self->accelerator_sizegroup);
 
@@ -683,6 +710,8 @@ cc_keyboard_panel_class_init (CcKeyboardPanelClass *klass)
 
   gtk_widget_class_bind_template_callback (widget_class, reset_all_clicked_cb);
   gtk_widget_class_bind_template_callback (widget_class, shortcut_row_activated);
+  gtk_widget_class_bind_template_callback (widget_class, search_entry_text_changed_cb);
+  gtk_widget_class_bind_template_callback (widget_class, search_entry_preedit_changed_cb);
 }
 
 static void
diff --git a/panels/keyboard/gnome-keyboard-panel.ui b/panels/keyboard/gnome-keyboard-panel.ui
index 94d8485..be9e1a1 100644
--- a/panels/keyboard/gnome-keyboard-panel.ui
+++ b/panels/keyboard/gnome-keyboard-panel.ui
@@ -27,7 +27,8 @@
               <object class="GtkSearchEntry" id="search_entry">
                 <property name="visible">True</property>
                 <property name="width_chars">30</property>
-                <signal name="notify::text" handler="gtk_list_box_invalidate_filter" object="listbox" swapped="yes" />
+                <signal name="notify::text" handler="search_entry_text_changed_cb" object="CcKeyboardPanel" swapped="yes" />
+                <signal name="preedit-changed" handler="search_entry_preedit_changed_cb" object="CcKeyboardPanel" swapped="no"/>
               </object>
             </child>
           </object>
diff --git a/panels/printers/cc-printers-panel.c b/panels/printers/cc-printers-panel.c
index d112e50..68f0348 100644
--- a/panels/printers/cc-printers-panel.c
+++ b/panels/printers/cc-printers-panel.c
@@ -110,6 +110,7 @@ struct _CcPrintersPanelPrivate
   gchar    *renamed_printer_name;
   gchar    *old_printer_name;
   gchar    *deleted_printer_name;
+  gchar    *filter_text;
 
   GHashTable *printer_entries;
   gboolean    entries_filled;
@@ -379,6 +380,10 @@ cc_printers_panel_dispose (GObject *object)
 static void
 cc_printers_panel_finalize (GObject *object)
 {
+  CcPrintersPanelPrivate *priv = CC_PRINTERS_PANEL (object)->priv;
+
+  g_clear_pointer (&priv->filter_text, g_free);
+
   G_OBJECT_CLASS (cc_printers_panel_parent_class)->finalize (object);
 }
 
@@ -1368,10 +1373,7 @@ filter_function (GtkListBoxRow *row,
 
   priv = PRINTERS_PANEL_PRIVATE (self);
 
-  search_entry = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "search-entry");
-
-  if (gtk_entry_get_text_length (GTK_ENTRY (search_entry)) == 0)
+  if (priv->filter_text && g_str_equal (priv->filter_text, ""))
     return TRUE;
 
   g_object_get (G_OBJECT (row),
@@ -1385,8 +1387,7 @@ filter_function (GtkListBoxRow *row,
   g_free (printer_name);
   g_free (printer_location);
 
-  search = cc_util_normalize_casefold_and_unaccent (gtk_entry_get_text (GTK_ENTRY (search_entry)));
-
+  search = cc_util_normalize_casefold_and_unaccent (priv->filter_text);
 
   retval = strstr (name, search) != NULL;
   if (location != NULL)
@@ -1399,6 +1400,35 @@ filter_function (GtkListBoxRow *row,
   return retval;
 }
 
+static void
+search_entry_text_changed_cb (GtkEntry *entry,
+                              CcPrintersPanel *self)
+{
+  CcPrintersPanelPrivate *priv = PRINTERS_PANEL_PRIVATE (self);
+
+  const gchar *text = gtk_entry_get_text (entry);
+
+  g_clear_pointer (&priv->filter_text, g_free);
+  priv->filter_text = (text == NULL) ? g_strdup ("") : g_strdup (text);
+
+  gtk_list_box_invalidate_filter (GTK_LIST_BOX (gtk_builder_get_object (priv->builder, "content")));
+}
+
+static void
+search_entry_preedit_changed_cb (GtkEntry        *entry,
+                                 gchar           *preedit,
+                                 CcPrintersPanel *self)
+{
+  CcPrintersPanelPrivate *priv = PRINTERS_PANEL_PRIVATE (self);
+
+  const gchar *text = gtk_entry_get_text (entry);
+
+  g_clear_pointer (&priv->filter_text, g_free);
+  priv->filter_text = (preedit == NULL) ? g_strdup (text) : g_strdup_printf ("%s%s", text, preedit);
+
+  gtk_list_box_invalidate_filter (GTK_LIST_BOX (gtk_builder_get_object (priv->builder, "content")));
+}
+
 static void
 cc_printers_panel_init (CcPrintersPanel *self)
 {
@@ -1504,10 +1534,15 @@ cc_printers_panel_init (CcPrintersPanel *self)
                                 filter_function,
                                 self,
                                 NULL);
-  g_signal_connect_swapped (gtk_builder_get_object (priv->builder, "search-entry"),
-                            "search-changed",
-                            G_CALLBACK (gtk_list_box_invalidate_filter),
-                            widget);
+  g_signal_connect (gtk_builder_get_object (priv->builder, "search-entry"),
+                    "search-changed",
+                    G_CALLBACK (search_entry_text_changed_cb),
+                    self);
+
+  g_signal_connect (gtk_builder_get_object (priv->builder, "search-entry"),
+                    "preedit-changed",
+                    G_CALLBACK (search_entry_preedit_changed_cb),
+                    self);
 
   priv->lockdown_settings = g_settings_new ("org.gnome.desktop.lockdown");
   if (priv->lockdown_settings)
diff --git a/panels/printers/pp-new-printer-dialog.c b/panels/printers/pp-new-printer-dialog.c
index fad10d1..9d1cd56 100644
--- a/panels/printers/pp-new-printer-dialog.c
+++ b/panels/printers/pp-new-printer-dialog.c
@@ -69,6 +69,9 @@ static void     search_entry_activated_cb (GtkEntry *entry,
                                            gpointer  user_data);
 static void     search_entry_changed_cb (GtkSearchEntry *entry,
                                          gpointer        user_data);
+static void     search_entry_preedit_changed_cb (GtkEntry *entry,
+                                                 gchar    *preedit,
+                                                 gpointer  user_data);
 static void     new_printer_dialog_response_cb (GtkDialog *_dialog,
                                                 gint       response_id,
                                                 gpointer   user_data);
@@ -566,6 +569,7 @@ pp_new_printer_dialog_init (PpNewPrinterDialog *dialog)
   widget = WID ("search-entry");
   g_signal_connect (widget, "activate", G_CALLBACK (search_entry_activated_cb), dialog);
   g_signal_connect (widget, "search-changed", G_CALLBACK (search_entry_changed_cb), dialog);
+  g_signal_connect (widget, "preedit-changed", G_CALLBACK (search_entry_preedit_changed_cb), dialog);
 
   widget = WID ("unlock-button");
   g_signal_connect (widget, "clicked", G_CALLBACK (authenticate_samba_server), dialog);
@@ -1802,6 +1806,23 @@ search_entry_changed_cb (GtkSearchEntry *entry,
                   TRUE);
 }
 
+static void
+search_entry_preedit_changed_cb (GtkEntry *entry,
+                                 gchar    *preedit,
+                                 gpointer  user_data)
+{
+  gchar *filter_text = NULL;
+  const gchar *text = gtk_entry_get_text (GTK_ENTRY (entry));
+
+  filter_text = (preedit == NULL) ? g_strdup (text) : g_strdup_printf ("%s%s", text, preedit);
+
+  search_address (filter_text,
+                  PP_NEW_PRINTER_DIALOG (user_data),
+                  TRUE);
+
+  g_free (filter_text);
+}
+
 static gchar *
 get_local_scheme_description_from_uri (gchar *device_uri)
 {
diff --git a/panels/region/cc-format-chooser.c b/panels/region/cc-format-chooser.c
index 59520e1..e9caf97 100644
--- a/panels/region/cc-format-chooser.c
+++ b/panels/region/cc-format-chooser.c
@@ -373,24 +373,52 @@ region_visible (GtkListBoxRow *row,
 }
 
 static void
-filter_changed (CcFormatChooser *chooser)
+update_filter_words (CcFormatChooser *chooser, const gchar *filter_text)
 {
         g_autofree gchar *filter_contents = NULL;
 
-        g_clear_pointer (&chooser->filter_words, g_strfreev);
+        if (!filter_text)
+                return;
 
         filter_contents =
-                cc_util_normalize_casefold_and_unaccent (gtk_entry_get_text (GTK_ENTRY (chooser->region_filter_entry)));
+                cc_util_normalize_casefold_and_unaccent (filter_text);
         if (!filter_contents) {
                 gtk_list_box_invalidate_filter (GTK_LIST_BOX (chooser->region_listbox));
                 gtk_list_box_set_placeholder (GTK_LIST_BOX (chooser->region_listbox), NULL);
                 return;
         }
+
+        g_clear_pointer (&chooser->filter_words, g_strfreev);
         chooser->filter_words = g_strsplit_set (g_strstrip (filter_contents), " ", 0);
         gtk_list_box_set_placeholder (GTK_LIST_BOX (chooser->region_listbox), GTK_WIDGET (chooser->no_results));
         gtk_list_box_invalidate_filter (GTK_LIST_BOX (chooser->region_listbox));
 }
 
+static void
+filter_changed (CcFormatChooser *chooser)
+{
+  const gchar *text;
+
+  text = gtk_entry_get_text (GTK_ENTRY (chooser->region_filter_entry));
+
+  update_filter_words (chooser, text);
+}
+
+static void
+filter_preedit_changed (GtkEntry       *entry,
+                        gchar          *preedit,
+                        CcFormatChooser *chooser)
+{
+  const gchar *text;
+  g_autofree gchar *filter_text = NULL;
+
+  text = gtk_entry_get_text (GTK_ENTRY (entry));
+
+  filter_text = (preedit == NULL) ? g_strdup (text) : g_strdup_printf ("%s%s", text, preedit);
+
+  update_filter_words (chooser, filter_text);
+}
+
 static void
 show_more (CcFormatChooser *chooser)
 {
@@ -510,6 +538,8 @@ cc_format_chooser_init (CcFormatChooser *chooser)
 
         g_signal_connect_swapped (chooser->region_filter_entry, "search-changed",
                                   G_CALLBACK (filter_changed), chooser);
+        g_signal_connect (chooser->region_filter_entry, "preedit-changed",
+                          G_CALLBACK (filter_preedit_changed), chooser);
 
         g_signal_connect (chooser->region_listbox, "row-activated",
                           G_CALLBACK (row_activated), chooser);
diff --git a/panels/region/cc-input-chooser.c b/panels/region/cc-input-chooser.c
index 5c2ee83..c545633 100644
--- a/panels/region/cc-input-chooser.c
+++ b/panels/region/cc-input-chooser.c
@@ -69,6 +69,7 @@ typedef struct {
   gchar **filter_words;
 
   gboolean is_login;
+  gchar    *filter_text;
 } CcInputChooserPrivate;
 
 #define GET_PRIVATE(chooser) ((CcInputChooserPrivate *) g_object_get_data (G_OBJECT (chooser), "private"))
@@ -549,8 +550,11 @@ do_filter (GtkWidget *chooser)
 
   priv->filter_timeout_id = 0;
 
+  if (!priv->filter_text)
+    return G_SOURCE_REMOVE;
+
   filter_contents =
-    cc_util_normalize_casefold_and_unaccent (gtk_entry_get_text (GTK_ENTRY (priv->filter_entry)));
+    cc_util_normalize_casefold_and_unaccent (priv->filter_text);
 
   previous_words = priv->filter_words;
   priv->filter_words = g_strsplit_set (g_strstrip (filter_contents), " ", 0);
@@ -574,6 +578,26 @@ filter_changed (GtkWidget *chooser)
 {
   CcInputChooserPrivate *priv = GET_PRIVATE (chooser);
 
+  g_free (priv->filter_text);
+  priv->filter_text = g_strdup (gtk_entry_get_text (GTK_ENTRY (priv->filter_entry)));
+
+  if (priv->filter_timeout_id == 0)
+    priv->filter_timeout_id = g_timeout_add (FILTER_TIMEOUT, (GSourceFunc) do_filter, chooser);
+}
+
+static void
+filter_preedit_changed (GtkEntry       *entry,
+                        gchar          *preedit,
+                        CcInputChooser *chooser)
+{
+  const gchar *text;
+  CcInputChooserPrivate *priv = GET_PRIVATE (chooser);
+
+  text = gtk_entry_get_text (GTK_ENTRY (entry));
+
+  g_free (priv->filter_text);
+  priv->filter_text = (preedit == NULL) ? g_strdup (text) : g_strdup_printf ("%s%s", text, preedit);
+
   if (priv->filter_timeout_id == 0)
     priv->filter_timeout_id = g_timeout_add (FILTER_TIMEOUT, (GSourceFunc) do_filter, chooser);
 }
@@ -978,6 +1002,7 @@ cc_input_chooser_private_free (gpointer data)
   g_strfreev (priv->filter_words);
   if (priv->filter_timeout_id)
     g_source_remove (priv->filter_timeout_id);
+  g_free (priv->filter_text);
   g_free (priv);
 }
 
@@ -1013,6 +1038,7 @@ cc_input_chooser_new (GtkWindow    *main_window,
   priv = g_new0 (CcInputChooserPrivate, 1);
   g_object_set_data_full (G_OBJECT (chooser), "private", priv, cc_input_chooser_private_free);
 
+  priv->filter_text = NULL;
   priv->is_login = is_login;
   priv->xkb_info = xkb_info;
   priv->ibus_engines = ibus_engines;
@@ -1034,6 +1060,8 @@ cc_input_chooser_new (GtkWindow    *main_window,
   g_signal_connect (priv->list, "button-release-event", G_CALLBACK (list_button_release_event), chooser);
 
   g_signal_connect_swapped (priv->filter_entry, "search-changed", G_CALLBACK (filter_changed), chooser);
+  g_signal_connect (priv->filter_entry, "preedit-changed",
+                          G_CALLBACK (filter_preedit_changed), chooser);
   g_signal_connect (priv->filter_entry, "key-release-event", G_CALLBACK (reset_on_escape), chooser);
 
   if (priv->is_login)
diff --git a/shell/cc-window.c b/shell/cc-window.c
index 698f700..1a88f5b 100644
--- a/shell/cc-window.c
+++ b/shell/cc-window.c
@@ -494,6 +494,21 @@ search_entry_activate_cb (GtkEntry *entry,
   gtk_search_bar_set_search_mode (GTK_SEARCH_BAR (self->search_bar), !changed);
 }
 
+static void
+search_entry_preedit_changed_cb (GtkEntry *entry,
+                                 gchar    *preedit,
+                                 CcWindow *self)
+{
+  gchar *filter_text = NULL;
+  const gchar *text = gtk_entry_get_text (GTK_ENTRY (self->search_entry));
+
+  filter_text = (preedit == NULL) ? g_strdup (text) : g_strdup_printf ("%s%s", text, preedit);
+
+  cc_panel_list_set_search_query (CC_PANEL_LIST (self->panel_list), filter_text);
+
+  g_free (filter_text);
+}
+
 static void
 previous_button_clicked_cb (GtkButton *button,
                             CcWindow  *shell)
@@ -858,6 +873,7 @@ cc_window_class_init (CcWindowClass *klass)
   gtk_widget_class_bind_template_callback (widget_class, panel_list_view_changed_cb);
   gtk_widget_class_bind_template_callback (widget_class, previous_button_clicked_cb);
   gtk_widget_class_bind_template_callback (widget_class, search_entry_activate_cb);
+  gtk_widget_class_bind_template_callback (widget_class, search_entry_preedit_changed_cb);
   gtk_widget_class_bind_template_callback (widget_class, show_panel_cb);
   gtk_widget_class_bind_template_callback (widget_class, update_list_title);
   gtk_widget_class_bind_template_callback (widget_class, window_key_press_event_cb);
diff --git a/shell/cc-window.ui b/shell/cc-window.ui
index c912bc9..84d1711 100644
--- a/shell/cc-window.ui
+++ b/shell/cc-window.ui
@@ -37,6 +37,7 @@
                     <property name="primary_icon_sensitive">False</property>
                     <signal name="activate" handler="search_entry_activate_cb" object="CcWindow" swapped="no" />
                     <signal name="notify::text" handler="update_list_title" object="CcWindow" swapped="yes" />
+                    <signal name="preedit-changed" handler="search_entry_preedit_changed_cb" object="CcWindow" swapped="no"/>
                   </object>
                 </child>
               </object>
